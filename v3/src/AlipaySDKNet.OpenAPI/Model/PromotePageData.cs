/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PromotePageData
    /// </summary>
    [DataContract(Name = "PromotePageData")]
    public partial class PromotePageData : IEquatable<PromotePageData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotePageData" /> class.
        /// </summary>
        /// <param name="bizNo">留资流水号.</param>
        /// <param name="encryptUid">加密uid，用于深转数据回传.</param>
        /// <param name="propertyList">留资属性实例数据列表.</param>
        public PromotePageData(string bizNo = default(string), string encryptUid = default(string), List<PromotePagePropertyInstance> propertyList = default(List<PromotePagePropertyInstance>))
        {
            this.BizNo = bizNo;
            this.EncryptUid = encryptUid;
            this.PropertyList = propertyList;
        }

        /// <summary>
        /// 留资流水号
        /// </summary>
        /// <value>留资流水号</value>
        [DataMember(Name = "biz_no", EmitDefaultValue = false)]
        public string BizNo { get; set; }

        /// <summary>
        /// 加密uid，用于深转数据回传
        /// </summary>
        /// <value>加密uid，用于深转数据回传</value>
        [DataMember(Name = "encrypt_uid", EmitDefaultValue = false)]
        public string EncryptUid { get; set; }

        /// <summary>
        /// 留资属性实例数据列表
        /// </summary>
        /// <value>留资属性实例数据列表</value>
        [DataMember(Name = "property_list", EmitDefaultValue = false)]
        public List<PromotePagePropertyInstance> PropertyList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PromotePageData {\n");
            sb.Append("  BizNo: ").Append(BizNo).Append("\n");
            sb.Append("  EncryptUid: ").Append(EncryptUid).Append("\n");
            sb.Append("  PropertyList: ").Append(PropertyList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotePageData);
        }

        /// <summary>
        /// Returns true if PromotePageData instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotePageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotePageData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BizNo == input.BizNo ||
                    (this.BizNo != null &&
                    this.BizNo.Equals(input.BizNo))
                ) && 
                (
                    this.EncryptUid == input.EncryptUid ||
                    (this.EncryptUid != null &&
                    this.EncryptUid.Equals(input.EncryptUid))
                ) && 
                (
                    this.PropertyList == input.PropertyList ||
                    this.PropertyList != null &&
                    input.PropertyList != null &&
                    this.PropertyList.SequenceEqual(input.PropertyList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BizNo != null)
                {
                    hashCode = (hashCode * 59) + this.BizNo.GetHashCode();
                }
                if (this.EncryptUid != null)
                {
                    hashCode = (hashCode * 59) + this.EncryptUid.GetHashCode();
                }
                if (this.PropertyList != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
