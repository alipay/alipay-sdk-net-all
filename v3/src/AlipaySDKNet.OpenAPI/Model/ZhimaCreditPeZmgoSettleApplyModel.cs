/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ZhimaCreditPeZmgoSettleApplyModel
    /// </summary>
    [DataContract(Name = "ZhimaCreditPeZmgoSettleApplyModel")]
    public partial class ZhimaCreditPeZmgoSettleApplyModel : IEquatable<ZhimaCreditPeZmgoSettleApplyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZhimaCreditPeZmgoSettleApplyModel" /> class.
        /// </summary>
        /// <param name="actionType">DEFAULT_SETTLE 默认结算模式; PAY_TO_ZERO 支付转0元；.</param>
        /// <param name="agreementId">支付宝系统中用以唯一标识用户签约记录的编号。.</param>
        /// <param name="alipayOpenId">买家在支付宝的用户id.</param>
        /// <param name="alipayUserId">买家在支付宝的用户id.</param>
        /// <param name="outRequestNo">商户本次操作的请求流水号，用于标示请求流水的唯一性，不能包含除中文、英文、数字以外的字符，需要保证在商户端不重复。.</param>
        /// <param name="partnerId">商户ID.</param>
        /// <param name="payAmount">需要支付的金额，单位为：元（人民币），精确到小数点后两位.</param>
        /// <param name="settleExtendParams">settleExtendParams.</param>
        /// <param name="totalDiscountAmount">芝麻GO任务开始到到期过程中和任务相关享受的总优惠金额，单位为：元（人民币），精确到小数点后两位。.</param>
        /// <param name="totalRealPayAmount">芝麻GO任务开始到到期过程中和任务相关支付的总金额，单位为：元（人民币），精确到小数点后两位。.</param>
        /// <param name="totalTaskCount">芝麻GO任务开始到到期过程中和任务相关完成的任务次数.</param>
        /// <param name="withholdPlanNo">芝麻GO结算时，需要传入的扣款单据号。来源于协议到期通知消息，外部商户接入时，该参数必填.</param>
        public ZhimaCreditPeZmgoSettleApplyModel(string actionType = default(string), string agreementId = default(string), string alipayOpenId = default(string), string alipayUserId = default(string), string outRequestNo = default(string), string partnerId = default(string), string payAmount = default(string), SettleExtraParams settleExtendParams = default(SettleExtraParams), string totalDiscountAmount = default(string), string totalRealPayAmount = default(string), string totalTaskCount = default(string), string withholdPlanNo = default(string))
        {
            this.ActionType = actionType;
            this.AgreementId = agreementId;
            this.AlipayOpenId = alipayOpenId;
            this.AlipayUserId = alipayUserId;
            this.OutRequestNo = outRequestNo;
            this.PartnerId = partnerId;
            this.PayAmount = payAmount;
            this.SettleExtendParams = settleExtendParams;
            this.TotalDiscountAmount = totalDiscountAmount;
            this.TotalRealPayAmount = totalRealPayAmount;
            this.TotalTaskCount = totalTaskCount;
            this.WithholdPlanNo = withholdPlanNo;
        }

        /// <summary>
        /// DEFAULT_SETTLE 默认结算模式; PAY_TO_ZERO 支付转0元；
        /// </summary>
        /// <value>DEFAULT_SETTLE 默认结算模式; PAY_TO_ZERO 支付转0元；</value>
        [DataMember(Name = "action_type", EmitDefaultValue = false)]
        public string ActionType { get; set; }

        /// <summary>
        /// 支付宝系统中用以唯一标识用户签约记录的编号。
        /// </summary>
        /// <value>支付宝系统中用以唯一标识用户签约记录的编号。</value>
        [DataMember(Name = "agreement_id", EmitDefaultValue = false)]
        public string AgreementId { get; set; }

        /// <summary>
        /// 买家在支付宝的用户id
        /// </summary>
        /// <value>买家在支付宝的用户id</value>
        [DataMember(Name = "alipay_open_id", EmitDefaultValue = false)]
        public string AlipayOpenId { get; set; }

        /// <summary>
        /// 买家在支付宝的用户id
        /// </summary>
        /// <value>买家在支付宝的用户id</value>
        [DataMember(Name = "alipay_user_id", EmitDefaultValue = false)]
        public string AlipayUserId { get; set; }

        /// <summary>
        /// 商户本次操作的请求流水号，用于标示请求流水的唯一性，不能包含除中文、英文、数字以外的字符，需要保证在商户端不重复。
        /// </summary>
        /// <value>商户本次操作的请求流水号，用于标示请求流水的唯一性，不能包含除中文、英文、数字以外的字符，需要保证在商户端不重复。</value>
        [DataMember(Name = "out_request_no", EmitDefaultValue = false)]
        public string OutRequestNo { get; set; }

        /// <summary>
        /// 商户ID
        /// </summary>
        /// <value>商户ID</value>
        [DataMember(Name = "partner_id", EmitDefaultValue = false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// 需要支付的金额，单位为：元（人民币），精确到小数点后两位
        /// </summary>
        /// <value>需要支付的金额，单位为：元（人民币），精确到小数点后两位</value>
        [DataMember(Name = "pay_amount", EmitDefaultValue = false)]
        public string PayAmount { get; set; }

        /// <summary>
        /// Gets or Sets SettleExtendParams
        /// </summary>
        [DataMember(Name = "settle_extend_params", EmitDefaultValue = false)]
        public SettleExtraParams SettleExtendParams { get; set; }

        /// <summary>
        /// 芝麻GO任务开始到到期过程中和任务相关享受的总优惠金额，单位为：元（人民币），精确到小数点后两位。
        /// </summary>
        /// <value>芝麻GO任务开始到到期过程中和任务相关享受的总优惠金额，单位为：元（人民币），精确到小数点后两位。</value>
        [DataMember(Name = "total_discount_amount", EmitDefaultValue = false)]
        public string TotalDiscountAmount { get; set; }

        /// <summary>
        /// 芝麻GO任务开始到到期过程中和任务相关支付的总金额，单位为：元（人民币），精确到小数点后两位。
        /// </summary>
        /// <value>芝麻GO任务开始到到期过程中和任务相关支付的总金额，单位为：元（人民币），精确到小数点后两位。</value>
        [DataMember(Name = "total_real_pay_amount", EmitDefaultValue = false)]
        public string TotalRealPayAmount { get; set; }

        /// <summary>
        /// 芝麻GO任务开始到到期过程中和任务相关完成的任务次数
        /// </summary>
        /// <value>芝麻GO任务开始到到期过程中和任务相关完成的任务次数</value>
        [DataMember(Name = "total_task_count", EmitDefaultValue = false)]
        public string TotalTaskCount { get; set; }

        /// <summary>
        /// 芝麻GO结算时，需要传入的扣款单据号。来源于协议到期通知消息，外部商户接入时，该参数必填
        /// </summary>
        /// <value>芝麻GO结算时，需要传入的扣款单据号。来源于协议到期通知消息，外部商户接入时，该参数必填</value>
        [DataMember(Name = "withhold_plan_no", EmitDefaultValue = false)]
        public string WithholdPlanNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZhimaCreditPeZmgoSettleApplyModel {\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  AlipayOpenId: ").Append(AlipayOpenId).Append("\n");
            sb.Append("  AlipayUserId: ").Append(AlipayUserId).Append("\n");
            sb.Append("  OutRequestNo: ").Append(OutRequestNo).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  PayAmount: ").Append(PayAmount).Append("\n");
            sb.Append("  SettleExtendParams: ").Append(SettleExtendParams).Append("\n");
            sb.Append("  TotalDiscountAmount: ").Append(TotalDiscountAmount).Append("\n");
            sb.Append("  TotalRealPayAmount: ").Append(TotalRealPayAmount).Append("\n");
            sb.Append("  TotalTaskCount: ").Append(TotalTaskCount).Append("\n");
            sb.Append("  WithholdPlanNo: ").Append(WithholdPlanNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZhimaCreditPeZmgoSettleApplyModel);
        }

        /// <summary>
        /// Returns true if ZhimaCreditPeZmgoSettleApplyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ZhimaCreditPeZmgoSettleApplyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZhimaCreditPeZmgoSettleApplyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.AlipayOpenId == input.AlipayOpenId ||
                    (this.AlipayOpenId != null &&
                    this.AlipayOpenId.Equals(input.AlipayOpenId))
                ) && 
                (
                    this.AlipayUserId == input.AlipayUserId ||
                    (this.AlipayUserId != null &&
                    this.AlipayUserId.Equals(input.AlipayUserId))
                ) && 
                (
                    this.OutRequestNo == input.OutRequestNo ||
                    (this.OutRequestNo != null &&
                    this.OutRequestNo.Equals(input.OutRequestNo))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.PayAmount == input.PayAmount ||
                    (this.PayAmount != null &&
                    this.PayAmount.Equals(input.PayAmount))
                ) && 
                (
                    this.SettleExtendParams == input.SettleExtendParams ||
                    (this.SettleExtendParams != null &&
                    this.SettleExtendParams.Equals(input.SettleExtendParams))
                ) && 
                (
                    this.TotalDiscountAmount == input.TotalDiscountAmount ||
                    (this.TotalDiscountAmount != null &&
                    this.TotalDiscountAmount.Equals(input.TotalDiscountAmount))
                ) && 
                (
                    this.TotalRealPayAmount == input.TotalRealPayAmount ||
                    (this.TotalRealPayAmount != null &&
                    this.TotalRealPayAmount.Equals(input.TotalRealPayAmount))
                ) && 
                (
                    this.TotalTaskCount == input.TotalTaskCount ||
                    (this.TotalTaskCount != null &&
                    this.TotalTaskCount.Equals(input.TotalTaskCount))
                ) && 
                (
                    this.WithholdPlanNo == input.WithholdPlanNo ||
                    (this.WithholdPlanNo != null &&
                    this.WithholdPlanNo.Equals(input.WithholdPlanNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionType != null)
                {
                    hashCode = (hashCode * 59) + this.ActionType.GetHashCode();
                }
                if (this.AgreementId != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementId.GetHashCode();
                }
                if (this.AlipayOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayOpenId.GetHashCode();
                }
                if (this.AlipayUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayUserId.GetHashCode();
                }
                if (this.OutRequestNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutRequestNo.GetHashCode();
                }
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                if (this.PayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PayAmount.GetHashCode();
                }
                if (this.SettleExtendParams != null)
                {
                    hashCode = (hashCode * 59) + this.SettleExtendParams.GetHashCode();
                }
                if (this.TotalDiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDiscountAmount.GetHashCode();
                }
                if (this.TotalRealPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRealPayAmount.GetHashCode();
                }
                if (this.TotalTaskCount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTaskCount.GetHashCode();
                }
                if (this.WithholdPlanNo != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdPlanNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
