/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOfflineMarketShopCreateModel
    /// </summary>
    [DataContract(Name = "AlipayOfflineMarketShopCreateModel")]
    public partial class AlipayOfflineMarketShopCreateModel : IEquatable<AlipayOfflineMarketShopCreateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOfflineMarketShopCreateModel" /> class.
        /// </summary>
        /// <param name="address">门店详细地址，地址字符长度在4-50个字符，注：不含省市区。门店详细地址按规范格式填写地址，以免影响门店搜索及活动报名：例1：道路+门牌号，“人民东路18号”；例2：道路+门牌号+标志性建筑+楼层，“四川北路1552号欢乐广场1楼”。.</param>
        /// <param name="auditImages">门店审核时需要的图片；至少包含一张门头照片，两张内景照片，必须反映真实的门店情况，审核才能够通过；多个图片之间以英文逗号分隔。.</param>
        /// <param name="authLetter">门店授权函,营业执照与签约账号主体不一致时需要。.</param>
        /// <param name="bizVersion">店铺接口业务版本号，新接入的ISV，请统一传入2.0。.</param>
        /// <param name="box">门店是否有包厢，T表示有，F表示没有，不传在客户端不作展示。.</param>
        /// <param name="branchShopName">分店名称，比如：万塘路店，与主门店名合并在客户端显示为：肯德基(万塘路店)。.</param>
        /// <param name="brandLogo">品牌LOGO; 图片ID，不填写则默认为门店首图main_image。.</param>
        /// <param name="brandName">品牌名，不填写则默认为“其它品牌”。.</param>
        /// <param name="businessCertificate">许可证，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;；该字段只能上传一张许可证，一张以外的许可证、除营业执照和许可证之外其他证照请放在其他资质字段上传。.</param>
        /// <param name="businessCertificateExpires">许可证有效期，格式：2020-03-20或长期。严格按照格式填写。.</param>
        /// <param name="businessTime">请严格按\&quot;周一-周五 09:00-20:00,周六-周日 10:00-22:00\&quot;的格式进行填写，时间段不能重复，最多支持两个时间段，24小时营业请填写\&quot;00:00-23:59\&quot;.</param>
        /// <param name="categoryId">类目id，请参考&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。.</param>
        /// <param name="cityCode">城市编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。.</param>
        /// <param name="contactNumber">门店电话号码；支持座机和手机，只支持数字和+-号，在客户端对用户展现， 支持多个电话， 以英文逗号分隔。.</param>
        /// <param name="creator">（支付宝内部参数）小二的支付宝账号。.</param>
        /// <param name="districtCode">区县编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。.</param>
        /// <param name="enterpriseLogonId">（支付宝内部参数）企业支付宝账号。.</param>
        /// <param name="enterpriseName">（支付宝内部参数）企业支付宝账户名称。.</param>
        /// <param name="implementId">机具号，多个之间以英文逗号分隔。.</param>
        /// <param name="isOperatingOnline">是否在其他平台开店，T表示有开店，F表示未开店。.</param>
        /// <param name="isvUid">ISV返佣id，门店创建、或者门店交易的返佣将通过此账号反给ISV，如果有口碑签订了返佣协议，则该字段作为返佣数据提取的依据。此字段必须是个合法uid，2088开头的16位支付宝会员账号，如果传入错误将无法创建门店。.</param>
        /// <param name="latitude">纬度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker.</param>
        /// <param name="leadsId">（支付宝内部参数）leads的编号。.</param>
        /// <param name="licence">门店营业执照图片，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。.</param>
        /// <param name="licenceCode">门店营业执照编号，只支持输入中文，英文和数字，营业执照信息与is_operating_online至少填一项。.</param>
        /// <param name="licenceExpires">营业执照过期时间。格式：2020-10-20或长期。严格按照格式填写。.</param>
        /// <param name="licenceName">门店营业执照名称。.</param>
        /// <param name="longitude">经度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker.</param>
        /// <param name="mainImage">门店首图，非常重要，推荐尺寸2000*1500。.</param>
        /// <param name="mainShopName">主门店名  比如：肯德基；主店名里不要包含分店名，如“万塘路店”。主店名长度不能超过20个字符。.</param>
        /// <param name="noSmoking">是否有无烟区，T表示有无烟区，F表示没有无烟区，不传在客户端不展示。.</param>
        /// <param name="notifyMobile">门店店长电话号码；用于接收门店状态变更通知，收款成功通知等通知消息， 不在客户端展示。.</param>
        /// <param name="notifyUrl">通知地址.</param>
        /// <param name="onlineImage">废弃字段，请使用online_url字段替代。.</param>
        /// <param name="onlineUrl">其他平台开店的店铺链接url，多个url使用英文逗号隔开,isv迁移到新接口使用此字段，与is_operating_online&#x3D;T配套使用。.</param>
        /// <param name="opRole">表示以系统集成商的身份开店，开放平台现在统一传入ISV。.</param>
        /// <param name="operateNotifyUrl">当商户的门店审核状态发生变化时，会向该地址推送消息。.</param>
        /// <param name="otherAuthorization">其他资质。用于上传营业证照、许可证照外的其他资质，除已上传许可证外的其他许可证也可以在该字段上传。.</param>
        /// <param name="parking">门店是否支持停车，T表示支持，F表示不支持，不传在客户端不作展示。.</param>
        /// <param name="partnerId">（支付宝内部参数）服务商要操作的商户PID。.</param>
        /// <param name="payType">（支付宝内部参数）付款方式：code_scanned_pay：付款码   online_pay：在线买单。ISV不可以指定此字段，ISV泛行业开店默认为在线买单，云纵开店可以指定支付方式。.</param>
        /// <param name="provinceCode">省份编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。.</param>
        /// <param name="refApplyId">（支付宝内部参数）leads开店重试支付宝流水ID。.</param>
        /// <param name="requestId">支持英文字母和数字，由开发者自行定义（不允许重复），在门店notify消息中也会带有该参数，以此标明本次notify消息是对哪个请求的回应。.</param>
        /// <param name="storeId">外部门店编号；最长32位字符，该编号将作为收单接口的入参， 请开发者自行确保其唯一性。.</param>
        /// <param name="valueAdded">门店其他的服务，门店与用户线下兑现。.</param>
        /// <param name="version">废弃字段，使用biz_version字段替代。.</param>
        /// <param name="wifi">门店是否支持WIFI，T表示支持，F表示不支持，不传在客户端不作展示。.</param>
        public AlipayOfflineMarketShopCreateModel(string address = default(string), string auditImages = default(string), string authLetter = default(string), string bizVersion = default(string), string box = default(string), string branchShopName = default(string), string brandLogo = default(string), string brandName = default(string), string businessCertificate = default(string), string businessCertificateExpires = default(string), string businessTime = default(string), string categoryId = default(string), string cityCode = default(string), string contactNumber = default(string), string creator = default(string), string districtCode = default(string), string enterpriseLogonId = default(string), string enterpriseName = default(string), string implementId = default(string), string isOperatingOnline = default(string), string isvUid = default(string), string latitude = default(string), string leadsId = default(string), string licence = default(string), string licenceCode = default(string), string licenceExpires = default(string), string licenceName = default(string), string longitude = default(string), string mainImage = default(string), string mainShopName = default(string), string noSmoking = default(string), string notifyMobile = default(string), string notifyUrl = default(string), string onlineImage = default(string), string onlineUrl = default(string), string opRole = default(string), string operateNotifyUrl = default(string), string otherAuthorization = default(string), string parking = default(string), string partnerId = default(string), string payType = default(string), string provinceCode = default(string), string refApplyId = default(string), string requestId = default(string), string storeId = default(string), string valueAdded = default(string), string version = default(string), string wifi = default(string))
        {
            this.Address = address;
            this.AuditImages = auditImages;
            this.AuthLetter = authLetter;
            this.BizVersion = bizVersion;
            this.Box = box;
            this.BranchShopName = branchShopName;
            this.BrandLogo = brandLogo;
            this.BrandName = brandName;
            this.BusinessCertificate = businessCertificate;
            this.BusinessCertificateExpires = businessCertificateExpires;
            this.BusinessTime = businessTime;
            this.CategoryId = categoryId;
            this.CityCode = cityCode;
            this.ContactNumber = contactNumber;
            this.Creator = creator;
            this.DistrictCode = districtCode;
            this.EnterpriseLogonId = enterpriseLogonId;
            this.EnterpriseName = enterpriseName;
            this.ImplementId = implementId;
            this.IsOperatingOnline = isOperatingOnline;
            this.IsvUid = isvUid;
            this.Latitude = latitude;
            this.LeadsId = leadsId;
            this.Licence = licence;
            this.LicenceCode = licenceCode;
            this.LicenceExpires = licenceExpires;
            this.LicenceName = licenceName;
            this.Longitude = longitude;
            this.MainImage = mainImage;
            this.MainShopName = mainShopName;
            this.NoSmoking = noSmoking;
            this.NotifyMobile = notifyMobile;
            this.NotifyUrl = notifyUrl;
            this.OnlineImage = onlineImage;
            this.OnlineUrl = onlineUrl;
            this.OpRole = opRole;
            this.OperateNotifyUrl = operateNotifyUrl;
            this.OtherAuthorization = otherAuthorization;
            this.Parking = parking;
            this.PartnerId = partnerId;
            this.PayType = payType;
            this.ProvinceCode = provinceCode;
            this.RefApplyId = refApplyId;
            this.RequestId = requestId;
            this.StoreId = storeId;
            this.ValueAdded = valueAdded;
            this._Version = version;
            this.Wifi = wifi;
        }

        /// <summary>
        /// 门店详细地址，地址字符长度在4-50个字符，注：不含省市区。门店详细地址按规范格式填写地址，以免影响门店搜索及活动报名：例1：道路+门牌号，“人民东路18号”；例2：道路+门牌号+标志性建筑+楼层，“四川北路1552号欢乐广场1楼”。
        /// </summary>
        /// <value>门店详细地址，地址字符长度在4-50个字符，注：不含省市区。门店详细地址按规范格式填写地址，以免影响门店搜索及活动报名：例1：道路+门牌号，“人民东路18号”；例2：道路+门牌号+标志性建筑+楼层，“四川北路1552号欢乐广场1楼”。</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// 门店审核时需要的图片；至少包含一张门头照片，两张内景照片，必须反映真实的门店情况，审核才能够通过；多个图片之间以英文逗号分隔。
        /// </summary>
        /// <value>门店审核时需要的图片；至少包含一张门头照片，两张内景照片，必须反映真实的门店情况，审核才能够通过；多个图片之间以英文逗号分隔。</value>
        [DataMember(Name = "audit_images", EmitDefaultValue = false)]
        public string AuditImages { get; set; }

        /// <summary>
        /// 门店授权函,营业执照与签约账号主体不一致时需要。
        /// </summary>
        /// <value>门店授权函,营业执照与签约账号主体不一致时需要。</value>
        [DataMember(Name = "auth_letter", EmitDefaultValue = false)]
        public string AuthLetter { get; set; }

        /// <summary>
        /// 店铺接口业务版本号，新接入的ISV，请统一传入2.0。
        /// </summary>
        /// <value>店铺接口业务版本号，新接入的ISV，请统一传入2.0。</value>
        [DataMember(Name = "biz_version", EmitDefaultValue = false)]
        public string BizVersion { get; set; }

        /// <summary>
        /// 门店是否有包厢，T表示有，F表示没有，不传在客户端不作展示。
        /// </summary>
        /// <value>门店是否有包厢，T表示有，F表示没有，不传在客户端不作展示。</value>
        [DataMember(Name = "box", EmitDefaultValue = false)]
        public string Box { get; set; }

        /// <summary>
        /// 分店名称，比如：万塘路店，与主门店名合并在客户端显示为：肯德基(万塘路店)。
        /// </summary>
        /// <value>分店名称，比如：万塘路店，与主门店名合并在客户端显示为：肯德基(万塘路店)。</value>
        [DataMember(Name = "branch_shop_name", EmitDefaultValue = false)]
        public string BranchShopName { get; set; }

        /// <summary>
        /// 品牌LOGO; 图片ID，不填写则默认为门店首图main_image。
        /// </summary>
        /// <value>品牌LOGO; 图片ID，不填写则默认为门店首图main_image。</value>
        [DataMember(Name = "brand_logo", EmitDefaultValue = false)]
        public string BrandLogo { get; set; }

        /// <summary>
        /// 品牌名，不填写则默认为“其它品牌”。
        /// </summary>
        /// <value>品牌名，不填写则默认为“其它品牌”。</value>
        [DataMember(Name = "brand_name", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// 许可证，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;；该字段只能上传一张许可证，一张以外的许可证、除营业执照和许可证之外其他证照请放在其他资质字段上传。
        /// </summary>
        /// <value>许可证，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;；该字段只能上传一张许可证，一张以外的许可证、除营业执照和许可证之外其他证照请放在其他资质字段上传。</value>
        [DataMember(Name = "business_certificate", EmitDefaultValue = false)]
        public string BusinessCertificate { get; set; }

        /// <summary>
        /// 许可证有效期，格式：2020-03-20或长期。严格按照格式填写。
        /// </summary>
        /// <value>许可证有效期，格式：2020-03-20或长期。严格按照格式填写。</value>
        [DataMember(Name = "business_certificate_expires", EmitDefaultValue = false)]
        public string BusinessCertificateExpires { get; set; }

        /// <summary>
        /// 请严格按\&quot;周一-周五 09:00-20:00,周六-周日 10:00-22:00\&quot;的格式进行填写，时间段不能重复，最多支持两个时间段，24小时营业请填写\&quot;00:00-23:59\&quot;
        /// </summary>
        /// <value>请严格按\&quot;周一-周五 09:00-20:00,周六-周日 10:00-22:00\&quot;的格式进行填写，时间段不能重复，最多支持两个时间段，24小时营业请填写\&quot;00:00-23:59\&quot;</value>
        [DataMember(Name = "business_time", EmitDefaultValue = false)]
        public string BusinessTime { get; set; }

        /// <summary>
        /// 类目id，请参考&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。
        /// </summary>
        /// <value>类目id，请参考&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。</value>
        [DataMember(Name = "category_id", EmitDefaultValue = false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// 城市编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。
        /// </summary>
        /// <value>城市编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。</value>
        [DataMember(Name = "city_code", EmitDefaultValue = false)]
        public string CityCode { get; set; }

        /// <summary>
        /// 门店电话号码；支持座机和手机，只支持数字和+-号，在客户端对用户展现， 支持多个电话， 以英文逗号分隔。
        /// </summary>
        /// <value>门店电话号码；支持座机和手机，只支持数字和+-号，在客户端对用户展现， 支持多个电话， 以英文逗号分隔。</value>
        [DataMember(Name = "contact_number", EmitDefaultValue = false)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// （支付宝内部参数）小二的支付宝账号。
        /// </summary>
        /// <value>（支付宝内部参数）小二的支付宝账号。</value>
        [DataMember(Name = "creator", EmitDefaultValue = false)]
        public string Creator { get; set; }

        /// <summary>
        /// 区县编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。
        /// </summary>
        /// <value>区县编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。</value>
        [DataMember(Name = "district_code", EmitDefaultValue = false)]
        public string DistrictCode { get; set; }

        /// <summary>
        /// （支付宝内部参数）企业支付宝账号。
        /// </summary>
        /// <value>（支付宝内部参数）企业支付宝账号。</value>
        [DataMember(Name = "enterprise_logon_id", EmitDefaultValue = false)]
        public string EnterpriseLogonId { get; set; }

        /// <summary>
        /// （支付宝内部参数）企业支付宝账户名称。
        /// </summary>
        /// <value>（支付宝内部参数）企业支付宝账户名称。</value>
        [DataMember(Name = "enterprise_name", EmitDefaultValue = false)]
        public string EnterpriseName { get; set; }

        /// <summary>
        /// 机具号，多个之间以英文逗号分隔。
        /// </summary>
        /// <value>机具号，多个之间以英文逗号分隔。</value>
        [DataMember(Name = "implement_id", EmitDefaultValue = false)]
        public string ImplementId { get; set; }

        /// <summary>
        /// 是否在其他平台开店，T表示有开店，F表示未开店。
        /// </summary>
        /// <value>是否在其他平台开店，T表示有开店，F表示未开店。</value>
        [DataMember(Name = "is_operating_online", EmitDefaultValue = false)]
        public string IsOperatingOnline { get; set; }

        /// <summary>
        /// ISV返佣id，门店创建、或者门店交易的返佣将通过此账号反给ISV，如果有口碑签订了返佣协议，则该字段作为返佣数据提取的依据。此字段必须是个合法uid，2088开头的16位支付宝会员账号，如果传入错误将无法创建门店。
        /// </summary>
        /// <value>ISV返佣id，门店创建、或者门店交易的返佣将通过此账号反给ISV，如果有口碑签订了返佣协议，则该字段作为返佣数据提取的依据。此字段必须是个合法uid，2088开头的16位支付宝会员账号，如果传入错误将无法创建门店。</value>
        [DataMember(Name = "isv_uid", EmitDefaultValue = false)]
        public string IsvUid { get; set; }

        /// <summary>
        /// 纬度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker
        /// </summary>
        /// <value>纬度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public string Latitude { get; set; }

        /// <summary>
        /// （支付宝内部参数）leads的编号。
        /// </summary>
        /// <value>（支付宝内部参数）leads的编号。</value>
        [DataMember(Name = "leads_id", EmitDefaultValue = false)]
        public string LeadsId { get; set; }

        /// <summary>
        /// 门店营业执照图片，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。
        /// </summary>
        /// <value>门店营业执照图片，各行业所需的证照资质参见&lt;a href&#x3D;\&quot;https://doc.open.alipay.com/doc2/detail.htm?treeId&#x3D;205&amp;articleId&#x3D;104497&amp;docType&#x3D;1\&quot;&gt;商户入驻要求&lt;/a&gt;。</value>
        [DataMember(Name = "licence", EmitDefaultValue = false)]
        public string Licence { get; set; }

        /// <summary>
        /// 门店营业执照编号，只支持输入中文，英文和数字，营业执照信息与is_operating_online至少填一项。
        /// </summary>
        /// <value>门店营业执照编号，只支持输入中文，英文和数字，营业执照信息与is_operating_online至少填一项。</value>
        [DataMember(Name = "licence_code", EmitDefaultValue = false)]
        public string LicenceCode { get; set; }

        /// <summary>
        /// 营业执照过期时间。格式：2020-10-20或长期。严格按照格式填写。
        /// </summary>
        /// <value>营业执照过期时间。格式：2020-10-20或长期。严格按照格式填写。</value>
        [DataMember(Name = "licence_expires", EmitDefaultValue = false)]
        public string LicenceExpires { get; set; }

        /// <summary>
        /// 门店营业执照名称。
        /// </summary>
        /// <value>门店营业执照名称。</value>
        [DataMember(Name = "licence_name", EmitDefaultValue = false)]
        public string LicenceName { get; set; }

        /// <summary>
        /// 经度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker
        /// </summary>
        /// <value>经度；最长15位字符（包括小数点）， 注：高德坐标系。经纬度是门店搜索和活动推荐的重要参数，录入时请确保经纬度参数准确。高德经纬度查询：http://lbs.amap.com/console/show/picker</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public string Longitude { get; set; }

        /// <summary>
        /// 门店首图，非常重要，推荐尺寸2000*1500。
        /// </summary>
        /// <value>门店首图，非常重要，推荐尺寸2000*1500。</value>
        [DataMember(Name = "main_image", EmitDefaultValue = false)]
        public string MainImage { get; set; }

        /// <summary>
        /// 主门店名  比如：肯德基；主店名里不要包含分店名，如“万塘路店”。主店名长度不能超过20个字符。
        /// </summary>
        /// <value>主门店名  比如：肯德基；主店名里不要包含分店名，如“万塘路店”。主店名长度不能超过20个字符。</value>
        [DataMember(Name = "main_shop_name", EmitDefaultValue = false)]
        public string MainShopName { get; set; }

        /// <summary>
        /// 是否有无烟区，T表示有无烟区，F表示没有无烟区，不传在客户端不展示。
        /// </summary>
        /// <value>是否有无烟区，T表示有无烟区，F表示没有无烟区，不传在客户端不展示。</value>
        [DataMember(Name = "no_smoking", EmitDefaultValue = false)]
        public string NoSmoking { get; set; }

        /// <summary>
        /// 门店店长电话号码；用于接收门店状态变更通知，收款成功通知等通知消息， 不在客户端展示。
        /// </summary>
        /// <value>门店店长电话号码；用于接收门店状态变更通知，收款成功通知等通知消息， 不在客户端展示。</value>
        [DataMember(Name = "notify_mobile", EmitDefaultValue = false)]
        public string NotifyMobile { get; set; }

        /// <summary>
        /// 通知地址
        /// </summary>
        /// <value>通知地址</value>
        [DataMember(Name = "notify_url", EmitDefaultValue = false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        /// 废弃字段，请使用online_url字段替代。
        /// </summary>
        /// <value>废弃字段，请使用online_url字段替代。</value>
        [DataMember(Name = "online_image", EmitDefaultValue = false)]
        public string OnlineImage { get; set; }

        /// <summary>
        /// 其他平台开店的店铺链接url，多个url使用英文逗号隔开,isv迁移到新接口使用此字段，与is_operating_online&#x3D;T配套使用。
        /// </summary>
        /// <value>其他平台开店的店铺链接url，多个url使用英文逗号隔开,isv迁移到新接口使用此字段，与is_operating_online&#x3D;T配套使用。</value>
        [DataMember(Name = "online_url", EmitDefaultValue = false)]
        public string OnlineUrl { get; set; }

        /// <summary>
        /// 表示以系统集成商的身份开店，开放平台现在统一传入ISV。
        /// </summary>
        /// <value>表示以系统集成商的身份开店，开放平台现在统一传入ISV。</value>
        [DataMember(Name = "op_role", EmitDefaultValue = false)]
        public string OpRole { get; set; }

        /// <summary>
        /// 当商户的门店审核状态发生变化时，会向该地址推送消息。
        /// </summary>
        /// <value>当商户的门店审核状态发生变化时，会向该地址推送消息。</value>
        [DataMember(Name = "operate_notify_url", EmitDefaultValue = false)]
        public string OperateNotifyUrl { get; set; }

        /// <summary>
        /// 其他资质。用于上传营业证照、许可证照外的其他资质，除已上传许可证外的其他许可证也可以在该字段上传。
        /// </summary>
        /// <value>其他资质。用于上传营业证照、许可证照外的其他资质，除已上传许可证外的其他许可证也可以在该字段上传。</value>
        [DataMember(Name = "other_authorization", EmitDefaultValue = false)]
        public string OtherAuthorization { get; set; }

        /// <summary>
        /// 门店是否支持停车，T表示支持，F表示不支持，不传在客户端不作展示。
        /// </summary>
        /// <value>门店是否支持停车，T表示支持，F表示不支持，不传在客户端不作展示。</value>
        [DataMember(Name = "parking", EmitDefaultValue = false)]
        public string Parking { get; set; }

        /// <summary>
        /// （支付宝内部参数）服务商要操作的商户PID。
        /// </summary>
        /// <value>（支付宝内部参数）服务商要操作的商户PID。</value>
        [DataMember(Name = "partner_id", EmitDefaultValue = false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// （支付宝内部参数）付款方式：code_scanned_pay：付款码   online_pay：在线买单。ISV不可以指定此字段，ISV泛行业开店默认为在线买单，云纵开店可以指定支付方式。
        /// </summary>
        /// <value>（支付宝内部参数）付款方式：code_scanned_pay：付款码   online_pay：在线买单。ISV不可以指定此字段，ISV泛行业开店默认为在线买单，云纵开店可以指定支付方式。</value>
        [DataMember(Name = "pay_type", EmitDefaultValue = false)]
        public string PayType { get; set; }

        /// <summary>
        /// 省份编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。
        /// </summary>
        /// <value>省份编码，国标码，详见国家统计局数据 &lt;a href&#x3D;\&quot;https://gw.alipayobjects.com/os/basement_prod/92d874c4-39a9-4977-b710-d55dad374b7f.csv\&quot;&gt;点此下载&lt;/a&gt;。</value>
        [DataMember(Name = "province_code", EmitDefaultValue = false)]
        public string ProvinceCode { get; set; }

        /// <summary>
        /// （支付宝内部参数）leads开店重试支付宝流水ID。
        /// </summary>
        /// <value>（支付宝内部参数）leads开店重试支付宝流水ID。</value>
        [DataMember(Name = "ref_apply_id", EmitDefaultValue = false)]
        public string RefApplyId { get; set; }

        /// <summary>
        /// 支持英文字母和数字，由开发者自行定义（不允许重复），在门店notify消息中也会带有该参数，以此标明本次notify消息是对哪个请求的回应。
        /// </summary>
        /// <value>支持英文字母和数字，由开发者自行定义（不允许重复），在门店notify消息中也会带有该参数，以此标明本次notify消息是对哪个请求的回应。</value>
        [DataMember(Name = "request_id", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// 外部门店编号；最长32位字符，该编号将作为收单接口的入参， 请开发者自行确保其唯一性。
        /// </summary>
        /// <value>外部门店编号；最长32位字符，该编号将作为收单接口的入参， 请开发者自行确保其唯一性。</value>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// 门店其他的服务，门店与用户线下兑现。
        /// </summary>
        /// <value>门店其他的服务，门店与用户线下兑现。</value>
        [DataMember(Name = "value_added", EmitDefaultValue = false)]
        public string ValueAdded { get; set; }

        /// <summary>
        /// 废弃字段，使用biz_version字段替代。
        /// </summary>
        /// <value>废弃字段，使用biz_version字段替代。</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// 门店是否支持WIFI，T表示支持，F表示不支持，不传在客户端不作展示。
        /// </summary>
        /// <value>门店是否支持WIFI，T表示支持，F表示不支持，不传在客户端不作展示。</value>
        [DataMember(Name = "wifi", EmitDefaultValue = false)]
        public string Wifi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOfflineMarketShopCreateModel {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AuditImages: ").Append(AuditImages).Append("\n");
            sb.Append("  AuthLetter: ").Append(AuthLetter).Append("\n");
            sb.Append("  BizVersion: ").Append(BizVersion).Append("\n");
            sb.Append("  Box: ").Append(Box).Append("\n");
            sb.Append("  BranchShopName: ").Append(BranchShopName).Append("\n");
            sb.Append("  BrandLogo: ").Append(BrandLogo).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  BusinessCertificate: ").Append(BusinessCertificate).Append("\n");
            sb.Append("  BusinessCertificateExpires: ").Append(BusinessCertificateExpires).Append("\n");
            sb.Append("  BusinessTime: ").Append(BusinessTime).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  DistrictCode: ").Append(DistrictCode).Append("\n");
            sb.Append("  EnterpriseLogonId: ").Append(EnterpriseLogonId).Append("\n");
            sb.Append("  EnterpriseName: ").Append(EnterpriseName).Append("\n");
            sb.Append("  ImplementId: ").Append(ImplementId).Append("\n");
            sb.Append("  IsOperatingOnline: ").Append(IsOperatingOnline).Append("\n");
            sb.Append("  IsvUid: ").Append(IsvUid).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LeadsId: ").Append(LeadsId).Append("\n");
            sb.Append("  Licence: ").Append(Licence).Append("\n");
            sb.Append("  LicenceCode: ").Append(LicenceCode).Append("\n");
            sb.Append("  LicenceExpires: ").Append(LicenceExpires).Append("\n");
            sb.Append("  LicenceName: ").Append(LicenceName).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MainImage: ").Append(MainImage).Append("\n");
            sb.Append("  MainShopName: ").Append(MainShopName).Append("\n");
            sb.Append("  NoSmoking: ").Append(NoSmoking).Append("\n");
            sb.Append("  NotifyMobile: ").Append(NotifyMobile).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  OnlineImage: ").Append(OnlineImage).Append("\n");
            sb.Append("  OnlineUrl: ").Append(OnlineUrl).Append("\n");
            sb.Append("  OpRole: ").Append(OpRole).Append("\n");
            sb.Append("  OperateNotifyUrl: ").Append(OperateNotifyUrl).Append("\n");
            sb.Append("  OtherAuthorization: ").Append(OtherAuthorization).Append("\n");
            sb.Append("  Parking: ").Append(Parking).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  PayType: ").Append(PayType).Append("\n");
            sb.Append("  ProvinceCode: ").Append(ProvinceCode).Append("\n");
            sb.Append("  RefApplyId: ").Append(RefApplyId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  ValueAdded: ").Append(ValueAdded).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Wifi: ").Append(Wifi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOfflineMarketShopCreateModel);
        }

        /// <summary>
        /// Returns true if AlipayOfflineMarketShopCreateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOfflineMarketShopCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOfflineMarketShopCreateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AuditImages == input.AuditImages ||
                    (this.AuditImages != null &&
                    this.AuditImages.Equals(input.AuditImages))
                ) && 
                (
                    this.AuthLetter == input.AuthLetter ||
                    (this.AuthLetter != null &&
                    this.AuthLetter.Equals(input.AuthLetter))
                ) && 
                (
                    this.BizVersion == input.BizVersion ||
                    (this.BizVersion != null &&
                    this.BizVersion.Equals(input.BizVersion))
                ) && 
                (
                    this.Box == input.Box ||
                    (this.Box != null &&
                    this.Box.Equals(input.Box))
                ) && 
                (
                    this.BranchShopName == input.BranchShopName ||
                    (this.BranchShopName != null &&
                    this.BranchShopName.Equals(input.BranchShopName))
                ) && 
                (
                    this.BrandLogo == input.BrandLogo ||
                    (this.BrandLogo != null &&
                    this.BrandLogo.Equals(input.BrandLogo))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.BusinessCertificate == input.BusinessCertificate ||
                    (this.BusinessCertificate != null &&
                    this.BusinessCertificate.Equals(input.BusinessCertificate))
                ) && 
                (
                    this.BusinessCertificateExpires == input.BusinessCertificateExpires ||
                    (this.BusinessCertificateExpires != null &&
                    this.BusinessCertificateExpires.Equals(input.BusinessCertificateExpires))
                ) && 
                (
                    this.BusinessTime == input.BusinessTime ||
                    (this.BusinessTime != null &&
                    this.BusinessTime.Equals(input.BusinessTime))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CityCode == input.CityCode ||
                    (this.CityCode != null &&
                    this.CityCode.Equals(input.CityCode))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.DistrictCode == input.DistrictCode ||
                    (this.DistrictCode != null &&
                    this.DistrictCode.Equals(input.DistrictCode))
                ) && 
                (
                    this.EnterpriseLogonId == input.EnterpriseLogonId ||
                    (this.EnterpriseLogonId != null &&
                    this.EnterpriseLogonId.Equals(input.EnterpriseLogonId))
                ) && 
                (
                    this.EnterpriseName == input.EnterpriseName ||
                    (this.EnterpriseName != null &&
                    this.EnterpriseName.Equals(input.EnterpriseName))
                ) && 
                (
                    this.ImplementId == input.ImplementId ||
                    (this.ImplementId != null &&
                    this.ImplementId.Equals(input.ImplementId))
                ) && 
                (
                    this.IsOperatingOnline == input.IsOperatingOnline ||
                    (this.IsOperatingOnline != null &&
                    this.IsOperatingOnline.Equals(input.IsOperatingOnline))
                ) && 
                (
                    this.IsvUid == input.IsvUid ||
                    (this.IsvUid != null &&
                    this.IsvUid.Equals(input.IsvUid))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.LeadsId == input.LeadsId ||
                    (this.LeadsId != null &&
                    this.LeadsId.Equals(input.LeadsId))
                ) && 
                (
                    this.Licence == input.Licence ||
                    (this.Licence != null &&
                    this.Licence.Equals(input.Licence))
                ) && 
                (
                    this.LicenceCode == input.LicenceCode ||
                    (this.LicenceCode != null &&
                    this.LicenceCode.Equals(input.LicenceCode))
                ) && 
                (
                    this.LicenceExpires == input.LicenceExpires ||
                    (this.LicenceExpires != null &&
                    this.LicenceExpires.Equals(input.LicenceExpires))
                ) && 
                (
                    this.LicenceName == input.LicenceName ||
                    (this.LicenceName != null &&
                    this.LicenceName.Equals(input.LicenceName))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.MainImage == input.MainImage ||
                    (this.MainImage != null &&
                    this.MainImage.Equals(input.MainImage))
                ) && 
                (
                    this.MainShopName == input.MainShopName ||
                    (this.MainShopName != null &&
                    this.MainShopName.Equals(input.MainShopName))
                ) && 
                (
                    this.NoSmoking == input.NoSmoking ||
                    (this.NoSmoking != null &&
                    this.NoSmoking.Equals(input.NoSmoking))
                ) && 
                (
                    this.NotifyMobile == input.NotifyMobile ||
                    (this.NotifyMobile != null &&
                    this.NotifyMobile.Equals(input.NotifyMobile))
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                ) && 
                (
                    this.OnlineImage == input.OnlineImage ||
                    (this.OnlineImage != null &&
                    this.OnlineImage.Equals(input.OnlineImage))
                ) && 
                (
                    this.OnlineUrl == input.OnlineUrl ||
                    (this.OnlineUrl != null &&
                    this.OnlineUrl.Equals(input.OnlineUrl))
                ) && 
                (
                    this.OpRole == input.OpRole ||
                    (this.OpRole != null &&
                    this.OpRole.Equals(input.OpRole))
                ) && 
                (
                    this.OperateNotifyUrl == input.OperateNotifyUrl ||
                    (this.OperateNotifyUrl != null &&
                    this.OperateNotifyUrl.Equals(input.OperateNotifyUrl))
                ) && 
                (
                    this.OtherAuthorization == input.OtherAuthorization ||
                    (this.OtherAuthorization != null &&
                    this.OtherAuthorization.Equals(input.OtherAuthorization))
                ) && 
                (
                    this.Parking == input.Parking ||
                    (this.Parking != null &&
                    this.Parking.Equals(input.Parking))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.PayType == input.PayType ||
                    (this.PayType != null &&
                    this.PayType.Equals(input.PayType))
                ) && 
                (
                    this.ProvinceCode == input.ProvinceCode ||
                    (this.ProvinceCode != null &&
                    this.ProvinceCode.Equals(input.ProvinceCode))
                ) && 
                (
                    this.RefApplyId == input.RefApplyId ||
                    (this.RefApplyId != null &&
                    this.RefApplyId.Equals(input.RefApplyId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.ValueAdded == input.ValueAdded ||
                    (this.ValueAdded != null &&
                    this.ValueAdded.Equals(input.ValueAdded))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Wifi == input.Wifi ||
                    (this.Wifi != null &&
                    this.Wifi.Equals(input.Wifi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.AuditImages != null)
                {
                    hashCode = (hashCode * 59) + this.AuditImages.GetHashCode();
                }
                if (this.AuthLetter != null)
                {
                    hashCode = (hashCode * 59) + this.AuthLetter.GetHashCode();
                }
                if (this.BizVersion != null)
                {
                    hashCode = (hashCode * 59) + this.BizVersion.GetHashCode();
                }
                if (this.Box != null)
                {
                    hashCode = (hashCode * 59) + this.Box.GetHashCode();
                }
                if (this.BranchShopName != null)
                {
                    hashCode = (hashCode * 59) + this.BranchShopName.GetHashCode();
                }
                if (this.BrandLogo != null)
                {
                    hashCode = (hashCode * 59) + this.BrandLogo.GetHashCode();
                }
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.BusinessCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCertificate.GetHashCode();
                }
                if (this.BusinessCertificateExpires != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCertificateExpires.GetHashCode();
                }
                if (this.BusinessTime != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessTime.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.CityCode != null)
                {
                    hashCode = (hashCode * 59) + this.CityCode.GetHashCode();
                }
                if (this.ContactNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ContactNumber.GetHashCode();
                }
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                if (this.DistrictCode != null)
                {
                    hashCode = (hashCode * 59) + this.DistrictCode.GetHashCode();
                }
                if (this.EnterpriseLogonId != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseLogonId.GetHashCode();
                }
                if (this.EnterpriseName != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseName.GetHashCode();
                }
                if (this.ImplementId != null)
                {
                    hashCode = (hashCode * 59) + this.ImplementId.GetHashCode();
                }
                if (this.IsOperatingOnline != null)
                {
                    hashCode = (hashCode * 59) + this.IsOperatingOnline.GetHashCode();
                }
                if (this.IsvUid != null)
                {
                    hashCode = (hashCode * 59) + this.IsvUid.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.LeadsId != null)
                {
                    hashCode = (hashCode * 59) + this.LeadsId.GetHashCode();
                }
                if (this.Licence != null)
                {
                    hashCode = (hashCode * 59) + this.Licence.GetHashCode();
                }
                if (this.LicenceCode != null)
                {
                    hashCode = (hashCode * 59) + this.LicenceCode.GetHashCode();
                }
                if (this.LicenceExpires != null)
                {
                    hashCode = (hashCode * 59) + this.LicenceExpires.GetHashCode();
                }
                if (this.LicenceName != null)
                {
                    hashCode = (hashCode * 59) + this.LicenceName.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.MainImage != null)
                {
                    hashCode = (hashCode * 59) + this.MainImage.GetHashCode();
                }
                if (this.MainShopName != null)
                {
                    hashCode = (hashCode * 59) + this.MainShopName.GetHashCode();
                }
                if (this.NoSmoking != null)
                {
                    hashCode = (hashCode * 59) + this.NoSmoking.GetHashCode();
                }
                if (this.NotifyMobile != null)
                {
                    hashCode = (hashCode * 59) + this.NotifyMobile.GetHashCode();
                }
                if (this.NotifyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NotifyUrl.GetHashCode();
                }
                if (this.OnlineImage != null)
                {
                    hashCode = (hashCode * 59) + this.OnlineImage.GetHashCode();
                }
                if (this.OnlineUrl != null)
                {
                    hashCode = (hashCode * 59) + this.OnlineUrl.GetHashCode();
                }
                if (this.OpRole != null)
                {
                    hashCode = (hashCode * 59) + this.OpRole.GetHashCode();
                }
                if (this.OperateNotifyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.OperateNotifyUrl.GetHashCode();
                }
                if (this.OtherAuthorization != null)
                {
                    hashCode = (hashCode * 59) + this.OtherAuthorization.GetHashCode();
                }
                if (this.Parking != null)
                {
                    hashCode = (hashCode * 59) + this.Parking.GetHashCode();
                }
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                if (this.PayType != null)
                {
                    hashCode = (hashCode * 59) + this.PayType.GetHashCode();
                }
                if (this.ProvinceCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProvinceCode.GetHashCode();
                }
                if (this.RefApplyId != null)
                {
                    hashCode = (hashCode * 59) + this.RefApplyId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.ValueAdded != null)
                {
                    hashCode = (hashCode * 59) + this.ValueAdded.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Wifi != null)
                {
                    hashCode = (hashCode * 59) + this.Wifi.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
