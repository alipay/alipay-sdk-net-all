/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// IntactChargeInfo
    /// </summary>
    [DataContract(Name = "IntactChargeInfo")]
    public partial class IntactChargeInfo : IEquatable<IntactChargeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntactChargeInfo" /> class.
        /// </summary>
        /// <param name="actualAmount">实际收费金额，单位元.</param>
        /// <param name="billType">收费类型.</param>
        /// <param name="gmtPay">收费时间,时间精确到秒.</param>
        /// <param name="isRefund">是否退费.</param>
        /// <param name="outBizNo">外部请求号.</param>
        /// <param name="planAmount">应收费金额，单位元.</param>
        /// <param name="productName">收费产品.</param>
        /// <param name="serviceTarget">收费唯一id.</param>
        /// <param name="serviceType">收费类型.</param>
        /// <param name="status">状态.</param>
        /// <param name="targetAccountNo">收费目标账号.</param>
        /// <param name="targetUserId">收费目标uid.</param>
        public IntactChargeInfo(string actualAmount = default(string), string billType = default(string), string gmtPay = default(string), bool isRefund = default(bool), string outBizNo = default(string), string planAmount = default(string), string productName = default(string), string serviceTarget = default(string), string serviceType = default(string), string status = default(string), string targetAccountNo = default(string), string targetUserId = default(string))
        {
            this.ActualAmount = actualAmount;
            this.BillType = billType;
            this.GmtPay = gmtPay;
            this.IsRefund = isRefund;
            this.OutBizNo = outBizNo;
            this.PlanAmount = planAmount;
            this.ProductName = productName;
            this.ServiceTarget = serviceTarget;
            this.ServiceType = serviceType;
            this.Status = status;
            this.TargetAccountNo = targetAccountNo;
            this.TargetUserId = targetUserId;
        }

        /// <summary>
        /// 实际收费金额，单位元
        /// </summary>
        /// <value>实际收费金额，单位元</value>
        [DataMember(Name = "actual_amount", EmitDefaultValue = false)]
        public string ActualAmount { get; set; }

        /// <summary>
        /// 收费类型
        /// </summary>
        /// <value>收费类型</value>
        [DataMember(Name = "bill_type", EmitDefaultValue = false)]
        public string BillType { get; set; }

        /// <summary>
        /// 收费时间,时间精确到秒
        /// </summary>
        /// <value>收费时间,时间精确到秒</value>
        [DataMember(Name = "gmt_pay", EmitDefaultValue = false)]
        public string GmtPay { get; set; }

        /// <summary>
        /// 是否退费
        /// </summary>
        /// <value>是否退费</value>
        [DataMember(Name = "is_refund", EmitDefaultValue = true)]
        public bool IsRefund { get; set; }

        /// <summary>
        /// 外部请求号
        /// </summary>
        /// <value>外部请求号</value>
        [DataMember(Name = "out_biz_no", EmitDefaultValue = false)]
        public string OutBizNo { get; set; }

        /// <summary>
        /// 应收费金额，单位元
        /// </summary>
        /// <value>应收费金额，单位元</value>
        [DataMember(Name = "plan_amount", EmitDefaultValue = false)]
        public string PlanAmount { get; set; }

        /// <summary>
        /// 收费产品
        /// </summary>
        /// <value>收费产品</value>
        [DataMember(Name = "product_name", EmitDefaultValue = false)]
        public string ProductName { get; set; }

        /// <summary>
        /// 收费唯一id
        /// </summary>
        /// <value>收费唯一id</value>
        [DataMember(Name = "service_target", EmitDefaultValue = false)]
        public string ServiceTarget { get; set; }

        /// <summary>
        /// 收费类型
        /// </summary>
        /// <value>收费类型</value>
        [DataMember(Name = "service_type", EmitDefaultValue = false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        /// <value>状态</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 收费目标账号
        /// </summary>
        /// <value>收费目标账号</value>
        [DataMember(Name = "target_account_no", EmitDefaultValue = false)]
        public string TargetAccountNo { get; set; }

        /// <summary>
        /// 收费目标uid
        /// </summary>
        /// <value>收费目标uid</value>
        [DataMember(Name = "target_user_id", EmitDefaultValue = false)]
        public string TargetUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntactChargeInfo {\n");
            sb.Append("  ActualAmount: ").Append(ActualAmount).Append("\n");
            sb.Append("  BillType: ").Append(BillType).Append("\n");
            sb.Append("  GmtPay: ").Append(GmtPay).Append("\n");
            sb.Append("  IsRefund: ").Append(IsRefund).Append("\n");
            sb.Append("  OutBizNo: ").Append(OutBizNo).Append("\n");
            sb.Append("  PlanAmount: ").Append(PlanAmount).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ServiceTarget: ").Append(ServiceTarget).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TargetAccountNo: ").Append(TargetAccountNo).Append("\n");
            sb.Append("  TargetUserId: ").Append(TargetUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntactChargeInfo);
        }

        /// <summary>
        /// Returns true if IntactChargeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IntactChargeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntactChargeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActualAmount == input.ActualAmount ||
                    (this.ActualAmount != null &&
                    this.ActualAmount.Equals(input.ActualAmount))
                ) && 
                (
                    this.BillType == input.BillType ||
                    (this.BillType != null &&
                    this.BillType.Equals(input.BillType))
                ) && 
                (
                    this.GmtPay == input.GmtPay ||
                    (this.GmtPay != null &&
                    this.GmtPay.Equals(input.GmtPay))
                ) && 
                (
                    this.IsRefund == input.IsRefund ||
                    this.IsRefund.Equals(input.IsRefund)
                ) && 
                (
                    this.OutBizNo == input.OutBizNo ||
                    (this.OutBizNo != null &&
                    this.OutBizNo.Equals(input.OutBizNo))
                ) && 
                (
                    this.PlanAmount == input.PlanAmount ||
                    (this.PlanAmount != null &&
                    this.PlanAmount.Equals(input.PlanAmount))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ServiceTarget == input.ServiceTarget ||
                    (this.ServiceTarget != null &&
                    this.ServiceTarget.Equals(input.ServiceTarget))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TargetAccountNo == input.TargetAccountNo ||
                    (this.TargetAccountNo != null &&
                    this.TargetAccountNo.Equals(input.TargetAccountNo))
                ) && 
                (
                    this.TargetUserId == input.TargetUserId ||
                    (this.TargetUserId != null &&
                    this.TargetUserId.Equals(input.TargetUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ActualAmount.GetHashCode();
                }
                if (this.BillType != null)
                {
                    hashCode = (hashCode * 59) + this.BillType.GetHashCode();
                }
                if (this.GmtPay != null)
                {
                    hashCode = (hashCode * 59) + this.GmtPay.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRefund.GetHashCode();
                if (this.OutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutBizNo.GetHashCode();
                }
                if (this.PlanAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PlanAmount.GetHashCode();
                }
                if (this.ProductName != null)
                {
                    hashCode = (hashCode * 59) + this.ProductName.GetHashCode();
                }
                if (this.ServiceTarget != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceTarget.GetHashCode();
                }
                if (this.ServiceType != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TargetAccountNo != null)
                {
                    hashCode = (hashCode * 59) + this.TargetAccountNo.GetHashCode();
                }
                if (this.TargetUserId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetUserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
