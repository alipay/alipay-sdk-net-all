/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// OpenCertifyMerchantConfig
    /// </summary>
    [DataContract(Name = "OpenCertifyMerchantConfig")]
    public partial class OpenCertifyMerchantConfig : IEquatable<OpenCertifyMerchantConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenCertifyMerchantConfig" /> class.
        /// </summary>
        /// <param name="authScope">用于开放认证授权.</param>
        /// <param name="authType">用于指定授权类型，与auth_scope配合使用.</param>
        /// <param name="faceReserveStrategy">不传默认为reserve.</param>
        /// <param name="facialPictureLevel">若有特殊人脸等级采集要求，可指定等级.</param>
        /// <param name="linkedMerchantAppId">用于授权二级商户操作.</param>
        /// <param name="linkedMerchantLogoUrl">用于指定展示的商户logo.</param>
        /// <param name="linkedMerchantName">用于指定展示的商户名称.</param>
        /// <param name="outPutFacialPicture">在拥有该权限前提下，用于商户控制是否透出活体人脸.</param>
        /// <param name="returnUrl">认证成功后需要跳转的地址，一般为商户业务页面；若无跳转地址可填空字符\&quot;\&quot;;.</param>
        public OpenCertifyMerchantConfig(string authScope = default(string), string authType = default(string), string faceReserveStrategy = default(string), string facialPictureLevel = default(string), string linkedMerchantAppId = default(string), string linkedMerchantLogoUrl = default(string), string linkedMerchantName = default(string), bool outPutFacialPicture = default(bool), string returnUrl = default(string))
        {
            this.AuthScope = authScope;
            this.AuthType = authType;
            this.FaceReserveStrategy = faceReserveStrategy;
            this.FacialPictureLevel = facialPictureLevel;
            this.LinkedMerchantAppId = linkedMerchantAppId;
            this.LinkedMerchantLogoUrl = linkedMerchantLogoUrl;
            this.LinkedMerchantName = linkedMerchantName;
            this.OutPutFacialPicture = outPutFacialPicture;
            this.ReturnUrl = returnUrl;
        }

        /// <summary>
        /// 用于开放认证授权
        /// </summary>
        /// <value>用于开放认证授权</value>
        [DataMember(Name = "auth_scope", EmitDefaultValue = false)]
        public string AuthScope { get; set; }

        /// <summary>
        /// 用于指定授权类型，与auth_scope配合使用
        /// </summary>
        /// <value>用于指定授权类型，与auth_scope配合使用</value>
        [DataMember(Name = "auth_type", EmitDefaultValue = false)]
        public string AuthType { get; set; }

        /// <summary>
        /// 不传默认为reserve
        /// </summary>
        /// <value>不传默认为reserve</value>
        [DataMember(Name = "face_reserve_strategy", EmitDefaultValue = false)]
        public string FaceReserveStrategy { get; set; }

        /// <summary>
        /// 若有特殊人脸等级采集要求，可指定等级
        /// </summary>
        /// <value>若有特殊人脸等级采集要求，可指定等级</value>
        [DataMember(Name = "facial_picture_level", EmitDefaultValue = false)]
        public string FacialPictureLevel { get; set; }

        /// <summary>
        /// 用于授权二级商户操作
        /// </summary>
        /// <value>用于授权二级商户操作</value>
        [DataMember(Name = "linked_merchant_app_id", EmitDefaultValue = false)]
        public string LinkedMerchantAppId { get; set; }

        /// <summary>
        /// 用于指定展示的商户logo
        /// </summary>
        /// <value>用于指定展示的商户logo</value>
        [DataMember(Name = "linked_merchant_logo_url", EmitDefaultValue = false)]
        public string LinkedMerchantLogoUrl { get; set; }

        /// <summary>
        /// 用于指定展示的商户名称
        /// </summary>
        /// <value>用于指定展示的商户名称</value>
        [DataMember(Name = "linked_merchant_name", EmitDefaultValue = false)]
        public string LinkedMerchantName { get; set; }

        /// <summary>
        /// 在拥有该权限前提下，用于商户控制是否透出活体人脸
        /// </summary>
        /// <value>在拥有该权限前提下，用于商户控制是否透出活体人脸</value>
        [DataMember(Name = "out_put_facial_picture", EmitDefaultValue = true)]
        public bool OutPutFacialPicture { get; set; }

        /// <summary>
        /// 认证成功后需要跳转的地址，一般为商户业务页面；若无跳转地址可填空字符\&quot;\&quot;;
        /// </summary>
        /// <value>认证成功后需要跳转的地址，一般为商户业务页面；若无跳转地址可填空字符\&quot;\&quot;;</value>
        [DataMember(Name = "return_url", EmitDefaultValue = false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenCertifyMerchantConfig {\n");
            sb.Append("  AuthScope: ").Append(AuthScope).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  FaceReserveStrategy: ").Append(FaceReserveStrategy).Append("\n");
            sb.Append("  FacialPictureLevel: ").Append(FacialPictureLevel).Append("\n");
            sb.Append("  LinkedMerchantAppId: ").Append(LinkedMerchantAppId).Append("\n");
            sb.Append("  LinkedMerchantLogoUrl: ").Append(LinkedMerchantLogoUrl).Append("\n");
            sb.Append("  LinkedMerchantName: ").Append(LinkedMerchantName).Append("\n");
            sb.Append("  OutPutFacialPicture: ").Append(OutPutFacialPicture).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenCertifyMerchantConfig);
        }

        /// <summary>
        /// Returns true if OpenCertifyMerchantConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenCertifyMerchantConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenCertifyMerchantConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthScope == input.AuthScope ||
                    (this.AuthScope != null &&
                    this.AuthScope.Equals(input.AuthScope))
                ) && 
                (
                    this.AuthType == input.AuthType ||
                    (this.AuthType != null &&
                    this.AuthType.Equals(input.AuthType))
                ) && 
                (
                    this.FaceReserveStrategy == input.FaceReserveStrategy ||
                    (this.FaceReserveStrategy != null &&
                    this.FaceReserveStrategy.Equals(input.FaceReserveStrategy))
                ) && 
                (
                    this.FacialPictureLevel == input.FacialPictureLevel ||
                    (this.FacialPictureLevel != null &&
                    this.FacialPictureLevel.Equals(input.FacialPictureLevel))
                ) && 
                (
                    this.LinkedMerchantAppId == input.LinkedMerchantAppId ||
                    (this.LinkedMerchantAppId != null &&
                    this.LinkedMerchantAppId.Equals(input.LinkedMerchantAppId))
                ) && 
                (
                    this.LinkedMerchantLogoUrl == input.LinkedMerchantLogoUrl ||
                    (this.LinkedMerchantLogoUrl != null &&
                    this.LinkedMerchantLogoUrl.Equals(input.LinkedMerchantLogoUrl))
                ) && 
                (
                    this.LinkedMerchantName == input.LinkedMerchantName ||
                    (this.LinkedMerchantName != null &&
                    this.LinkedMerchantName.Equals(input.LinkedMerchantName))
                ) && 
                (
                    this.OutPutFacialPicture == input.OutPutFacialPicture ||
                    this.OutPutFacialPicture.Equals(input.OutPutFacialPicture)
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthScope != null)
                {
                    hashCode = (hashCode * 59) + this.AuthScope.GetHashCode();
                }
                if (this.AuthType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthType.GetHashCode();
                }
                if (this.FaceReserveStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.FaceReserveStrategy.GetHashCode();
                }
                if (this.FacialPictureLevel != null)
                {
                    hashCode = (hashCode * 59) + this.FacialPictureLevel.GetHashCode();
                }
                if (this.LinkedMerchantAppId != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedMerchantAppId.GetHashCode();
                }
                if (this.LinkedMerchantLogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedMerchantLogoUrl.GetHashCode();
                }
                if (this.LinkedMerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedMerchantName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutPutFacialPicture.GetHashCode();
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
