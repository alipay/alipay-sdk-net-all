/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAgentCreateModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAgentCreateModel")]
    public partial class AlipayOpenAgentCreateModel : IEquatable<AlipayOpenAgentCreateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAgentCreateModel" /> class.
        /// </summary>
        /// <param name="account">isv代操作的商户账号，可以是支付宝账号，也可以是pid（2088开头）.</param>
        /// <param name="contactInfo">contactInfo.</param>
        /// <param name="orderTicket">订单授权凭证。若传入本参数，则对应事务提交后进入预授权模式。.</param>
        /// <param name="signMode">签约模式：目前只支持批量签约并不通知商户确认 使用场景：批量签约并授权场景，先调用签约接口进行签约，然后调用授权接口授权，在批量模式下，一次性签约多个产品，要么都成功要么都失败，同时在授权接口传入orderNo，会一起发送签约确认和授权确认，商户只需要确认一次；如果不是批量签约并授权场景，不要传此参数，否则商户无法收到确认签约通知；.</param>
        public AlipayOpenAgentCreateModel(string account = default(string), ContactModel contactInfo = default(ContactModel), string orderTicket = default(string), string signMode = default(string))
        {
            this.Account = account;
            this.ContactInfo = contactInfo;
            this.OrderTicket = orderTicket;
            this.SignMode = signMode;
        }

        /// <summary>
        /// isv代操作的商户账号，可以是支付宝账号，也可以是pid（2088开头）
        /// </summary>
        /// <value>isv代操作的商户账号，可以是支付宝账号，也可以是pid（2088开头）</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets ContactInfo
        /// </summary>
        [DataMember(Name = "contact_info", EmitDefaultValue = false)]
        public ContactModel ContactInfo { get; set; }

        /// <summary>
        /// 订单授权凭证。若传入本参数，则对应事务提交后进入预授权模式。
        /// </summary>
        /// <value>订单授权凭证。若传入本参数，则对应事务提交后进入预授权模式。</value>
        [DataMember(Name = "order_ticket", EmitDefaultValue = false)]
        public string OrderTicket { get; set; }

        /// <summary>
        /// 签约模式：目前只支持批量签约并不通知商户确认 使用场景：批量签约并授权场景，先调用签约接口进行签约，然后调用授权接口授权，在批量模式下，一次性签约多个产品，要么都成功要么都失败，同时在授权接口传入orderNo，会一起发送签约确认和授权确认，商户只需要确认一次；如果不是批量签约并授权场景，不要传此参数，否则商户无法收到确认签约通知；
        /// </summary>
        /// <value>签约模式：目前只支持批量签约并不通知商户确认 使用场景：批量签约并授权场景，先调用签约接口进行签约，然后调用授权接口授权，在批量模式下，一次性签约多个产品，要么都成功要么都失败，同时在授权接口传入orderNo，会一起发送签约确认和授权确认，商户只需要确认一次；如果不是批量签约并授权场景，不要传此参数，否则商户无法收到确认签约通知；</value>
        [DataMember(Name = "sign_mode", EmitDefaultValue = false)]
        public string SignMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAgentCreateModel {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ContactInfo: ").Append(ContactInfo).Append("\n");
            sb.Append("  OrderTicket: ").Append(OrderTicket).Append("\n");
            sb.Append("  SignMode: ").Append(SignMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAgentCreateModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAgentCreateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAgentCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAgentCreateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.ContactInfo == input.ContactInfo ||
                    (this.ContactInfo != null &&
                    this.ContactInfo.Equals(input.ContactInfo))
                ) && 
                (
                    this.OrderTicket == input.OrderTicket ||
                    (this.OrderTicket != null &&
                    this.OrderTicket.Equals(input.OrderTicket))
                ) && 
                (
                    this.SignMode == input.SignMode ||
                    (this.SignMode != null &&
                    this.SignMode.Equals(input.SignMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.ContactInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ContactInfo.GetHashCode();
                }
                if (this.OrderTicket != null)
                {
                    hashCode = (hashCode * 59) + this.OrderTicket.GetHashCode();
                }
                if (this.SignMode != null)
                {
                    hashCode = (hashCode * 59) + this.SignMode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
