/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-08-05
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// EcEmployeeTitleFailed
    /// </summary>
    [DataContract(Name = "EcEmployeeTitleFailed")]
    public partial class EcEmployeeTitleFailed : IEquatable<EcEmployeeTitleFailed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcEmployeeTitleFailed" /> class.
        /// </summary>
        /// <param name="employeeId">员工ID.</param>
        /// <param name="enterpriseId">企业ID.</param>
        /// <param name="message">返回每一个抬头批量处理信息.</param>
        /// <param name="titleId">抬头ID.</param>
        /// <param name="titleTag">标识抬头是否默认DEFAULT/多抬头MULTI.</param>
        public EcEmployeeTitleFailed(string employeeId = default(string), string enterpriseId = default(string), string message = default(string), string titleId = default(string), string titleTag = default(string))
        {
            this.EmployeeId = employeeId;
            this.EnterpriseId = enterpriseId;
            this.Message = message;
            this.TitleId = titleId;
            this.TitleTag = titleTag;
        }

        /// <summary>
        /// 员工ID
        /// </summary>
        /// <value>员工ID</value>
        [DataMember(Name = "employee_id", EmitDefaultValue = false)]
        public string EmployeeId { get; set; }

        /// <summary>
        /// 企业ID
        /// </summary>
        /// <value>企业ID</value>
        [DataMember(Name = "enterprise_id", EmitDefaultValue = false)]
        public string EnterpriseId { get; set; }

        /// <summary>
        /// 返回每一个抬头批量处理信息
        /// </summary>
        /// <value>返回每一个抬头批量处理信息</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// 抬头ID
        /// </summary>
        /// <value>抬头ID</value>
        [DataMember(Name = "title_id", EmitDefaultValue = false)]
        public string TitleId { get; set; }

        /// <summary>
        /// 标识抬头是否默认DEFAULT/多抬头MULTI
        /// </summary>
        /// <value>标识抬头是否默认DEFAULT/多抬头MULTI</value>
        [DataMember(Name = "title_tag", EmitDefaultValue = false)]
        public string TitleTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EcEmployeeTitleFailed {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EnterpriseId: ").Append(EnterpriseId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  TitleId: ").Append(TitleId).Append("\n");
            sb.Append("  TitleTag: ").Append(TitleTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcEmployeeTitleFailed);
        }

        /// <summary>
        /// Returns true if EcEmployeeTitleFailed instances are equal
        /// </summary>
        /// <param name="input">Instance of EcEmployeeTitleFailed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcEmployeeTitleFailed input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.EnterpriseId == input.EnterpriseId ||
                    (this.EnterpriseId != null &&
                    this.EnterpriseId.Equals(input.EnterpriseId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.TitleId == input.TitleId ||
                    (this.TitleId != null &&
                    this.TitleId.Equals(input.TitleId))
                ) && 
                (
                    this.TitleTag == input.TitleTag ||
                    (this.TitleTag != null &&
                    this.TitleTag.Equals(input.TitleTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployeeId != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeId.GetHashCode();
                }
                if (this.EnterpriseId != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseId.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.TitleId != null)
                {
                    hashCode = (hashCode * 59) + this.TitleId.GetHashCode();
                }
                if (this.TitleTag != null)
                {
                    hashCode = (hashCode * 59) + this.TitleTag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
