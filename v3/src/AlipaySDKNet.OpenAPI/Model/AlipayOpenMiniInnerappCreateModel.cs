/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniInnerappCreateModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniInnerappCreateModel")]
    public partial class AlipayOpenMiniInnerappCreateModel : IEquatable<AlipayOpenMiniInnerappCreateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniInnerappCreateModel" /> class.
        /// </summary>
        /// <param name="appCategoryIds">小程序类目，二级类目与三级类目下划线隔开，最多可以选择3个类目，类目之间以;隔开.</param>
        /// <param name="appDesc">小程序描述，20-200个字符.</param>
        /// <param name="appEnglishName">小程序英文名称，插件不填.</param>
        /// <param name="appLogo">小程序logo.</param>
        /// <param name="appName">小程序名称.</param>
        /// <param name="appOrigin">来源的业务方,接入文档中申请的业务来源.</param>
        /// <param name="appSlogan">小程序简介，在搜索透出,插件不需要填.</param>
        /// <param name="appSubType">应用子类型.</param>
        /// <param name="appType">应用类型.</param>
        /// <param name="isvAppId">三方应用ID，仅在创建模板小程序时需要传入.</param>
        /// <param name="miniAppId">小程序ID，仅特殊场景使用，普通业务方无需关注该参数.</param>
        /// <param name="miniCategoryIds">新小程序前台类目，格式为 第一个一级类目_第一个二级类目;第二个一级类目_第二个二级类目_第二个三级类目，详细类目可以通过 https://docs.open.alipay.com/api_49/alipay.open.mini.category.query接口查询mini_category_list。使用后不再读取app_category_ids值，老前台类目将废弃.</param>
        /// <param name="pid">创建的小程序所属的PID.</param>
        /// <param name="serviceEmail">邮箱，与客服电话二选一.</param>
        /// <param name="servicePhone">客服电话，插件不需要.</param>
        public AlipayOpenMiniInnerappCreateModel(string appCategoryIds = default(string), string appDesc = default(string), string appEnglishName = default(string), string appLogo = default(string), string appName = default(string), string appOrigin = default(string), string appSlogan = default(string), string appSubType = default(string), string appType = default(string), string isvAppId = default(string), string miniAppId = default(string), string miniCategoryIds = default(string), string pid = default(string), string serviceEmail = default(string), string servicePhone = default(string))
        {
            this.AppCategoryIds = appCategoryIds;
            this.AppDesc = appDesc;
            this.AppEnglishName = appEnglishName;
            this.AppLogo = appLogo;
            this.AppName = appName;
            this.AppOrigin = appOrigin;
            this.AppSlogan = appSlogan;
            this.AppSubType = appSubType;
            this.AppType = appType;
            this.IsvAppId = isvAppId;
            this.MiniAppId = miniAppId;
            this.MiniCategoryIds = miniCategoryIds;
            this.Pid = pid;
            this.ServiceEmail = serviceEmail;
            this.ServicePhone = servicePhone;
        }

        /// <summary>
        /// 小程序类目，二级类目与三级类目下划线隔开，最多可以选择3个类目，类目之间以;隔开
        /// </summary>
        /// <value>小程序类目，二级类目与三级类目下划线隔开，最多可以选择3个类目，类目之间以;隔开</value>
        [DataMember(Name = "app_category_ids", EmitDefaultValue = false)]
        public string AppCategoryIds { get; set; }

        /// <summary>
        /// 小程序描述，20-200个字符
        /// </summary>
        /// <value>小程序描述，20-200个字符</value>
        [DataMember(Name = "app_desc", EmitDefaultValue = false)]
        public string AppDesc { get; set; }

        /// <summary>
        /// 小程序英文名称，插件不填
        /// </summary>
        /// <value>小程序英文名称，插件不填</value>
        [DataMember(Name = "app_english_name", EmitDefaultValue = false)]
        public string AppEnglishName { get; set; }

        /// <summary>
        /// 小程序logo
        /// </summary>
        /// <value>小程序logo</value>
        [DataMember(Name = "app_logo", EmitDefaultValue = false)]
        public string AppLogo { get; set; }

        /// <summary>
        /// 小程序名称
        /// </summary>
        /// <value>小程序名称</value>
        [DataMember(Name = "app_name", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// 来源的业务方,接入文档中申请的业务来源
        /// </summary>
        /// <value>来源的业务方,接入文档中申请的业务来源</value>
        [DataMember(Name = "app_origin", EmitDefaultValue = false)]
        public string AppOrigin { get; set; }

        /// <summary>
        /// 小程序简介，在搜索透出,插件不需要填
        /// </summary>
        /// <value>小程序简介，在搜索透出,插件不需要填</value>
        [DataMember(Name = "app_slogan", EmitDefaultValue = false)]
        public string AppSlogan { get; set; }

        /// <summary>
        /// 应用子类型
        /// </summary>
        /// <value>应用子类型</value>
        [DataMember(Name = "app_sub_type", EmitDefaultValue = false)]
        public string AppSubType { get; set; }

        /// <summary>
        /// 应用类型
        /// </summary>
        /// <value>应用类型</value>
        [DataMember(Name = "app_type", EmitDefaultValue = false)]
        public string AppType { get; set; }

        /// <summary>
        /// 三方应用ID，仅在创建模板小程序时需要传入
        /// </summary>
        /// <value>三方应用ID，仅在创建模板小程序时需要传入</value>
        [DataMember(Name = "isv_app_id", EmitDefaultValue = false)]
        public string IsvAppId { get; set; }

        /// <summary>
        /// 小程序ID，仅特殊场景使用，普通业务方无需关注该参数
        /// </summary>
        /// <value>小程序ID，仅特殊场景使用，普通业务方无需关注该参数</value>
        [DataMember(Name = "mini_app_id", EmitDefaultValue = false)]
        public string MiniAppId { get; set; }

        /// <summary>
        /// 新小程序前台类目，格式为 第一个一级类目_第一个二级类目;第二个一级类目_第二个二级类目_第二个三级类目，详细类目可以通过 https://docs.open.alipay.com/api_49/alipay.open.mini.category.query接口查询mini_category_list。使用后不再读取app_category_ids值，老前台类目将废弃
        /// </summary>
        /// <value>新小程序前台类目，格式为 第一个一级类目_第一个二级类目;第二个一级类目_第二个二级类目_第二个三级类目，详细类目可以通过 https://docs.open.alipay.com/api_49/alipay.open.mini.category.query接口查询mini_category_list。使用后不再读取app_category_ids值，老前台类目将废弃</value>
        [DataMember(Name = "mini_category_ids", EmitDefaultValue = false)]
        public string MiniCategoryIds { get; set; }

        /// <summary>
        /// 创建的小程序所属的PID
        /// </summary>
        /// <value>创建的小程序所属的PID</value>
        [DataMember(Name = "pid", EmitDefaultValue = false)]
        public string Pid { get; set; }

        /// <summary>
        /// 邮箱，与客服电话二选一
        /// </summary>
        /// <value>邮箱，与客服电话二选一</value>
        [DataMember(Name = "service_email", EmitDefaultValue = false)]
        public string ServiceEmail { get; set; }

        /// <summary>
        /// 客服电话，插件不需要
        /// </summary>
        /// <value>客服电话，插件不需要</value>
        [DataMember(Name = "service_phone", EmitDefaultValue = false)]
        public string ServicePhone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniInnerappCreateModel {\n");
            sb.Append("  AppCategoryIds: ").Append(AppCategoryIds).Append("\n");
            sb.Append("  AppDesc: ").Append(AppDesc).Append("\n");
            sb.Append("  AppEnglishName: ").Append(AppEnglishName).Append("\n");
            sb.Append("  AppLogo: ").Append(AppLogo).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppOrigin: ").Append(AppOrigin).Append("\n");
            sb.Append("  AppSlogan: ").Append(AppSlogan).Append("\n");
            sb.Append("  AppSubType: ").Append(AppSubType).Append("\n");
            sb.Append("  AppType: ").Append(AppType).Append("\n");
            sb.Append("  IsvAppId: ").Append(IsvAppId).Append("\n");
            sb.Append("  MiniAppId: ").Append(MiniAppId).Append("\n");
            sb.Append("  MiniCategoryIds: ").Append(MiniCategoryIds).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  ServiceEmail: ").Append(ServiceEmail).Append("\n");
            sb.Append("  ServicePhone: ").Append(ServicePhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniInnerappCreateModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniInnerappCreateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniInnerappCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniInnerappCreateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppCategoryIds == input.AppCategoryIds ||
                    (this.AppCategoryIds != null &&
                    this.AppCategoryIds.Equals(input.AppCategoryIds))
                ) && 
                (
                    this.AppDesc == input.AppDesc ||
                    (this.AppDesc != null &&
                    this.AppDesc.Equals(input.AppDesc))
                ) && 
                (
                    this.AppEnglishName == input.AppEnglishName ||
                    (this.AppEnglishName != null &&
                    this.AppEnglishName.Equals(input.AppEnglishName))
                ) && 
                (
                    this.AppLogo == input.AppLogo ||
                    (this.AppLogo != null &&
                    this.AppLogo.Equals(input.AppLogo))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppOrigin == input.AppOrigin ||
                    (this.AppOrigin != null &&
                    this.AppOrigin.Equals(input.AppOrigin))
                ) && 
                (
                    this.AppSlogan == input.AppSlogan ||
                    (this.AppSlogan != null &&
                    this.AppSlogan.Equals(input.AppSlogan))
                ) && 
                (
                    this.AppSubType == input.AppSubType ||
                    (this.AppSubType != null &&
                    this.AppSubType.Equals(input.AppSubType))
                ) && 
                (
                    this.AppType == input.AppType ||
                    (this.AppType != null &&
                    this.AppType.Equals(input.AppType))
                ) && 
                (
                    this.IsvAppId == input.IsvAppId ||
                    (this.IsvAppId != null &&
                    this.IsvAppId.Equals(input.IsvAppId))
                ) && 
                (
                    this.MiniAppId == input.MiniAppId ||
                    (this.MiniAppId != null &&
                    this.MiniAppId.Equals(input.MiniAppId))
                ) && 
                (
                    this.MiniCategoryIds == input.MiniCategoryIds ||
                    (this.MiniCategoryIds != null &&
                    this.MiniCategoryIds.Equals(input.MiniCategoryIds))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.ServiceEmail == input.ServiceEmail ||
                    (this.ServiceEmail != null &&
                    this.ServiceEmail.Equals(input.ServiceEmail))
                ) && 
                (
                    this.ServicePhone == input.ServicePhone ||
                    (this.ServicePhone != null &&
                    this.ServicePhone.Equals(input.ServicePhone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppCategoryIds != null)
                {
                    hashCode = (hashCode * 59) + this.AppCategoryIds.GetHashCode();
                }
                if (this.AppDesc != null)
                {
                    hashCode = (hashCode * 59) + this.AppDesc.GetHashCode();
                }
                if (this.AppEnglishName != null)
                {
                    hashCode = (hashCode * 59) + this.AppEnglishName.GetHashCode();
                }
                if (this.AppLogo != null)
                {
                    hashCode = (hashCode * 59) + this.AppLogo.GetHashCode();
                }
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.AppOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.AppOrigin.GetHashCode();
                }
                if (this.AppSlogan != null)
                {
                    hashCode = (hashCode * 59) + this.AppSlogan.GetHashCode();
                }
                if (this.AppSubType != null)
                {
                    hashCode = (hashCode * 59) + this.AppSubType.GetHashCode();
                }
                if (this.AppType != null)
                {
                    hashCode = (hashCode * 59) + this.AppType.GetHashCode();
                }
                if (this.IsvAppId != null)
                {
                    hashCode = (hashCode * 59) + this.IsvAppId.GetHashCode();
                }
                if (this.MiniAppId != null)
                {
                    hashCode = (hashCode * 59) + this.MiniAppId.GetHashCode();
                }
                if (this.MiniCategoryIds != null)
                {
                    hashCode = (hashCode * 59) + this.MiniCategoryIds.GetHashCode();
                }
                if (this.Pid != null)
                {
                    hashCode = (hashCode * 59) + this.Pid.GetHashCode();
                }
                if (this.ServiceEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceEmail.GetHashCode();
                }
                if (this.ServicePhone != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePhone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
