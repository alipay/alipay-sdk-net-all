/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// Context
    /// </summary>
    [DataContract(Name = "Context")]
    public partial class Context : IEquatable<Context>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="actionName">底部链接描述文字，如“查看详情”，最多能传8个汉字或16个英文字符，长度超出会报错.</param>
        /// <param name="first">first.</param>
        /// <param name="headColor">顶部色条的色值.</param>
        /// <param name="keyword1">keyword1.</param>
        /// <param name="keyword2">keyword2.</param>
        /// <param name="remark">remark.</param>
        /// <param name="url">点击消息后承接页的地址.</param>
        public Context(string actionName = default(string), Keyword first = default(Keyword), string headColor = default(string), Keyword keyword1 = default(Keyword), Keyword keyword2 = default(Keyword), Keyword remark = default(Keyword), string url = default(string))
        {
            this.ActionName = actionName;
            this.First = first;
            this.HeadColor = headColor;
            this.Keyword1 = keyword1;
            this.Keyword2 = keyword2;
            this.Remark = remark;
            this.Url = url;
        }

        /// <summary>
        /// 底部链接描述文字，如“查看详情”，最多能传8个汉字或16个英文字符，长度超出会报错
        /// </summary>
        /// <value>底部链接描述文字，如“查看详情”，最多能传8个汉字或16个英文字符，长度超出会报错</value>
        [DataMember(Name = "action_name", EmitDefaultValue = false)]
        public string ActionName { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name = "first", EmitDefaultValue = false)]
        public Keyword First { get; set; }

        /// <summary>
        /// 顶部色条的色值
        /// </summary>
        /// <value>顶部色条的色值</value>
        [DataMember(Name = "head_color", EmitDefaultValue = false)]
        public string HeadColor { get; set; }

        /// <summary>
        /// Gets or Sets Keyword1
        /// </summary>
        [DataMember(Name = "keyword1", EmitDefaultValue = false)]
        public Keyword Keyword1 { get; set; }

        /// <summary>
        /// Gets or Sets Keyword2
        /// </summary>
        [DataMember(Name = "keyword2", EmitDefaultValue = false)]
        public Keyword Keyword2 { get; set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [DataMember(Name = "remark", EmitDefaultValue = false)]
        public Keyword Remark { get; set; }

        /// <summary>
        /// 点击消息后承接页的地址
        /// </summary>
        /// <value>点击消息后承接页的地址</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  HeadColor: ").Append(HeadColor).Append("\n");
            sb.Append("  Keyword1: ").Append(Keyword1).Append("\n");
            sb.Append("  Keyword2: ").Append(Keyword2).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Context);
        }

        /// <summary>
        /// Returns true if Context instances are equal
        /// </summary>
        /// <param name="input">Instance of Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionName == input.ActionName ||
                    (this.ActionName != null &&
                    this.ActionName.Equals(input.ActionName))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.HeadColor == input.HeadColor ||
                    (this.HeadColor != null &&
                    this.HeadColor.Equals(input.HeadColor))
                ) && 
                (
                    this.Keyword1 == input.Keyword1 ||
                    (this.Keyword1 != null &&
                    this.Keyword1.Equals(input.Keyword1))
                ) && 
                (
                    this.Keyword2 == input.Keyword2 ||
                    (this.Keyword2 != null &&
                    this.Keyword2.Equals(input.Keyword2))
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionName != null)
                {
                    hashCode = (hashCode * 59) + this.ActionName.GetHashCode();
                }
                if (this.First != null)
                {
                    hashCode = (hashCode * 59) + this.First.GetHashCode();
                }
                if (this.HeadColor != null)
                {
                    hashCode = (hashCode * 59) + this.HeadColor.GetHashCode();
                }
                if (this.Keyword1 != null)
                {
                    hashCode = (hashCode * 59) + this.Keyword1.GetHashCode();
                }
                if (this.Keyword2 != null)
                {
                    hashCode = (hashCode * 59) + this.Keyword2.GetHashCode();
                }
                if (this.Remark != null)
                {
                    hashCode = (hashCode * 59) + this.Remark.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
