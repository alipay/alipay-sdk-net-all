/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniWidgetGoodsModifyModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniWidgetGoodsModifyModel")]
    public partial class AlipayOpenMiniWidgetGoodsModifyModel : IEquatable<AlipayOpenMiniWidgetGoodsModifyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniWidgetGoodsModifyModel" /> class.
        /// </summary>
        /// <param name="buyingUrl">需要修改的商品小程序购买链接.</param>
        /// <param name="goodsBrand">需要修改的商品品牌.</param>
        /// <param name="goodsComment">需要修改的商品辅助说明文案.</param>
        /// <param name="goodsDescriptionLabel">需要修改的商品说明标签（如-随心退）.</param>
        /// <param name="goodsId">商品的唯一标识，根据该字段修改商品.</param>
        /// <param name="goodsLabel">需要修改的商品营销标签（如-限量特价），每个商品仅支持一个营销标签.</param>
        /// <param name="goodsName">需要修改的商品名称.</param>
        /// <param name="goodsType">需要修改的商品所属品类.</param>
        /// <param name="mainPicUrl">需要修改的商品主图片地址.</param>
        /// <param name="needPublicPromo">是否需要进行公域推广.</param>
        /// <param name="orderNumber">需要修改的商品排序，自然整数, 数字越小越靠前.</param>
        /// <param name="originalPrice">需要修改的商品原价，单位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;.</param>
        /// <param name="publishCities">需要修改的商品投放城市的列表，详见https://www.mca.gov.cn/article/sj/xzqh/2020/2020/202007170301.html，有多个用英文,分隔。如果没有限制则不传入.</param>
        /// <param name="sellPrice">需要修改的商品售价，位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;.</param>
        /// <param name="sellTagList">需要修改的商品卖点标签.</param>
        public AlipayOpenMiniWidgetGoodsModifyModel(string buyingUrl = default(string), string goodsBrand = default(string), string goodsComment = default(string), string goodsDescriptionLabel = default(string), string goodsId = default(string), string goodsLabel = default(string), string goodsName = default(string), string goodsType = default(string), string mainPicUrl = default(string), bool needPublicPromo = default(bool), int orderNumber = default(int), string originalPrice = default(string), string publishCities = default(string), string sellPrice = default(string), List<string> sellTagList = default(List<string>))
        {
            this.BuyingUrl = buyingUrl;
            this.GoodsBrand = goodsBrand;
            this.GoodsComment = goodsComment;
            this.GoodsDescriptionLabel = goodsDescriptionLabel;
            this.GoodsId = goodsId;
            this.GoodsLabel = goodsLabel;
            this.GoodsName = goodsName;
            this.GoodsType = goodsType;
            this.MainPicUrl = mainPicUrl;
            this.NeedPublicPromo = needPublicPromo;
            this.OrderNumber = orderNumber;
            this.OriginalPrice = originalPrice;
            this.PublishCities = publishCities;
            this.SellPrice = sellPrice;
            this.SellTagList = sellTagList;
        }

        /// <summary>
        /// 需要修改的商品小程序购买链接
        /// </summary>
        /// <value>需要修改的商品小程序购买链接</value>
        [DataMember(Name = "buying_url", EmitDefaultValue = false)]
        public string BuyingUrl { get; set; }

        /// <summary>
        /// 需要修改的商品品牌
        /// </summary>
        /// <value>需要修改的商品品牌</value>
        [DataMember(Name = "goods_brand", EmitDefaultValue = false)]
        public string GoodsBrand { get; set; }

        /// <summary>
        /// 需要修改的商品辅助说明文案
        /// </summary>
        /// <value>需要修改的商品辅助说明文案</value>
        [DataMember(Name = "goods_comment", EmitDefaultValue = false)]
        public string GoodsComment { get; set; }

        /// <summary>
        /// 需要修改的商品说明标签（如-随心退）
        /// </summary>
        /// <value>需要修改的商品说明标签（如-随心退）</value>
        [DataMember(Name = "goods_description_label", EmitDefaultValue = false)]
        public string GoodsDescriptionLabel { get; set; }

        /// <summary>
        /// 商品的唯一标识，根据该字段修改商品
        /// </summary>
        /// <value>商品的唯一标识，根据该字段修改商品</value>
        [DataMember(Name = "goods_id", EmitDefaultValue = false)]
        public string GoodsId { get; set; }

        /// <summary>
        /// 需要修改的商品营销标签（如-限量特价），每个商品仅支持一个营销标签
        /// </summary>
        /// <value>需要修改的商品营销标签（如-限量特价），每个商品仅支持一个营销标签</value>
        [DataMember(Name = "goods_label", EmitDefaultValue = false)]
        public string GoodsLabel { get; set; }

        /// <summary>
        /// 需要修改的商品名称
        /// </summary>
        /// <value>需要修改的商品名称</value>
        [DataMember(Name = "goods_name", EmitDefaultValue = false)]
        public string GoodsName { get; set; }

        /// <summary>
        /// 需要修改的商品所属品类
        /// </summary>
        /// <value>需要修改的商品所属品类</value>
        [DataMember(Name = "goods_type", EmitDefaultValue = false)]
        public string GoodsType { get; set; }

        /// <summary>
        /// 需要修改的商品主图片地址
        /// </summary>
        /// <value>需要修改的商品主图片地址</value>
        [DataMember(Name = "main_pic_url", EmitDefaultValue = false)]
        public string MainPicUrl { get; set; }

        /// <summary>
        /// 是否需要进行公域推广
        /// </summary>
        /// <value>是否需要进行公域推广</value>
        [DataMember(Name = "need_public_promo", EmitDefaultValue = true)]
        public bool NeedPublicPromo { get; set; }

        /// <summary>
        /// 需要修改的商品排序，自然整数, 数字越小越靠前
        /// </summary>
        /// <value>需要修改的商品排序，自然整数, 数字越小越靠前</value>
        [DataMember(Name = "order_number", EmitDefaultValue = false)]
        public int OrderNumber { get; set; }

        /// <summary>
        /// 需要修改的商品原价，单位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;
        /// </summary>
        /// <value>需要修改的商品原价，单位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;</value>
        [DataMember(Name = "original_price", EmitDefaultValue = false)]
        public string OriginalPrice { get; set; }

        /// <summary>
        /// 需要修改的商品投放城市的列表，详见https://www.mca.gov.cn/article/sj/xzqh/2020/2020/202007170301.html，有多个用英文,分隔。如果没有限制则不传入
        /// </summary>
        /// <value>需要修改的商品投放城市的列表，详见https://www.mca.gov.cn/article/sj/xzqh/2020/2020/202007170301.html，有多个用英文,分隔。如果没有限制则不传入</value>
        [DataMember(Name = "publish_cities", EmitDefaultValue = false)]
        public string PublishCities { get; set; }

        /// <summary>
        /// 需要修改的商品售价，位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;
        /// </summary>
        /// <value>需要修改的商品售价，位\&quot;元\&quot;，传入数字，不需要传入\&quot;元\&quot;</value>
        [DataMember(Name = "sell_price", EmitDefaultValue = false)]
        public string SellPrice { get; set; }

        /// <summary>
        /// 需要修改的商品卖点标签
        /// </summary>
        /// <value>需要修改的商品卖点标签</value>
        [DataMember(Name = "sell_tag_list", EmitDefaultValue = false)]
        public List<string> SellTagList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniWidgetGoodsModifyModel {\n");
            sb.Append("  BuyingUrl: ").Append(BuyingUrl).Append("\n");
            sb.Append("  GoodsBrand: ").Append(GoodsBrand).Append("\n");
            sb.Append("  GoodsComment: ").Append(GoodsComment).Append("\n");
            sb.Append("  GoodsDescriptionLabel: ").Append(GoodsDescriptionLabel).Append("\n");
            sb.Append("  GoodsId: ").Append(GoodsId).Append("\n");
            sb.Append("  GoodsLabel: ").Append(GoodsLabel).Append("\n");
            sb.Append("  GoodsName: ").Append(GoodsName).Append("\n");
            sb.Append("  GoodsType: ").Append(GoodsType).Append("\n");
            sb.Append("  MainPicUrl: ").Append(MainPicUrl).Append("\n");
            sb.Append("  NeedPublicPromo: ").Append(NeedPublicPromo).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  PublishCities: ").Append(PublishCities).Append("\n");
            sb.Append("  SellPrice: ").Append(SellPrice).Append("\n");
            sb.Append("  SellTagList: ").Append(SellTagList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniWidgetGoodsModifyModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniWidgetGoodsModifyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniWidgetGoodsModifyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniWidgetGoodsModifyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuyingUrl == input.BuyingUrl ||
                    (this.BuyingUrl != null &&
                    this.BuyingUrl.Equals(input.BuyingUrl))
                ) && 
                (
                    this.GoodsBrand == input.GoodsBrand ||
                    (this.GoodsBrand != null &&
                    this.GoodsBrand.Equals(input.GoodsBrand))
                ) && 
                (
                    this.GoodsComment == input.GoodsComment ||
                    (this.GoodsComment != null &&
                    this.GoodsComment.Equals(input.GoodsComment))
                ) && 
                (
                    this.GoodsDescriptionLabel == input.GoodsDescriptionLabel ||
                    (this.GoodsDescriptionLabel != null &&
                    this.GoodsDescriptionLabel.Equals(input.GoodsDescriptionLabel))
                ) && 
                (
                    this.GoodsId == input.GoodsId ||
                    (this.GoodsId != null &&
                    this.GoodsId.Equals(input.GoodsId))
                ) && 
                (
                    this.GoodsLabel == input.GoodsLabel ||
                    (this.GoodsLabel != null &&
                    this.GoodsLabel.Equals(input.GoodsLabel))
                ) && 
                (
                    this.GoodsName == input.GoodsName ||
                    (this.GoodsName != null &&
                    this.GoodsName.Equals(input.GoodsName))
                ) && 
                (
                    this.GoodsType == input.GoodsType ||
                    (this.GoodsType != null &&
                    this.GoodsType.Equals(input.GoodsType))
                ) && 
                (
                    this.MainPicUrl == input.MainPicUrl ||
                    (this.MainPicUrl != null &&
                    this.MainPicUrl.Equals(input.MainPicUrl))
                ) && 
                (
                    this.NeedPublicPromo == input.NeedPublicPromo ||
                    this.NeedPublicPromo.Equals(input.NeedPublicPromo)
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.OriginalPrice == input.OriginalPrice ||
                    (this.OriginalPrice != null &&
                    this.OriginalPrice.Equals(input.OriginalPrice))
                ) && 
                (
                    this.PublishCities == input.PublishCities ||
                    (this.PublishCities != null &&
                    this.PublishCities.Equals(input.PublishCities))
                ) && 
                (
                    this.SellPrice == input.SellPrice ||
                    (this.SellPrice != null &&
                    this.SellPrice.Equals(input.SellPrice))
                ) && 
                (
                    this.SellTagList == input.SellTagList ||
                    this.SellTagList != null &&
                    input.SellTagList != null &&
                    this.SellTagList.SequenceEqual(input.SellTagList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyingUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BuyingUrl.GetHashCode();
                }
                if (this.GoodsBrand != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsBrand.GetHashCode();
                }
                if (this.GoodsComment != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsComment.GetHashCode();
                }
                if (this.GoodsDescriptionLabel != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsDescriptionLabel.GetHashCode();
                }
                if (this.GoodsId != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsId.GetHashCode();
                }
                if (this.GoodsLabel != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsLabel.GetHashCode();
                }
                if (this.GoodsName != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsName.GetHashCode();
                }
                if (this.GoodsType != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsType.GetHashCode();
                }
                if (this.MainPicUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MainPicUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NeedPublicPromo.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                if (this.OriginalPrice != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPrice.GetHashCode();
                }
                if (this.PublishCities != null)
                {
                    hashCode = (hashCode * 59) + this.PublishCities.GetHashCode();
                }
                if (this.SellPrice != null)
                {
                    hashCode = (hashCode * 59) + this.SellPrice.GetHashCode();
                }
                if (this.SellTagList != null)
                {
                    hashCode = (hashCode * 59) + this.SellTagList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
