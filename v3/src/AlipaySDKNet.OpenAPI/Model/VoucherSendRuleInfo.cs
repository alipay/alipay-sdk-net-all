/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// VoucherSendRuleInfo
    /// </summary>
    [DataContract(Name = "VoucherSendRuleInfo")]
    public partial class VoucherSendRuleInfo : IEquatable<VoucherSendRuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherSendRuleInfo" /> class.
        /// </summary>
        /// <param name="maxQuantityByDay">设置此字段，允许指定单天最大发券数量。.</param>
        /// <param name="naturalPersonLimit">是否开启自然人领取限制。 自然人表示按照身份证纬度进行领取限制。.</param>
        /// <param name="phoneNumberLimit">是否开启电话号码领取限制。.</param>
        /// <param name="phoneNumberNeedInputLimit">下单时是否需要用户填写手机号码.</param>
        /// <param name="publishEndTime">券发放结束时间。 格式为：yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="publishStartTime">券发放开始时间。 格式为：yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="quantity">发行券的数量。.</param>
        /// <param name="quantityLimitPerUser">每人领取限制。 默认按照支付宝账号进行领取限制; 不填写或填入0表示没有领取限制..</param>
        /// <param name="quantityLimitPerUserPeriodType">周期限领配置,限制每人在固定周期内领取张数(voucher_quantity_limit_per_user),默认LIFE_CYCLE.</param>
        /// <param name="realNameLimit">限制支付宝实名用户才能领取支付券,默认为false表示不限制 枚举值 true\\false.</param>
        public VoucherSendRuleInfo(int maxQuantityByDay = default(int), bool naturalPersonLimit = default(bool), bool phoneNumberLimit = default(bool), bool phoneNumberNeedInputLimit = default(bool), string publishEndTime = default(string), string publishStartTime = default(string), int quantity = default(int), int quantityLimitPerUser = default(int), string quantityLimitPerUserPeriodType = default(string), bool realNameLimit = default(bool))
        {
            this.MaxQuantityByDay = maxQuantityByDay;
            this.NaturalPersonLimit = naturalPersonLimit;
            this.PhoneNumberLimit = phoneNumberLimit;
            this.PhoneNumberNeedInputLimit = phoneNumberNeedInputLimit;
            this.PublishEndTime = publishEndTime;
            this.PublishStartTime = publishStartTime;
            this.Quantity = quantity;
            this.QuantityLimitPerUser = quantityLimitPerUser;
            this.QuantityLimitPerUserPeriodType = quantityLimitPerUserPeriodType;
            this.RealNameLimit = realNameLimit;
        }

        /// <summary>
        /// 设置此字段，允许指定单天最大发券数量。
        /// </summary>
        /// <value>设置此字段，允许指定单天最大发券数量。</value>
        [DataMember(Name = "max_quantity_by_day", EmitDefaultValue = false)]
        public int MaxQuantityByDay { get; set; }

        /// <summary>
        /// 是否开启自然人领取限制。 自然人表示按照身份证纬度进行领取限制。
        /// </summary>
        /// <value>是否开启自然人领取限制。 自然人表示按照身份证纬度进行领取限制。</value>
        [DataMember(Name = "natural_person_limit", EmitDefaultValue = true)]
        public bool NaturalPersonLimit { get; set; }

        /// <summary>
        /// 是否开启电话号码领取限制。
        /// </summary>
        /// <value>是否开启电话号码领取限制。</value>
        [DataMember(Name = "phone_number_limit", EmitDefaultValue = true)]
        public bool PhoneNumberLimit { get; set; }

        /// <summary>
        /// 下单时是否需要用户填写手机号码
        /// </summary>
        /// <value>下单时是否需要用户填写手机号码</value>
        [DataMember(Name = "phone_number_need_input_limit", EmitDefaultValue = true)]
        public bool PhoneNumberNeedInputLimit { get; set; }

        /// <summary>
        /// 券发放结束时间。 格式为：yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>券发放结束时间。 格式为：yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "publish_end_time", EmitDefaultValue = false)]
        public string PublishEndTime { get; set; }

        /// <summary>
        /// 券发放开始时间。 格式为：yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>券发放开始时间。 格式为：yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "publish_start_time", EmitDefaultValue = false)]
        public string PublishStartTime { get; set; }

        /// <summary>
        /// 发行券的数量。
        /// </summary>
        /// <value>发行券的数量。</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// 每人领取限制。 默认按照支付宝账号进行领取限制; 不填写或填入0表示没有领取限制.
        /// </summary>
        /// <value>每人领取限制。 默认按照支付宝账号进行领取限制; 不填写或填入0表示没有领取限制.</value>
        [DataMember(Name = "quantity_limit_per_user", EmitDefaultValue = false)]
        public int QuantityLimitPerUser { get; set; }

        /// <summary>
        /// 周期限领配置,限制每人在固定周期内领取张数(voucher_quantity_limit_per_user),默认LIFE_CYCLE
        /// </summary>
        /// <value>周期限领配置,限制每人在固定周期内领取张数(voucher_quantity_limit_per_user),默认LIFE_CYCLE</value>
        [DataMember(Name = "quantity_limit_per_user_period_type", EmitDefaultValue = false)]
        public string QuantityLimitPerUserPeriodType { get; set; }

        /// <summary>
        /// 限制支付宝实名用户才能领取支付券,默认为false表示不限制 枚举值 true\\false
        /// </summary>
        /// <value>限制支付宝实名用户才能领取支付券,默认为false表示不限制 枚举值 true\\false</value>
        [DataMember(Name = "real_name_limit", EmitDefaultValue = true)]
        public bool RealNameLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherSendRuleInfo {\n");
            sb.Append("  MaxQuantityByDay: ").Append(MaxQuantityByDay).Append("\n");
            sb.Append("  NaturalPersonLimit: ").Append(NaturalPersonLimit).Append("\n");
            sb.Append("  PhoneNumberLimit: ").Append(PhoneNumberLimit).Append("\n");
            sb.Append("  PhoneNumberNeedInputLimit: ").Append(PhoneNumberNeedInputLimit).Append("\n");
            sb.Append("  PublishEndTime: ").Append(PublishEndTime).Append("\n");
            sb.Append("  PublishStartTime: ").Append(PublishStartTime).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityLimitPerUser: ").Append(QuantityLimitPerUser).Append("\n");
            sb.Append("  QuantityLimitPerUserPeriodType: ").Append(QuantityLimitPerUserPeriodType).Append("\n");
            sb.Append("  RealNameLimit: ").Append(RealNameLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoucherSendRuleInfo);
        }

        /// <summary>
        /// Returns true if VoucherSendRuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VoucherSendRuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoucherSendRuleInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxQuantityByDay == input.MaxQuantityByDay ||
                    this.MaxQuantityByDay.Equals(input.MaxQuantityByDay)
                ) && 
                (
                    this.NaturalPersonLimit == input.NaturalPersonLimit ||
                    this.NaturalPersonLimit.Equals(input.NaturalPersonLimit)
                ) && 
                (
                    this.PhoneNumberLimit == input.PhoneNumberLimit ||
                    this.PhoneNumberLimit.Equals(input.PhoneNumberLimit)
                ) && 
                (
                    this.PhoneNumberNeedInputLimit == input.PhoneNumberNeedInputLimit ||
                    this.PhoneNumberNeedInputLimit.Equals(input.PhoneNumberNeedInputLimit)
                ) && 
                (
                    this.PublishEndTime == input.PublishEndTime ||
                    (this.PublishEndTime != null &&
                    this.PublishEndTime.Equals(input.PublishEndTime))
                ) && 
                (
                    this.PublishStartTime == input.PublishStartTime ||
                    (this.PublishStartTime != null &&
                    this.PublishStartTime.Equals(input.PublishStartTime))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.QuantityLimitPerUser == input.QuantityLimitPerUser ||
                    this.QuantityLimitPerUser.Equals(input.QuantityLimitPerUser)
                ) && 
                (
                    this.QuantityLimitPerUserPeriodType == input.QuantityLimitPerUserPeriodType ||
                    (this.QuantityLimitPerUserPeriodType != null &&
                    this.QuantityLimitPerUserPeriodType.Equals(input.QuantityLimitPerUserPeriodType))
                ) && 
                (
                    this.RealNameLimit == input.RealNameLimit ||
                    this.RealNameLimit.Equals(input.RealNameLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxQuantityByDay.GetHashCode();
                hashCode = (hashCode * 59) + this.NaturalPersonLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.PhoneNumberLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.PhoneNumberNeedInputLimit.GetHashCode();
                if (this.PublishEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishEndTime.GetHashCode();
                }
                if (this.PublishStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishStartTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityLimitPerUser.GetHashCode();
                if (this.QuantityLimitPerUserPeriodType != null)
                {
                    hashCode = (hashCode * 59) + this.QuantityLimitPerUserPeriodType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RealNameLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
