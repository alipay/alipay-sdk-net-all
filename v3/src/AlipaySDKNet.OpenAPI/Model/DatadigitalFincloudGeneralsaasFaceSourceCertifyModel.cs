/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// DatadigitalFincloudGeneralsaasFaceSourceCertifyModel
    /// </summary>
    [DataContract(Name = "DatadigitalFincloudGeneralsaasFaceSourceCertifyModel")]
    public partial class DatadigitalFincloudGeneralsaasFaceSourceCertifyModel : IEquatable<DatadigitalFincloudGeneralsaasFaceSourceCertifyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatadigitalFincloudGeneralsaasFaceSourceCertifyModel" /> class.
        /// </summary>
        /// <param name="certName">用户姓名，与身份证上的姓名相匹配.</param>
        /// <param name="certNo">证件号码，如大陆身份证号码.</param>
        /// <param name="certType">证件信息类型，大陆身份证：IDENTITY_CARD.</param>
        /// <param name="livenessStrategy">活体检测类型，当前枚举支持： OFF：关闭活体检测； CHECK：正常活体检测。 不传默认CHECK。.</param>
        /// <param name="nation">国家地区代码，当证件类型为外国人永久居留证时必填。.</param>
        /// <param name="outerBizNo">客户业务单据号.</param>
        /// <param name="phone">手机号，特殊场景下，在验证过程中需用户输入手机来接受系统发送的安全验证短信。默认不传即可。.</param>
        /// <param name="reserved">true：需要留底；false：无需留底。默认留底.</param>
        /// <param name="securityStrategy">ON：开启安全拦截。OFF：关闭安全拦截。默认取值为ON。.</param>
        public DatadigitalFincloudGeneralsaasFaceSourceCertifyModel(string certName = default(string), string certNo = default(string), string certType = default(string), string livenessStrategy = default(string), string nation = default(string), string outerBizNo = default(string), string phone = default(string), bool reserved = default(bool), string securityStrategy = default(string))
        {
            this.CertName = certName;
            this.CertNo = certNo;
            this.CertType = certType;
            this.LivenessStrategy = livenessStrategy;
            this.Nation = nation;
            this.OuterBizNo = outerBizNo;
            this.Phone = phone;
            this.Reserved = reserved;
            this.SecurityStrategy = securityStrategy;
        }

        /// <summary>
        /// 用户姓名，与身份证上的姓名相匹配
        /// </summary>
        /// <value>用户姓名，与身份证上的姓名相匹配</value>
        [DataMember(Name = "cert_name", EmitDefaultValue = false)]
        public string CertName { get; set; }

        /// <summary>
        /// 证件号码，如大陆身份证号码
        /// </summary>
        /// <value>证件号码，如大陆身份证号码</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 证件信息类型，大陆身份证：IDENTITY_CARD
        /// </summary>
        /// <value>证件信息类型，大陆身份证：IDENTITY_CARD</value>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public string CertType { get; set; }

        /// <summary>
        /// 活体检测类型，当前枚举支持： OFF：关闭活体检测； CHECK：正常活体检测。 不传默认CHECK。
        /// </summary>
        /// <value>活体检测类型，当前枚举支持： OFF：关闭活体检测； CHECK：正常活体检测。 不传默认CHECK。</value>
        [DataMember(Name = "liveness_strategy", EmitDefaultValue = false)]
        public string LivenessStrategy { get; set; }

        /// <summary>
        /// 国家地区代码，当证件类型为外国人永久居留证时必填。
        /// </summary>
        /// <value>国家地区代码，当证件类型为外国人永久居留证时必填。</value>
        [DataMember(Name = "nation", EmitDefaultValue = false)]
        public string Nation { get; set; }

        /// <summary>
        /// 客户业务单据号
        /// </summary>
        /// <value>客户业务单据号</value>
        [DataMember(Name = "outer_biz_no", EmitDefaultValue = false)]
        public string OuterBizNo { get; set; }

        /// <summary>
        /// 手机号，特殊场景下，在验证过程中需用户输入手机来接受系统发送的安全验证短信。默认不传即可。
        /// </summary>
        /// <value>手机号，特殊场景下，在验证过程中需用户输入手机来接受系统发送的安全验证短信。默认不传即可。</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// true：需要留底；false：无需留底。默认留底
        /// </summary>
        /// <value>true：需要留底；false：无需留底。默认留底</value>
        [DataMember(Name = "reserved", EmitDefaultValue = true)]
        public bool Reserved { get; set; }

        /// <summary>
        /// ON：开启安全拦截。OFF：关闭安全拦截。默认取值为ON。
        /// </summary>
        /// <value>ON：开启安全拦截。OFF：关闭安全拦截。默认取值为ON。</value>
        [DataMember(Name = "security_strategy", EmitDefaultValue = false)]
        public string SecurityStrategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatadigitalFincloudGeneralsaasFaceSourceCertifyModel {\n");
            sb.Append("  CertName: ").Append(CertName).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  LivenessStrategy: ").Append(LivenessStrategy).Append("\n");
            sb.Append("  Nation: ").Append(Nation).Append("\n");
            sb.Append("  OuterBizNo: ").Append(OuterBizNo).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  SecurityStrategy: ").Append(SecurityStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatadigitalFincloudGeneralsaasFaceSourceCertifyModel);
        }

        /// <summary>
        /// Returns true if DatadigitalFincloudGeneralsaasFaceSourceCertifyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DatadigitalFincloudGeneralsaasFaceSourceCertifyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatadigitalFincloudGeneralsaasFaceSourceCertifyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertName == input.CertName ||
                    (this.CertName != null &&
                    this.CertName.Equals(input.CertName))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                ) && 
                (
                    this.LivenessStrategy == input.LivenessStrategy ||
                    (this.LivenessStrategy != null &&
                    this.LivenessStrategy.Equals(input.LivenessStrategy))
                ) && 
                (
                    this.Nation == input.Nation ||
                    (this.Nation != null &&
                    this.Nation.Equals(input.Nation))
                ) && 
                (
                    this.OuterBizNo == input.OuterBizNo ||
                    (this.OuterBizNo != null &&
                    this.OuterBizNo.Equals(input.OuterBizNo))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    this.Reserved.Equals(input.Reserved)
                ) && 
                (
                    this.SecurityStrategy == input.SecurityStrategy ||
                    (this.SecurityStrategy != null &&
                    this.SecurityStrategy.Equals(input.SecurityStrategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertName != null)
                {
                    hashCode = (hashCode * 59) + this.CertName.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.CertType != null)
                {
                    hashCode = (hashCode * 59) + this.CertType.GetHashCode();
                }
                if (this.LivenessStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.LivenessStrategy.GetHashCode();
                }
                if (this.Nation != null)
                {
                    hashCode = (hashCode * 59) + this.Nation.GetHashCode();
                }
                if (this.OuterBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OuterBizNo.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reserved.GetHashCode();
                if (this.SecurityStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityStrategy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
