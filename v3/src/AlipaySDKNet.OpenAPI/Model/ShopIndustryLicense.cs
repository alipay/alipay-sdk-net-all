/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ShopIndustryLicense
    /// </summary>
    [DataContract(Name = "ShopIndustryLicense")]
    public partial class ShopIndustryLicense : IEquatable<ShopIndustryLicense>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShopIndustryLicense" /> class.
        /// </summary>
        /// <param name="licensePic">资质图片信息.</param>
        /// <param name="licenseType">行业资质类型，需使用&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/iGfGQL0ATkEAAAAAAAAAAAAADiWmAQBr?af_fileName&#x3D;%E8%B5%84%E8%B4%A8%E7%B1%BB%E5%9E%8B.xlsx\&quot;&gt;资质列表&lt;/a&gt;中类型.</param>
        public ShopIndustryLicense(string licensePic = default(string), string licenseType = default(string))
        {
            this.LicensePic = licensePic;
            this.LicenseType = licenseType;
        }

        /// <summary>
        /// 资质图片信息
        /// </summary>
        /// <value>资质图片信息</value>
        [DataMember(Name = "license_pic", EmitDefaultValue = false)]
        public string LicensePic { get; set; }

        /// <summary>
        /// 行业资质类型，需使用&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/iGfGQL0ATkEAAAAAAAAAAAAADiWmAQBr?af_fileName&#x3D;%E8%B5%84%E8%B4%A8%E7%B1%BB%E5%9E%8B.xlsx\&quot;&gt;资质列表&lt;/a&gt;中类型
        /// </summary>
        /// <value>行业资质类型，需使用&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/iGfGQL0ATkEAAAAAAAAAAAAADiWmAQBr?af_fileName&#x3D;%E8%B5%84%E8%B4%A8%E7%B1%BB%E5%9E%8B.xlsx\&quot;&gt;资质列表&lt;/a&gt;中类型</value>
        [DataMember(Name = "license_type", EmitDefaultValue = false)]
        public string LicenseType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShopIndustryLicense {\n");
            sb.Append("  LicensePic: ").Append(LicensePic).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShopIndustryLicense);
        }

        /// <summary>
        /// Returns true if ShopIndustryLicense instances are equal
        /// </summary>
        /// <param name="input">Instance of ShopIndustryLicense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShopIndustryLicense input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LicensePic == input.LicensePic ||
                    (this.LicensePic != null &&
                    this.LicensePic.Equals(input.LicensePic))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicensePic != null)
                {
                    hashCode = (hashCode * 59) + this.LicensePic.GetHashCode();
                }
                if (this.LicenseType != null)
                {
                    hashCode = (hashCode * 59) + this.LicenseType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
