/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenPublicInfoQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenPublicInfoQueryResponseModel")]
    public partial class AlipayOpenPublicInfoQueryResponseModel : IEquatable<AlipayOpenPublicInfoQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenPublicInfoQueryResponseModel" /> class.
        /// </summary>
        /// <param name="appName">生活号名称.</param>
        /// <param name="auditDesc">最新审核状态描述，如果审核驳回则有相关的驳回理由.</param>
        /// <param name="auditStatus">最新审核状态，对于系统商而言，只有四个状态，AUDITING：审核中，AUDIT_FAILED：审核驳回，AUDIT_SUCCESS：审核通过，AUDIT_NORMAL：无审核状态（当前没有处于审核过程的工单）.</param>
        /// <param name="auditStatusList">审核状态表，目前支持名称、头像、名称与头像、简介审核状态.</param>
        /// <param name="backgroundUrl">背景图片地址.</param>
        /// <param name="introduction">生活号简介.</param>
        /// <param name="isOnline">生活号是否上线，T表示上线，F表示未上线.</param>
        /// <param name="isRelease">生活号是否上架，T表示上架，上架即可在支付宝客户端被搜索到，F表示未上架.</param>
        /// <param name="logoUrl">生活号头像地址.</param>
        /// <param name="mccCodeDesc">商家经营类目，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/open/01n22g\&quot;&gt;商家经营类目&lt;/a&gt;.</param>
        /// <param name="publicGreeting">欢迎语.</param>
        public AlipayOpenPublicInfoQueryResponseModel(string appName = default(string), string auditDesc = default(string), string auditStatus = default(string), List<PublicAuditStatus> auditStatusList = default(List<PublicAuditStatus>), string backgroundUrl = default(string), string introduction = default(string), string isOnline = default(string), string isRelease = default(string), string logoUrl = default(string), string mccCodeDesc = default(string), string publicGreeting = default(string))
        {
            this.AppName = appName;
            this.AuditDesc = auditDesc;
            this.AuditStatus = auditStatus;
            this.AuditStatusList = auditStatusList;
            this.BackgroundUrl = backgroundUrl;
            this.Introduction = introduction;
            this.IsOnline = isOnline;
            this.IsRelease = isRelease;
            this.LogoUrl = logoUrl;
            this.MccCodeDesc = mccCodeDesc;
            this.PublicGreeting = publicGreeting;
        }

        /// <summary>
        /// 生活号名称
        /// </summary>
        /// <value>生活号名称</value>
        [DataMember(Name = "app_name", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// 最新审核状态描述，如果审核驳回则有相关的驳回理由
        /// </summary>
        /// <value>最新审核状态描述，如果审核驳回则有相关的驳回理由</value>
        [DataMember(Name = "audit_desc", EmitDefaultValue = false)]
        public string AuditDesc { get; set; }

        /// <summary>
        /// 最新审核状态，对于系统商而言，只有四个状态，AUDITING：审核中，AUDIT_FAILED：审核驳回，AUDIT_SUCCESS：审核通过，AUDIT_NORMAL：无审核状态（当前没有处于审核过程的工单）
        /// </summary>
        /// <value>最新审核状态，对于系统商而言，只有四个状态，AUDITING：审核中，AUDIT_FAILED：审核驳回，AUDIT_SUCCESS：审核通过，AUDIT_NORMAL：无审核状态（当前没有处于审核过程的工单）</value>
        [DataMember(Name = "audit_status", EmitDefaultValue = false)]
        public string AuditStatus { get; set; }

        /// <summary>
        /// 审核状态表，目前支持名称、头像、名称与头像、简介审核状态
        /// </summary>
        /// <value>审核状态表，目前支持名称、头像、名称与头像、简介审核状态</value>
        [DataMember(Name = "audit_status_list", EmitDefaultValue = false)]
        public List<PublicAuditStatus> AuditStatusList { get; set; }

        /// <summary>
        /// 背景图片地址
        /// </summary>
        /// <value>背景图片地址</value>
        [DataMember(Name = "background_url", EmitDefaultValue = false)]
        public string BackgroundUrl { get; set; }

        /// <summary>
        /// 生活号简介
        /// </summary>
        /// <value>生活号简介</value>
        [DataMember(Name = "introduction", EmitDefaultValue = false)]
        public string Introduction { get; set; }

        /// <summary>
        /// 生活号是否上线，T表示上线，F表示未上线
        /// </summary>
        /// <value>生活号是否上线，T表示上线，F表示未上线</value>
        [DataMember(Name = "is_online", EmitDefaultValue = false)]
        public string IsOnline { get; set; }

        /// <summary>
        /// 生活号是否上架，T表示上架，上架即可在支付宝客户端被搜索到，F表示未上架
        /// </summary>
        /// <value>生活号是否上架，T表示上架，上架即可在支付宝客户端被搜索到，F表示未上架</value>
        [DataMember(Name = "is_release", EmitDefaultValue = false)]
        public string IsRelease { get; set; }

        /// <summary>
        /// 生活号头像地址
        /// </summary>
        /// <value>生活号头像地址</value>
        [DataMember(Name = "logo_url", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// 商家经营类目，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/open/01n22g\&quot;&gt;商家经营类目&lt;/a&gt;
        /// </summary>
        /// <value>商家经营类目，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/open/01n22g\&quot;&gt;商家经营类目&lt;/a&gt;</value>
        [DataMember(Name = "mcc_code_desc", EmitDefaultValue = false)]
        public string MccCodeDesc { get; set; }

        /// <summary>
        /// 欢迎语
        /// </summary>
        /// <value>欢迎语</value>
        [DataMember(Name = "public_greeting", EmitDefaultValue = false)]
        public string PublicGreeting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenPublicInfoQueryResponseModel {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AuditDesc: ").Append(AuditDesc).Append("\n");
            sb.Append("  AuditStatus: ").Append(AuditStatus).Append("\n");
            sb.Append("  AuditStatusList: ").Append(AuditStatusList).Append("\n");
            sb.Append("  BackgroundUrl: ").Append(BackgroundUrl).Append("\n");
            sb.Append("  Introduction: ").Append(Introduction).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  IsRelease: ").Append(IsRelease).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  MccCodeDesc: ").Append(MccCodeDesc).Append("\n");
            sb.Append("  PublicGreeting: ").Append(PublicGreeting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenPublicInfoQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenPublicInfoQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenPublicInfoQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenPublicInfoQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AuditDesc == input.AuditDesc ||
                    (this.AuditDesc != null &&
                    this.AuditDesc.Equals(input.AuditDesc))
                ) && 
                (
                    this.AuditStatus == input.AuditStatus ||
                    (this.AuditStatus != null &&
                    this.AuditStatus.Equals(input.AuditStatus))
                ) && 
                (
                    this.AuditStatusList == input.AuditStatusList ||
                    this.AuditStatusList != null &&
                    input.AuditStatusList != null &&
                    this.AuditStatusList.SequenceEqual(input.AuditStatusList)
                ) && 
                (
                    this.BackgroundUrl == input.BackgroundUrl ||
                    (this.BackgroundUrl != null &&
                    this.BackgroundUrl.Equals(input.BackgroundUrl))
                ) && 
                (
                    this.Introduction == input.Introduction ||
                    (this.Introduction != null &&
                    this.Introduction.Equals(input.Introduction))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    (this.IsOnline != null &&
                    this.IsOnline.Equals(input.IsOnline))
                ) && 
                (
                    this.IsRelease == input.IsRelease ||
                    (this.IsRelease != null &&
                    this.IsRelease.Equals(input.IsRelease))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.MccCodeDesc == input.MccCodeDesc ||
                    (this.MccCodeDesc != null &&
                    this.MccCodeDesc.Equals(input.MccCodeDesc))
                ) && 
                (
                    this.PublicGreeting == input.PublicGreeting ||
                    (this.PublicGreeting != null &&
                    this.PublicGreeting.Equals(input.PublicGreeting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.AuditDesc != null)
                {
                    hashCode = (hashCode * 59) + this.AuditDesc.GetHashCode();
                }
                if (this.AuditStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AuditStatus.GetHashCode();
                }
                if (this.AuditStatusList != null)
                {
                    hashCode = (hashCode * 59) + this.AuditStatusList.GetHashCode();
                }
                if (this.BackgroundUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundUrl.GetHashCode();
                }
                if (this.Introduction != null)
                {
                    hashCode = (hashCode * 59) + this.Introduction.GetHashCode();
                }
                if (this.IsOnline != null)
                {
                    hashCode = (hashCode * 59) + this.IsOnline.GetHashCode();
                }
                if (this.IsRelease != null)
                {
                    hashCode = (hashCode * 59) + this.IsRelease.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.MccCodeDesc != null)
                {
                    hashCode = (hashCode * 59) + this.MccCodeDesc.GetHashCode();
                }
                if (this.PublicGreeting != null)
                {
                    hashCode = (hashCode * 59) + this.PublicGreeting.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
