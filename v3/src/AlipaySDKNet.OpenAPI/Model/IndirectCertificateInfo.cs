/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// IndirectCertificateInfo
    /// </summary>
    [DataContract(Name = "IndirectCertificateInfo")]
    public partial class IndirectCertificateInfo : IEquatable<IndirectCertificateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndirectCertificateInfo" /> class.
        /// </summary>
        /// <param name="certImage">证照图片（使用图片上传接口）.</param>
        /// <param name="certNo">证件编号.</param>
        /// <param name="certType">登记证书类型时必填，枚举：统一社会信用代码证书（UNIT_SOCIAL_CREDIT）、慈善组织公开募捐资格证书（CHARITY_ORG_SOLICIT），社会团体法人登记证书（SOCIAL_ORG_LEGAL），民办非企业单位登记证书（CIVIL_UN_ENT），基金会法人登记证书（FOUNDATION_LEGAL_PERSON），农民专业合作社法人营业执照（FARMERS_COOPERATE），宗教活动场所登记证（RELIGION_PLACES），其他证书/批文/证明（OTHER_REG_CERT）.</param>
        /// <param name="effectTime">证照生效时间.</param>
        /// <param name="expireTime">证照过期时间，yyyy-mm-dd格式，如果是长期有效时传“forever”.</param>
        /// <param name="legalPersonName">证照法人姓名.</param>
        /// <param name="merchantName">证照商户名称.</param>
        /// <param name="registerAddress">证照注册地址.</param>
        public IndirectCertificateInfo(string certImage = default(string), string certNo = default(string), string certType = default(string), string effectTime = default(string), string expireTime = default(string), string legalPersonName = default(string), string merchantName = default(string), string registerAddress = default(string))
        {
            this.CertImage = certImage;
            this.CertNo = certNo;
            this.CertType = certType;
            this.EffectTime = effectTime;
            this.ExpireTime = expireTime;
            this.LegalPersonName = legalPersonName;
            this.MerchantName = merchantName;
            this.RegisterAddress = registerAddress;
        }

        /// <summary>
        /// 证照图片（使用图片上传接口）
        /// </summary>
        /// <value>证照图片（使用图片上传接口）</value>
        [DataMember(Name = "cert_image", EmitDefaultValue = false)]
        public string CertImage { get; set; }

        /// <summary>
        /// 证件编号
        /// </summary>
        /// <value>证件编号</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 登记证书类型时必填，枚举：统一社会信用代码证书（UNIT_SOCIAL_CREDIT）、慈善组织公开募捐资格证书（CHARITY_ORG_SOLICIT），社会团体法人登记证书（SOCIAL_ORG_LEGAL），民办非企业单位登记证书（CIVIL_UN_ENT），基金会法人登记证书（FOUNDATION_LEGAL_PERSON），农民专业合作社法人营业执照（FARMERS_COOPERATE），宗教活动场所登记证（RELIGION_PLACES），其他证书/批文/证明（OTHER_REG_CERT）
        /// </summary>
        /// <value>登记证书类型时必填，枚举：统一社会信用代码证书（UNIT_SOCIAL_CREDIT）、慈善组织公开募捐资格证书（CHARITY_ORG_SOLICIT），社会团体法人登记证书（SOCIAL_ORG_LEGAL），民办非企业单位登记证书（CIVIL_UN_ENT），基金会法人登记证书（FOUNDATION_LEGAL_PERSON），农民专业合作社法人营业执照（FARMERS_COOPERATE），宗教活动场所登记证（RELIGION_PLACES），其他证书/批文/证明（OTHER_REG_CERT）</value>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public string CertType { get; set; }

        /// <summary>
        /// 证照生效时间
        /// </summary>
        /// <value>证照生效时间</value>
        [DataMember(Name = "effect_time", EmitDefaultValue = false)]
        public string EffectTime { get; set; }

        /// <summary>
        /// 证照过期时间，yyyy-mm-dd格式，如果是长期有效时传“forever”
        /// </summary>
        /// <value>证照过期时间，yyyy-mm-dd格式，如果是长期有效时传“forever”</value>
        [DataMember(Name = "expire_time", EmitDefaultValue = false)]
        public string ExpireTime { get; set; }

        /// <summary>
        /// 证照法人姓名
        /// </summary>
        /// <value>证照法人姓名</value>
        [DataMember(Name = "legal_person_name", EmitDefaultValue = false)]
        public string LegalPersonName { get; set; }

        /// <summary>
        /// 证照商户名称
        /// </summary>
        /// <value>证照商户名称</value>
        [DataMember(Name = "merchant_name", EmitDefaultValue = false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// 证照注册地址
        /// </summary>
        /// <value>证照注册地址</value>
        [DataMember(Name = "register_address", EmitDefaultValue = false)]
        public string RegisterAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndirectCertificateInfo {\n");
            sb.Append("  CertImage: ").Append(CertImage).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  EffectTime: ").Append(EffectTime).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  LegalPersonName: ").Append(LegalPersonName).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  RegisterAddress: ").Append(RegisterAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndirectCertificateInfo);
        }

        /// <summary>
        /// Returns true if IndirectCertificateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IndirectCertificateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndirectCertificateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertImage == input.CertImage ||
                    (this.CertImage != null &&
                    this.CertImage.Equals(input.CertImage))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                ) && 
                (
                    this.EffectTime == input.EffectTime ||
                    (this.EffectTime != null &&
                    this.EffectTime.Equals(input.EffectTime))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    (this.ExpireTime != null &&
                    this.ExpireTime.Equals(input.ExpireTime))
                ) && 
                (
                    this.LegalPersonName == input.LegalPersonName ||
                    (this.LegalPersonName != null &&
                    this.LegalPersonName.Equals(input.LegalPersonName))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.RegisterAddress == input.RegisterAddress ||
                    (this.RegisterAddress != null &&
                    this.RegisterAddress.Equals(input.RegisterAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertImage != null)
                {
                    hashCode = (hashCode * 59) + this.CertImage.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.CertType != null)
                {
                    hashCode = (hashCode * 59) + this.CertType.GetHashCode();
                }
                if (this.EffectTime != null)
                {
                    hashCode = (hashCode * 59) + this.EffectTime.GetHashCode();
                }
                if (this.ExpireTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpireTime.GetHashCode();
                }
                if (this.LegalPersonName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalPersonName.GetHashCode();
                }
                if (this.MerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantName.GetHashCode();
                }
                if (this.RegisterAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RegisterAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
