/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAuthTokenAppQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAuthTokenAppQueryResponseModel")]
    public partial class AlipayOpenAuthTokenAppQueryResponseModel : IEquatable<AlipayOpenAuthTokenAppQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAuthTokenAppQueryResponseModel" /> class.
        /// </summary>
        /// <param name="authAppId">授权商户的appid.</param>
        /// <param name="authEnd">授权失效时间.</param>
        /// <param name="authMethods">当前app_auth_token的授权接口列表.</param>
        /// <param name="authStart">授权生效时间.</param>
        /// <param name="expiresIn">应用授权令牌失效时间，单位到秒.</param>
        /// <param name="isByAppAuth">当商家选择全权委托授权时值为true，未选择时为false。.</param>
        /// <param name="status">valid：有效状态；invalid：无效状态.</param>
        /// <param name="userId">授权商户的user_id.</param>
        public AlipayOpenAuthTokenAppQueryResponseModel(string authAppId = default(string), string authEnd = default(string), List<string> authMethods = default(List<string>), string authStart = default(string), int expiresIn = default(int), bool isByAppAuth = default(bool), string status = default(string), string userId = default(string))
        {
            this.AuthAppId = authAppId;
            this.AuthEnd = authEnd;
            this.AuthMethods = authMethods;
            this.AuthStart = authStart;
            this.ExpiresIn = expiresIn;
            this.IsByAppAuth = isByAppAuth;
            this.Status = status;
            this.UserId = userId;
        }

        /// <summary>
        /// 授权商户的appid
        /// </summary>
        /// <value>授权商户的appid</value>
        [DataMember(Name = "auth_app_id", EmitDefaultValue = false)]
        public string AuthAppId { get; set; }

        /// <summary>
        /// 授权失效时间
        /// </summary>
        /// <value>授权失效时间</value>
        [DataMember(Name = "auth_end", EmitDefaultValue = false)]
        public string AuthEnd { get; set; }

        /// <summary>
        /// 当前app_auth_token的授权接口列表
        /// </summary>
        /// <value>当前app_auth_token的授权接口列表</value>
        [DataMember(Name = "auth_methods", EmitDefaultValue = false)]
        public List<string> AuthMethods { get; set; }

        /// <summary>
        /// 授权生效时间
        /// </summary>
        /// <value>授权生效时间</value>
        [DataMember(Name = "auth_start", EmitDefaultValue = false)]
        public string AuthStart { get; set; }

        /// <summary>
        /// 应用授权令牌失效时间，单位到秒
        /// </summary>
        /// <value>应用授权令牌失效时间，单位到秒</value>
        [DataMember(Name = "expires_in", EmitDefaultValue = false)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// 当商家选择全权委托授权时值为true，未选择时为false。
        /// </summary>
        /// <value>当商家选择全权委托授权时值为true，未选择时为false。</value>
        [DataMember(Name = "is_by_app_auth", EmitDefaultValue = true)]
        public bool IsByAppAuth { get; set; }

        /// <summary>
        /// valid：有效状态；invalid：无效状态
        /// </summary>
        /// <value>valid：有效状态；invalid：无效状态</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 授权商户的user_id
        /// </summary>
        /// <value>授权商户的user_id</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAuthTokenAppQueryResponseModel {\n");
            sb.Append("  AuthAppId: ").Append(AuthAppId).Append("\n");
            sb.Append("  AuthEnd: ").Append(AuthEnd).Append("\n");
            sb.Append("  AuthMethods: ").Append(AuthMethods).Append("\n");
            sb.Append("  AuthStart: ").Append(AuthStart).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  IsByAppAuth: ").Append(IsByAppAuth).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAuthTokenAppQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAuthTokenAppQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAuthTokenAppQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAuthTokenAppQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthAppId == input.AuthAppId ||
                    (this.AuthAppId != null &&
                    this.AuthAppId.Equals(input.AuthAppId))
                ) && 
                (
                    this.AuthEnd == input.AuthEnd ||
                    (this.AuthEnd != null &&
                    this.AuthEnd.Equals(input.AuthEnd))
                ) && 
                (
                    this.AuthMethods == input.AuthMethods ||
                    this.AuthMethods != null &&
                    input.AuthMethods != null &&
                    this.AuthMethods.SequenceEqual(input.AuthMethods)
                ) && 
                (
                    this.AuthStart == input.AuthStart ||
                    (this.AuthStart != null &&
                    this.AuthStart.Equals(input.AuthStart))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    this.ExpiresIn.Equals(input.ExpiresIn)
                ) && 
                (
                    this.IsByAppAuth == input.IsByAppAuth ||
                    this.IsByAppAuth.Equals(input.IsByAppAuth)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthAppId != null)
                {
                    hashCode = (hashCode * 59) + this.AuthAppId.GetHashCode();
                }
                if (this.AuthEnd != null)
                {
                    hashCode = (hashCode * 59) + this.AuthEnd.GetHashCode();
                }
                if (this.AuthMethods != null)
                {
                    hashCode = (hashCode * 59) + this.AuthMethods.GetHashCode();
                }
                if (this.AuthStart != null)
                {
                    hashCode = (hashCode * 59) + this.AuthStart.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiresIn.GetHashCode();
                hashCode = (hashCode * 59) + this.IsByAppAuth.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
