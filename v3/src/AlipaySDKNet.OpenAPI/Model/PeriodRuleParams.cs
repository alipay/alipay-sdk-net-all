/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PeriodRuleParams
    /// </summary>
    [DataContract(Name = "PeriodRuleParams")]
    public partial class PeriodRuleParams : IEquatable<PeriodRuleParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodRuleParams" /> class.
        /// </summary>
        /// <param name="executeTime">首次执行时间execute_time是周期扣款产品必填，即商户发起首次扣款的时间。精确到日，格式为yyyy-MM-dd 结合其他必填的扣款周期参数，会确定商户以后的扣款计划。发起扣款的时间需符合这里的扣款计划。.</param>
        /// <param name="period">周期数period是周期扣款产品必填。与另一参数period_type组合使用确定扣款周期，例如period_type为DAY，period&#x3D;90，则扣款周期为90天。.</param>
        /// <param name="periodType">周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH。 DAY即扣款周期按天计，MONTH代表扣款周期按自然月。 与另一参数period组合使用确定扣款周期，例如period_type为DAY，period&#x3D;30，则扣款周期为30天；period_type为MONTH，period&#x3D;3，则扣款周期为3个自然月。 自然月是指，不论这个月有多少天，周期都计算到月份中的同一日期。例如1月3日到2月3日为一个自然月，1月3日到4月3日为三个自然月。注意周期类型使用MONTH的时候，计划扣款时间execute_time不允许传28日之后的日期（可以传28日），以此避免有些月份可能不存在对应日期的情况。.</param>
        /// <param name="sceneRuleParams">sceneRuleParams.</param>
        /// <param name="singleAmount">单次扣款最大金额single_amount是周期扣款产品必填，即每次发起扣款时限制的最大金额，单位为元。商户每次发起扣款都不允许大于此金额。.</param>
        /// <param name="totalAmount">总金额限制，单位为元。如果传入此参数，商户多次扣款的累计金额不允许超过此金额。.</param>
        /// <param name="totalPayments">总扣款次数。如果传入此参数，则商户成功扣款的次数不能超过此次数限制（扣款失败不计入）。.</param>
        public PeriodRuleParams(string executeTime = default(string), int period = default(int), string periodType = default(string), SceneRuleParams sceneRuleParams = default(SceneRuleParams), string singleAmount = default(string), string totalAmount = default(string), int totalPayments = default(int))
        {
            this.ExecuteTime = executeTime;
            this.Period = period;
            this.PeriodType = periodType;
            this.SceneRuleParams = sceneRuleParams;
            this.SingleAmount = singleAmount;
            this.TotalAmount = totalAmount;
            this.TotalPayments = totalPayments;
        }

        /// <summary>
        /// 首次执行时间execute_time是周期扣款产品必填，即商户发起首次扣款的时间。精确到日，格式为yyyy-MM-dd 结合其他必填的扣款周期参数，会确定商户以后的扣款计划。发起扣款的时间需符合这里的扣款计划。
        /// </summary>
        /// <value>首次执行时间execute_time是周期扣款产品必填，即商户发起首次扣款的时间。精确到日，格式为yyyy-MM-dd 结合其他必填的扣款周期参数，会确定商户以后的扣款计划。发起扣款的时间需符合这里的扣款计划。</value>
        [DataMember(Name = "execute_time", EmitDefaultValue = false)]
        public string ExecuteTime { get; set; }

        /// <summary>
        /// 周期数period是周期扣款产品必填。与另一参数period_type组合使用确定扣款周期，例如period_type为DAY，period&#x3D;90，则扣款周期为90天。
        /// </summary>
        /// <value>周期数period是周期扣款产品必填。与另一参数period_type组合使用确定扣款周期，例如period_type为DAY，period&#x3D;90，则扣款周期为90天。</value>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public int Period { get; set; }

        /// <summary>
        /// 周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH。 DAY即扣款周期按天计，MONTH代表扣款周期按自然月。 与另一参数period组合使用确定扣款周期，例如period_type为DAY，period&#x3D;30，则扣款周期为30天；period_type为MONTH，period&#x3D;3，则扣款周期为3个自然月。 自然月是指，不论这个月有多少天，周期都计算到月份中的同一日期。例如1月3日到2月3日为一个自然月，1月3日到4月3日为三个自然月。注意周期类型使用MONTH的时候，计划扣款时间execute_time不允许传28日之后的日期（可以传28日），以此避免有些月份可能不存在对应日期的情况。
        /// </summary>
        /// <value>周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH。 DAY即扣款周期按天计，MONTH代表扣款周期按自然月。 与另一参数period组合使用确定扣款周期，例如period_type为DAY，period&#x3D;30，则扣款周期为30天；period_type为MONTH，period&#x3D;3，则扣款周期为3个自然月。 自然月是指，不论这个月有多少天，周期都计算到月份中的同一日期。例如1月3日到2月3日为一个自然月，1月3日到4月3日为三个自然月。注意周期类型使用MONTH的时候，计划扣款时间execute_time不允许传28日之后的日期（可以传28日），以此避免有些月份可能不存在对应日期的情况。</value>
        [DataMember(Name = "period_type", EmitDefaultValue = false)]
        public string PeriodType { get; set; }

        /// <summary>
        /// Gets or Sets SceneRuleParams
        /// </summary>
        [DataMember(Name = "scene_rule_params", EmitDefaultValue = false)]
        public SceneRuleParams SceneRuleParams { get; set; }

        /// <summary>
        /// 单次扣款最大金额single_amount是周期扣款产品必填，即每次发起扣款时限制的最大金额，单位为元。商户每次发起扣款都不允许大于此金额。
        /// </summary>
        /// <value>单次扣款最大金额single_amount是周期扣款产品必填，即每次发起扣款时限制的最大金额，单位为元。商户每次发起扣款都不允许大于此金额。</value>
        [DataMember(Name = "single_amount", EmitDefaultValue = false)]
        public string SingleAmount { get; set; }

        /// <summary>
        /// 总金额限制，单位为元。如果传入此参数，商户多次扣款的累计金额不允许超过此金额。
        /// </summary>
        /// <value>总金额限制，单位为元。如果传入此参数，商户多次扣款的累计金额不允许超过此金额。</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 总扣款次数。如果传入此参数，则商户成功扣款的次数不能超过此次数限制（扣款失败不计入）。
        /// </summary>
        /// <value>总扣款次数。如果传入此参数，则商户成功扣款的次数不能超过此次数限制（扣款失败不计入）。</value>
        [DataMember(Name = "total_payments", EmitDefaultValue = false)]
        public int TotalPayments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodRuleParams {\n");
            sb.Append("  ExecuteTime: ").Append(ExecuteTime).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  SceneRuleParams: ").Append(SceneRuleParams).Append("\n");
            sb.Append("  SingleAmount: ").Append(SingleAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalPayments: ").Append(TotalPayments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodRuleParams);
        }

        /// <summary>
        /// Returns true if PeriodRuleParams instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodRuleParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodRuleParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExecuteTime == input.ExecuteTime ||
                    (this.ExecuteTime != null &&
                    this.ExecuteTime.Equals(input.ExecuteTime))
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && 
                (
                    this.SceneRuleParams == input.SceneRuleParams ||
                    (this.SceneRuleParams != null &&
                    this.SceneRuleParams.Equals(input.SceneRuleParams))
                ) && 
                (
                    this.SingleAmount == input.SingleAmount ||
                    (this.SingleAmount != null &&
                    this.SingleAmount.Equals(input.SingleAmount))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TotalPayments == input.TotalPayments ||
                    this.TotalPayments.Equals(input.TotalPayments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecuteTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExecuteTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                if (this.PeriodType != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodType.GetHashCode();
                }
                if (this.SceneRuleParams != null)
                {
                    hashCode = (hashCode * 59) + this.SceneRuleParams.GetHashCode();
                }
                if (this.SingleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SingleAmount.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPayments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
