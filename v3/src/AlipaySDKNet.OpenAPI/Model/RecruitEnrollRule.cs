/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// RecruitEnrollRule
    /// </summary>
    [DataContract(Name = "RecruitEnrollRule")]
    public partial class RecruitEnrollRule : IEquatable<RecruitEnrollRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitEnrollRule" /> class.
        /// </summary>
        /// <param name="maxSize">最大数量.</param>
        /// <param name="minSize">最小数量.</param>
        /// <param name="required">是否必填.</param>
        /// <param name="ruleData">ruleData.</param>
        /// <param name="type">招商报名时提交的内容类型: 券:VOUCHER; 小程序:MINI_APP; 报名商户:ENROLL_MERCHANT; 素材:MATERIAL; 活动城市:CITY;.</param>
        public RecruitEnrollRule(int maxSize = default(int), int minSize = default(int), bool required = default(bool), RecruitEnrollRuleData ruleData = default(RecruitEnrollRuleData), string type = default(string))
        {
            this.MaxSize = maxSize;
            this.MinSize = minSize;
            this.Required = required;
            this.RuleData = ruleData;
            this.Type = type;
        }

        /// <summary>
        /// 最大数量
        /// </summary>
        /// <value>最大数量</value>
        [DataMember(Name = "max_size", EmitDefaultValue = false)]
        public int MaxSize { get; set; }

        /// <summary>
        /// 最小数量
        /// </summary>
        /// <value>最小数量</value>
        [DataMember(Name = "min_size", EmitDefaultValue = false)]
        public int MinSize { get; set; }

        /// <summary>
        /// 是否必填
        /// </summary>
        /// <value>是否必填</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets RuleData
        /// </summary>
        [DataMember(Name = "rule_data", EmitDefaultValue = false)]
        public RecruitEnrollRuleData RuleData { get; set; }

        /// <summary>
        /// 招商报名时提交的内容类型: 券:VOUCHER; 小程序:MINI_APP; 报名商户:ENROLL_MERCHANT; 素材:MATERIAL; 活动城市:CITY;
        /// </summary>
        /// <value>招商报名时提交的内容类型: 券:VOUCHER; 小程序:MINI_APP; 报名商户:ENROLL_MERCHANT; 素材:MATERIAL; 活动城市:CITY;</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecruitEnrollRule {\n");
            sb.Append("  MaxSize: ").Append(MaxSize).Append("\n");
            sb.Append("  MinSize: ").Append(MinSize).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RuleData: ").Append(RuleData).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecruitEnrollRule);
        }

        /// <summary>
        /// Returns true if RecruitEnrollRule instances are equal
        /// </summary>
        /// <param name="input">Instance of RecruitEnrollRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecruitEnrollRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxSize == input.MaxSize ||
                    this.MaxSize.Equals(input.MaxSize)
                ) && 
                (
                    this.MinSize == input.MinSize ||
                    this.MinSize.Equals(input.MinSize)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.RuleData == input.RuleData ||
                    (this.RuleData != null &&
                    this.RuleData.Equals(input.RuleData))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxSize.GetHashCode();
                hashCode = (hashCode * 59) + this.MinSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.RuleData != null)
                {
                    hashCode = (hashCode * 59) + this.RuleData.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
