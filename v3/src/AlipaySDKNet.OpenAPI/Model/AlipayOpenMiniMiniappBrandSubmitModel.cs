/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniMiniappBrandSubmitModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniMiniappBrandSubmitModel")]
    public partial class AlipayOpenMiniMiniappBrandSubmitModel : IEquatable<AlipayOpenMiniMiniappBrandSubmitModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniMiniappBrandSubmitModel" /> class.
        /// </summary>
        /// <param name="applyType">申请的资质类型 SELF_BRAND_APPLY 自有品牌申请(当需要一个新的品牌时选择此项) AUTHORIZE_BRAND_APPLY 授权品牌申请(当需要授权一个已有的品牌给商户时选择此项) EXIST_BRAND_BIND 品牌绑定，适用于品牌已申请成功的情况(当需要将已有品牌绑定到无品牌小程序时选择此项).</param>
        /// <param name="authorizeInfo">authorizeInfo.</param>
        /// <param name="brandId">商户已有品牌Id(只有申请的资质类型为EXIST_BRAND_BIND 时需要填写).</param>
        /// <param name="brandName">品牌名称.</param>
        /// <param name="brandRegistrationInfo">brandRegistrationInfo.</param>
        /// <param name="idMaterials">申请人身份证明材料(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片，可以上传多个身份证明材料).</param>
        public AlipayOpenMiniMiniappBrandSubmitModel(string applyType = default(string), AuthorizeInfo authorizeInfo = default(AuthorizeInfo), string brandId = default(string), string brandName = default(string), BrandRegistrationInfo brandRegistrationInfo = default(BrandRegistrationInfo), List<string> idMaterials = default(List<string>))
        {
            this.ApplyType = applyType;
            this.AuthorizeInfo = authorizeInfo;
            this.BrandId = brandId;
            this.BrandName = brandName;
            this.BrandRegistrationInfo = brandRegistrationInfo;
            this.IdMaterials = idMaterials;
        }

        /// <summary>
        /// 申请的资质类型 SELF_BRAND_APPLY 自有品牌申请(当需要一个新的品牌时选择此项) AUTHORIZE_BRAND_APPLY 授权品牌申请(当需要授权一个已有的品牌给商户时选择此项) EXIST_BRAND_BIND 品牌绑定，适用于品牌已申请成功的情况(当需要将已有品牌绑定到无品牌小程序时选择此项)
        /// </summary>
        /// <value>申请的资质类型 SELF_BRAND_APPLY 自有品牌申请(当需要一个新的品牌时选择此项) AUTHORIZE_BRAND_APPLY 授权品牌申请(当需要授权一个已有的品牌给商户时选择此项) EXIST_BRAND_BIND 品牌绑定，适用于品牌已申请成功的情况(当需要将已有品牌绑定到无品牌小程序时选择此项)</value>
        [DataMember(Name = "apply_type", EmitDefaultValue = false)]
        public string ApplyType { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizeInfo
        /// </summary>
        [DataMember(Name = "authorize_info", EmitDefaultValue = false)]
        public AuthorizeInfo AuthorizeInfo { get; set; }

        /// <summary>
        /// 商户已有品牌Id(只有申请的资质类型为EXIST_BRAND_BIND 时需要填写)
        /// </summary>
        /// <value>商户已有品牌Id(只有申请的资质类型为EXIST_BRAND_BIND 时需要填写)</value>
        [DataMember(Name = "brand_id", EmitDefaultValue = false)]
        public string BrandId { get; set; }

        /// <summary>
        /// 品牌名称
        /// </summary>
        /// <value>品牌名称</value>
        [DataMember(Name = "brand_name", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets BrandRegistrationInfo
        /// </summary>
        [DataMember(Name = "brand_registration_info", EmitDefaultValue = false)]
        public BrandRegistrationInfo BrandRegistrationInfo { get; set; }

        /// <summary>
        /// 申请人身份证明材料(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片，可以上传多个身份证明材料)
        /// </summary>
        /// <value>申请人身份证明材料(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片，可以上传多个身份证明材料)</value>
        [DataMember(Name = "id_materials", EmitDefaultValue = false)]
        public List<string> IdMaterials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniMiniappBrandSubmitModel {\n");
            sb.Append("  ApplyType: ").Append(ApplyType).Append("\n");
            sb.Append("  AuthorizeInfo: ").Append(AuthorizeInfo).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  BrandRegistrationInfo: ").Append(BrandRegistrationInfo).Append("\n");
            sb.Append("  IdMaterials: ").Append(IdMaterials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniMiniappBrandSubmitModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniMiniappBrandSubmitModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniMiniappBrandSubmitModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniMiniappBrandSubmitModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplyType == input.ApplyType ||
                    (this.ApplyType != null &&
                    this.ApplyType.Equals(input.ApplyType))
                ) && 
                (
                    this.AuthorizeInfo == input.AuthorizeInfo ||
                    (this.AuthorizeInfo != null &&
                    this.AuthorizeInfo.Equals(input.AuthorizeInfo))
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.BrandRegistrationInfo == input.BrandRegistrationInfo ||
                    (this.BrandRegistrationInfo != null &&
                    this.BrandRegistrationInfo.Equals(input.BrandRegistrationInfo))
                ) && 
                (
                    this.IdMaterials == input.IdMaterials ||
                    this.IdMaterials != null &&
                    input.IdMaterials != null &&
                    this.IdMaterials.SequenceEqual(input.IdMaterials)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplyType != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyType.GetHashCode();
                }
                if (this.AuthorizeInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizeInfo.GetHashCode();
                }
                if (this.BrandId != null)
                {
                    hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                }
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.BrandRegistrationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BrandRegistrationInfo.GetHashCode();
                }
                if (this.IdMaterials != null)
                {
                    hashCode = (hashCode * 59) + this.IdMaterials.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
