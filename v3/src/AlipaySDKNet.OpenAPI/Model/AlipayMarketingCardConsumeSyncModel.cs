/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayMarketingCardConsumeSyncModel
    /// </summary>
    [DataContract(Name = "AlipayMarketingCardConsumeSyncModel")]
    public partial class AlipayMarketingCardConsumeSyncModel : IEquatable<AlipayMarketingCardConsumeSyncModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayMarketingCardConsumeSyncModel" /> class.
        /// </summary>
        /// <param name="actPayAmount">用户实际付的现金金额  1.针对预付卡面额的核销金额在use_benefit_list展现，作为权益金额  2.权益金额不叠加在该金额上.</param>
        /// <param name="cardInfo">cardInfo.</param>
        /// <param name="gainBenefitList">获取权益列表.</param>
        /// <param name="memo">备注信息，现有直接填写门店信息.</param>
        /// <param name="shopCode">门店编号.</param>
        /// <param name="swipeCertType">产生该笔交易时，用户出具的凭证类型。枚举支持： *ALIPAY：支付宝电子卡； *ENTITY：实体卡； *OTHER：其他。.</param>
        /// <param name="targetCardNo">支付宝业务卡号，即通过&lt;a  href&#x3D;\&quot;https://opendocs.alipay.com/apis/009zw3\&quot;&gt;alipay.marketing.card.open&lt;/a&gt;(会员卡开卡)接口开卡后获取的  card_info.biz_card_no 值。.</param>
        /// <param name="targetCardNoType">卡号ID类型。支持： *BIZ_CARD：支付宝业务卡号（商户会员卡场景使用）。.</param>
        /// <param name="tradeAmount">交易金额：本次交易的实际总金额（可认为标价金额）.</param>
        /// <param name="tradeName">交易名称。为空时支付宝将根据交易类型提供默认名称。.</param>
        /// <param name="tradeNo">支付宝交易号.</param>
        /// <param name="tradeTime">线下交易时间，为用户付款的交易时间。 说明：当交易时间晚于上次消费记录同步时间时，将变更会员卡信息。.</param>
        /// <param name="tradeType">交易类型。枚举支持： *开卡：OPEN； *消费：TRADE； *充值：DEPOSIT； *退卡：RETURN。.</param>
        /// <param name="useBenefitList">实际消耗的权益.</param>
        public AlipayMarketingCardConsumeSyncModel(string actPayAmount = default(string), MerchantCard cardInfo = default(MerchantCard), List<BenefitInfoDetail> gainBenefitList = default(List<BenefitInfoDetail>), string memo = default(string), string shopCode = default(string), string swipeCertType = default(string), string targetCardNo = default(string), string targetCardNoType = default(string), string tradeAmount = default(string), string tradeName = default(string), string tradeNo = default(string), string tradeTime = default(string), string tradeType = default(string), List<BenefitInfoDetail> useBenefitList = default(List<BenefitInfoDetail>))
        {
            this.ActPayAmount = actPayAmount;
            this.CardInfo = cardInfo;
            this.GainBenefitList = gainBenefitList;
            this.Memo = memo;
            this.ShopCode = shopCode;
            this.SwipeCertType = swipeCertType;
            this.TargetCardNo = targetCardNo;
            this.TargetCardNoType = targetCardNoType;
            this.TradeAmount = tradeAmount;
            this.TradeName = tradeName;
            this.TradeNo = tradeNo;
            this.TradeTime = tradeTime;
            this.TradeType = tradeType;
            this.UseBenefitList = useBenefitList;
        }

        /// <summary>
        /// 用户实际付的现金金额  1.针对预付卡面额的核销金额在use_benefit_list展现，作为权益金额  2.权益金额不叠加在该金额上
        /// </summary>
        /// <value>用户实际付的现金金额  1.针对预付卡面额的核销金额在use_benefit_list展现，作为权益金额  2.权益金额不叠加在该金额上</value>
        [DataMember(Name = "act_pay_amount", EmitDefaultValue = false)]
        public string ActPayAmount { get; set; }

        /// <summary>
        /// Gets or Sets CardInfo
        /// </summary>
        [DataMember(Name = "card_info", EmitDefaultValue = false)]
        public MerchantCard CardInfo { get; set; }

        /// <summary>
        /// 获取权益列表
        /// </summary>
        /// <value>获取权益列表</value>
        [DataMember(Name = "gain_benefit_list", EmitDefaultValue = false)]
        public List<BenefitInfoDetail> GainBenefitList { get; set; }

        /// <summary>
        /// 备注信息，现有直接填写门店信息
        /// </summary>
        /// <value>备注信息，现有直接填写门店信息</value>
        [DataMember(Name = "memo", EmitDefaultValue = false)]
        public string Memo { get; set; }

        /// <summary>
        /// 门店编号
        /// </summary>
        /// <value>门店编号</value>
        [DataMember(Name = "shop_code", EmitDefaultValue = false)]
        public string ShopCode { get; set; }

        /// <summary>
        /// 产生该笔交易时，用户出具的凭证类型。枚举支持： *ALIPAY：支付宝电子卡； *ENTITY：实体卡； *OTHER：其他。
        /// </summary>
        /// <value>产生该笔交易时，用户出具的凭证类型。枚举支持： *ALIPAY：支付宝电子卡； *ENTITY：实体卡； *OTHER：其他。</value>
        [DataMember(Name = "swipe_cert_type", EmitDefaultValue = false)]
        public string SwipeCertType { get; set; }

        /// <summary>
        /// 支付宝业务卡号，即通过&lt;a  href&#x3D;\&quot;https://opendocs.alipay.com/apis/009zw3\&quot;&gt;alipay.marketing.card.open&lt;/a&gt;(会员卡开卡)接口开卡后获取的  card_info.biz_card_no 值。
        /// </summary>
        /// <value>支付宝业务卡号，即通过&lt;a  href&#x3D;\&quot;https://opendocs.alipay.com/apis/009zw3\&quot;&gt;alipay.marketing.card.open&lt;/a&gt;(会员卡开卡)接口开卡后获取的  card_info.biz_card_no 值。</value>
        [DataMember(Name = "target_card_no", EmitDefaultValue = false)]
        public string TargetCardNo { get; set; }

        /// <summary>
        /// 卡号ID类型。支持： *BIZ_CARD：支付宝业务卡号（商户会员卡场景使用）。
        /// </summary>
        /// <value>卡号ID类型。支持： *BIZ_CARD：支付宝业务卡号（商户会员卡场景使用）。</value>
        [DataMember(Name = "target_card_no_type", EmitDefaultValue = false)]
        public string TargetCardNoType { get; set; }

        /// <summary>
        /// 交易金额：本次交易的实际总金额（可认为标价金额）
        /// </summary>
        /// <value>交易金额：本次交易的实际总金额（可认为标价金额）</value>
        [DataMember(Name = "trade_amount", EmitDefaultValue = false)]
        public string TradeAmount { get; set; }

        /// <summary>
        /// 交易名称。为空时支付宝将根据交易类型提供默认名称。
        /// </summary>
        /// <value>交易名称。为空时支付宝将根据交易类型提供默认名称。</value>
        [DataMember(Name = "trade_name", EmitDefaultValue = false)]
        public string TradeName { get; set; }

        /// <summary>
        /// 支付宝交易号
        /// </summary>
        /// <value>支付宝交易号</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// 线下交易时间，为用户付款的交易时间。 说明：当交易时间晚于上次消费记录同步时间时，将变更会员卡信息。
        /// </summary>
        /// <value>线下交易时间，为用户付款的交易时间。 说明：当交易时间晚于上次消费记录同步时间时，将变更会员卡信息。</value>
        [DataMember(Name = "trade_time", EmitDefaultValue = false)]
        public string TradeTime { get; set; }

        /// <summary>
        /// 交易类型。枚举支持： *开卡：OPEN； *消费：TRADE； *充值：DEPOSIT； *退卡：RETURN。
        /// </summary>
        /// <value>交易类型。枚举支持： *开卡：OPEN； *消费：TRADE； *充值：DEPOSIT； *退卡：RETURN。</value>
        [DataMember(Name = "trade_type", EmitDefaultValue = false)]
        public string TradeType { get; set; }

        /// <summary>
        /// 实际消耗的权益
        /// </summary>
        /// <value>实际消耗的权益</value>
        [DataMember(Name = "use_benefit_list", EmitDefaultValue = false)]
        public List<BenefitInfoDetail> UseBenefitList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayMarketingCardConsumeSyncModel {\n");
            sb.Append("  ActPayAmount: ").Append(ActPayAmount).Append("\n");
            sb.Append("  CardInfo: ").Append(CardInfo).Append("\n");
            sb.Append("  GainBenefitList: ").Append(GainBenefitList).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  ShopCode: ").Append(ShopCode).Append("\n");
            sb.Append("  SwipeCertType: ").Append(SwipeCertType).Append("\n");
            sb.Append("  TargetCardNo: ").Append(TargetCardNo).Append("\n");
            sb.Append("  TargetCardNoType: ").Append(TargetCardNoType).Append("\n");
            sb.Append("  TradeAmount: ").Append(TradeAmount).Append("\n");
            sb.Append("  TradeName: ").Append(TradeName).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  TradeTime: ").Append(TradeTime).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  UseBenefitList: ").Append(UseBenefitList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayMarketingCardConsumeSyncModel);
        }

        /// <summary>
        /// Returns true if AlipayMarketingCardConsumeSyncModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayMarketingCardConsumeSyncModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayMarketingCardConsumeSyncModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActPayAmount == input.ActPayAmount ||
                    (this.ActPayAmount != null &&
                    this.ActPayAmount.Equals(input.ActPayAmount))
                ) && 
                (
                    this.CardInfo == input.CardInfo ||
                    (this.CardInfo != null &&
                    this.CardInfo.Equals(input.CardInfo))
                ) && 
                (
                    this.GainBenefitList == input.GainBenefitList ||
                    this.GainBenefitList != null &&
                    input.GainBenefitList != null &&
                    this.GainBenefitList.SequenceEqual(input.GainBenefitList)
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.ShopCode == input.ShopCode ||
                    (this.ShopCode != null &&
                    this.ShopCode.Equals(input.ShopCode))
                ) && 
                (
                    this.SwipeCertType == input.SwipeCertType ||
                    (this.SwipeCertType != null &&
                    this.SwipeCertType.Equals(input.SwipeCertType))
                ) && 
                (
                    this.TargetCardNo == input.TargetCardNo ||
                    (this.TargetCardNo != null &&
                    this.TargetCardNo.Equals(input.TargetCardNo))
                ) && 
                (
                    this.TargetCardNoType == input.TargetCardNoType ||
                    (this.TargetCardNoType != null &&
                    this.TargetCardNoType.Equals(input.TargetCardNoType))
                ) && 
                (
                    this.TradeAmount == input.TradeAmount ||
                    (this.TradeAmount != null &&
                    this.TradeAmount.Equals(input.TradeAmount))
                ) && 
                (
                    this.TradeName == input.TradeName ||
                    (this.TradeName != null &&
                    this.TradeName.Equals(input.TradeName))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                ) && 
                (
                    this.TradeTime == input.TradeTime ||
                    (this.TradeTime != null &&
                    this.TradeTime.Equals(input.TradeTime))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                ) && 
                (
                    this.UseBenefitList == input.UseBenefitList ||
                    this.UseBenefitList != null &&
                    input.UseBenefitList != null &&
                    this.UseBenefitList.SequenceEqual(input.UseBenefitList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ActPayAmount.GetHashCode();
                }
                if (this.CardInfo != null)
                {
                    hashCode = (hashCode * 59) + this.CardInfo.GetHashCode();
                }
                if (this.GainBenefitList != null)
                {
                    hashCode = (hashCode * 59) + this.GainBenefitList.GetHashCode();
                }
                if (this.Memo != null)
                {
                    hashCode = (hashCode * 59) + this.Memo.GetHashCode();
                }
                if (this.ShopCode != null)
                {
                    hashCode = (hashCode * 59) + this.ShopCode.GetHashCode();
                }
                if (this.SwipeCertType != null)
                {
                    hashCode = (hashCode * 59) + this.SwipeCertType.GetHashCode();
                }
                if (this.TargetCardNo != null)
                {
                    hashCode = (hashCode * 59) + this.TargetCardNo.GetHashCode();
                }
                if (this.TargetCardNoType != null)
                {
                    hashCode = (hashCode * 59) + this.TargetCardNoType.GetHashCode();
                }
                if (this.TradeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TradeAmount.GetHashCode();
                }
                if (this.TradeName != null)
                {
                    hashCode = (hashCode * 59) + this.TradeName.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                if (this.TradeTime != null)
                {
                    hashCode = (hashCode * 59) + this.TradeTime.GetHashCode();
                }
                if (this.TradeType != null)
                {
                    hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                }
                if (this.UseBenefitList != null)
                {
                    hashCode = (hashCode * 59) + this.UseBenefitList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
