/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniQrcodeBindModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniQrcodeBindModel")]
    public partial class AlipayOpenMiniQrcodeBindModel : IEquatable<AlipayOpenMiniQrcodeBindModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniQrcodeBindModel" /> class.
        /// </summary>
        /// <param name="mode">匹配规则，仅支持EXACT（精确匹配）、FUZZY（模糊匹配）两个值。  精确匹配：根据填写的二维码地址精确匹配，地址完全一致时才能唤起小程序（如：配置二维码地址为https://www.alipay.com/my?id&#x3D;123，当用户扫这个地址的二维码可唤起小程序）。  模糊匹配：根据填写的二维码地址模糊匹配，只要地址前缀匹配即可唤起小程序（如：配置二维码地址为https://www.alipay.com/my/，当用户扫的二维码地址为https://www.alipay.com/my/id&#x3D;123,可唤起小程序）。.</param>
        /// <param name="pageRedirection">小程序功能页，配置扫描二维码后打开的小程序功能页面路径.</param>
        /// <param name="routePattern">模式，用于描述通用的路由url格式，适用于同一个host下面存在大量路由的场景，主要用于提升路由性能，其中{0}、{1} 代表路径中的变量.</param>
        /// <param name="routeUrl">二维码域名，须通过ICP备案验证，支持http、https、ftp开头的链接.</param>
        public AlipayOpenMiniQrcodeBindModel(string mode = default(string), string pageRedirection = default(string), string routePattern = default(string), string routeUrl = default(string))
        {
            this.Mode = mode;
            this.PageRedirection = pageRedirection;
            this.RoutePattern = routePattern;
            this.RouteUrl = routeUrl;
        }

        /// <summary>
        /// 匹配规则，仅支持EXACT（精确匹配）、FUZZY（模糊匹配）两个值。  精确匹配：根据填写的二维码地址精确匹配，地址完全一致时才能唤起小程序（如：配置二维码地址为https://www.alipay.com/my?id&#x3D;123，当用户扫这个地址的二维码可唤起小程序）。  模糊匹配：根据填写的二维码地址模糊匹配，只要地址前缀匹配即可唤起小程序（如：配置二维码地址为https://www.alipay.com/my/，当用户扫的二维码地址为https://www.alipay.com/my/id&#x3D;123,可唤起小程序）。
        /// </summary>
        /// <value>匹配规则，仅支持EXACT（精确匹配）、FUZZY（模糊匹配）两个值。  精确匹配：根据填写的二维码地址精确匹配，地址完全一致时才能唤起小程序（如：配置二维码地址为https://www.alipay.com/my?id&#x3D;123，当用户扫这个地址的二维码可唤起小程序）。  模糊匹配：根据填写的二维码地址模糊匹配，只要地址前缀匹配即可唤起小程序（如：配置二维码地址为https://www.alipay.com/my/，当用户扫的二维码地址为https://www.alipay.com/my/id&#x3D;123,可唤起小程序）。</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// 小程序功能页，配置扫描二维码后打开的小程序功能页面路径
        /// </summary>
        /// <value>小程序功能页，配置扫描二维码后打开的小程序功能页面路径</value>
        [DataMember(Name = "page_redirection", EmitDefaultValue = false)]
        public string PageRedirection { get; set; }

        /// <summary>
        /// 模式，用于描述通用的路由url格式，适用于同一个host下面存在大量路由的场景，主要用于提升路由性能，其中{0}、{1} 代表路径中的变量
        /// </summary>
        /// <value>模式，用于描述通用的路由url格式，适用于同一个host下面存在大量路由的场景，主要用于提升路由性能，其中{0}、{1} 代表路径中的变量</value>
        [DataMember(Name = "route_pattern", EmitDefaultValue = false)]
        public string RoutePattern { get; set; }

        /// <summary>
        /// 二维码域名，须通过ICP备案验证，支持http、https、ftp开头的链接
        /// </summary>
        /// <value>二维码域名，须通过ICP备案验证，支持http、https、ftp开头的链接</value>
        [DataMember(Name = "route_url", EmitDefaultValue = false)]
        public string RouteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniQrcodeBindModel {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  PageRedirection: ").Append(PageRedirection).Append("\n");
            sb.Append("  RoutePattern: ").Append(RoutePattern).Append("\n");
            sb.Append("  RouteUrl: ").Append(RouteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniQrcodeBindModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniQrcodeBindModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniQrcodeBindModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniQrcodeBindModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.PageRedirection == input.PageRedirection ||
                    (this.PageRedirection != null &&
                    this.PageRedirection.Equals(input.PageRedirection))
                ) && 
                (
                    this.RoutePattern == input.RoutePattern ||
                    (this.RoutePattern != null &&
                    this.RoutePattern.Equals(input.RoutePattern))
                ) && 
                (
                    this.RouteUrl == input.RouteUrl ||
                    (this.RouteUrl != null &&
                    this.RouteUrl.Equals(input.RouteUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                {
                    hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                }
                if (this.PageRedirection != null)
                {
                    hashCode = (hashCode * 59) + this.PageRedirection.GetHashCode();
                }
                if (this.RoutePattern != null)
                {
                    hashCode = (hashCode * 59) + this.RoutePattern.GetHashCode();
                }
                if (this.RouteUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RouteUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
