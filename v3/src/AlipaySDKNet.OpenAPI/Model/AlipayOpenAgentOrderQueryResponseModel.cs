/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAgentOrderQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAgentOrderQueryResponseModel")]
    public partial class AlipayOpenAgentOrderQueryResponseModel : IEquatable<AlipayOpenAgentOrderQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAgentOrderQueryResponseModel" /> class.
        /// </summary>
        /// <param name="agentAppId">代理创建的应用ID，如果有代理商户创建应用，商户确认成功后，才返回应用ID，否则不返回。.</param>
        /// <param name="confirmUrl">只有申请单状态在MERCHANT_CONFIRM状态下，才会返回商户确认签约链接.</param>
        /// <param name="merchantPid">商户pid.</param>
        /// <param name="orderNo">签约单号.</param>
        /// <param name="orderStatus">支付宝商户入驻申请单状态，申请单状态包括：  MERCHANT_INFO_HOLD&#x3D;暂存，提交事务出现业务校验异常时，会暂存申请单信息，可以调用业务接口修正参数，并重新提交  MERCHANT_AUDITING&#x3D;审核中，申请信息正在人工审核中  MERCHANT_CONFIRM&#x3D;待商户确认，申请信息审核通过，等待联系人确认签约或授权  MERCHANT_CONFIRM_SUCCESS&#x3D;商户确认成功，商户同意签约或授权  MERCHANT_CONFIRM_TIME_OUT&#x3D;商户超时未确认，如果商户受到确认信息15天内未确认，则需要重新提交申请信息  MERCHANT_APPLY_ORDER_CANCELED&#x3D;审核失败或商户拒绝，申请信息审核被驳回，或者商户选择拒绝签约或授权.</param>
        /// <param name="productAgentStatusInfos">申请单中每个产品的签约状态.</param>
        /// <param name="rejectReason">审核失败的拒绝原因，只有审核失败才会返回该值.</param>
        /// <param name="restrictInfos">受限信息.</param>
        public AlipayOpenAgentOrderQueryResponseModel(string agentAppId = default(string), string confirmUrl = default(string), string merchantPid = default(string), string orderNo = default(string), string orderStatus = default(string), List<ProductAgentStatusInfo> productAgentStatusInfos = default(List<ProductAgentStatusInfo>), string rejectReason = default(string), List<SignRestrictInfo> restrictInfos = default(List<SignRestrictInfo>))
        {
            this.AgentAppId = agentAppId;
            this.ConfirmUrl = confirmUrl;
            this.MerchantPid = merchantPid;
            this.OrderNo = orderNo;
            this.OrderStatus = orderStatus;
            this.ProductAgentStatusInfos = productAgentStatusInfos;
            this.RejectReason = rejectReason;
            this.RestrictInfos = restrictInfos;
        }

        /// <summary>
        /// 代理创建的应用ID，如果有代理商户创建应用，商户确认成功后，才返回应用ID，否则不返回。
        /// </summary>
        /// <value>代理创建的应用ID，如果有代理商户创建应用，商户确认成功后，才返回应用ID，否则不返回。</value>
        [DataMember(Name = "agent_app_id", EmitDefaultValue = false)]
        public string AgentAppId { get; set; }

        /// <summary>
        /// 只有申请单状态在MERCHANT_CONFIRM状态下，才会返回商户确认签约链接
        /// </summary>
        /// <value>只有申请单状态在MERCHANT_CONFIRM状态下，才会返回商户确认签约链接</value>
        [DataMember(Name = "confirm_url", EmitDefaultValue = false)]
        public string ConfirmUrl { get; set; }

        /// <summary>
        /// 商户pid
        /// </summary>
        /// <value>商户pid</value>
        [DataMember(Name = "merchant_pid", EmitDefaultValue = false)]
        public string MerchantPid { get; set; }

        /// <summary>
        /// 签约单号
        /// </summary>
        /// <value>签约单号</value>
        [DataMember(Name = "order_no", EmitDefaultValue = false)]
        public string OrderNo { get; set; }

        /// <summary>
        /// 支付宝商户入驻申请单状态，申请单状态包括：  MERCHANT_INFO_HOLD&#x3D;暂存，提交事务出现业务校验异常时，会暂存申请单信息，可以调用业务接口修正参数，并重新提交  MERCHANT_AUDITING&#x3D;审核中，申请信息正在人工审核中  MERCHANT_CONFIRM&#x3D;待商户确认，申请信息审核通过，等待联系人确认签约或授权  MERCHANT_CONFIRM_SUCCESS&#x3D;商户确认成功，商户同意签约或授权  MERCHANT_CONFIRM_TIME_OUT&#x3D;商户超时未确认，如果商户受到确认信息15天内未确认，则需要重新提交申请信息  MERCHANT_APPLY_ORDER_CANCELED&#x3D;审核失败或商户拒绝，申请信息审核被驳回，或者商户选择拒绝签约或授权
        /// </summary>
        /// <value>支付宝商户入驻申请单状态，申请单状态包括：  MERCHANT_INFO_HOLD&#x3D;暂存，提交事务出现业务校验异常时，会暂存申请单信息，可以调用业务接口修正参数，并重新提交  MERCHANT_AUDITING&#x3D;审核中，申请信息正在人工审核中  MERCHANT_CONFIRM&#x3D;待商户确认，申请信息审核通过，等待联系人确认签约或授权  MERCHANT_CONFIRM_SUCCESS&#x3D;商户确认成功，商户同意签约或授权  MERCHANT_CONFIRM_TIME_OUT&#x3D;商户超时未确认，如果商户受到确认信息15天内未确认，则需要重新提交申请信息  MERCHANT_APPLY_ORDER_CANCELED&#x3D;审核失败或商户拒绝，申请信息审核被驳回，或者商户选择拒绝签约或授权</value>
        [DataMember(Name = "order_status", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// 申请单中每个产品的签约状态
        /// </summary>
        /// <value>申请单中每个产品的签约状态</value>
        [DataMember(Name = "product_agent_status_infos", EmitDefaultValue = false)]
        public List<ProductAgentStatusInfo> ProductAgentStatusInfos { get; set; }

        /// <summary>
        /// 审核失败的拒绝原因，只有审核失败才会返回该值
        /// </summary>
        /// <value>审核失败的拒绝原因，只有审核失败才会返回该值</value>
        [DataMember(Name = "reject_reason", EmitDefaultValue = false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// 受限信息
        /// </summary>
        /// <value>受限信息</value>
        [DataMember(Name = "restrict_infos", EmitDefaultValue = false)]
        public List<SignRestrictInfo> RestrictInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAgentOrderQueryResponseModel {\n");
            sb.Append("  AgentAppId: ").Append(AgentAppId).Append("\n");
            sb.Append("  ConfirmUrl: ").Append(ConfirmUrl).Append("\n");
            sb.Append("  MerchantPid: ").Append(MerchantPid).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  ProductAgentStatusInfos: ").Append(ProductAgentStatusInfos).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  RestrictInfos: ").Append(RestrictInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAgentOrderQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAgentOrderQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAgentOrderQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAgentOrderQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AgentAppId == input.AgentAppId ||
                    (this.AgentAppId != null &&
                    this.AgentAppId.Equals(input.AgentAppId))
                ) && 
                (
                    this.ConfirmUrl == input.ConfirmUrl ||
                    (this.ConfirmUrl != null &&
                    this.ConfirmUrl.Equals(input.ConfirmUrl))
                ) && 
                (
                    this.MerchantPid == input.MerchantPid ||
                    (this.MerchantPid != null &&
                    this.MerchantPid.Equals(input.MerchantPid))
                ) && 
                (
                    this.OrderNo == input.OrderNo ||
                    (this.OrderNo != null &&
                    this.OrderNo.Equals(input.OrderNo))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.ProductAgentStatusInfos == input.ProductAgentStatusInfos ||
                    this.ProductAgentStatusInfos != null &&
                    input.ProductAgentStatusInfos != null &&
                    this.ProductAgentStatusInfos.SequenceEqual(input.ProductAgentStatusInfos)
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    (this.RejectReason != null &&
                    this.RejectReason.Equals(input.RejectReason))
                ) && 
                (
                    this.RestrictInfos == input.RestrictInfos ||
                    this.RestrictInfos != null &&
                    input.RestrictInfos != null &&
                    this.RestrictInfos.SequenceEqual(input.RestrictInfos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentAppId != null)
                {
                    hashCode = (hashCode * 59) + this.AgentAppId.GetHashCode();
                }
                if (this.ConfirmUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmUrl.GetHashCode();
                }
                if (this.MerchantPid != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantPid.GetHashCode();
                }
                if (this.OrderNo != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNo.GetHashCode();
                }
                if (this.OrderStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OrderStatus.GetHashCode();
                }
                if (this.ProductAgentStatusInfos != null)
                {
                    hashCode = (hashCode * 59) + this.ProductAgentStatusInfos.GetHashCode();
                }
                if (this.RejectReason != null)
                {
                    hashCode = (hashCode * 59) + this.RejectReason.GetHashCode();
                }
                if (this.RestrictInfos != null)
                {
                    hashCode = (hashCode * 59) + this.RestrictInfos.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
