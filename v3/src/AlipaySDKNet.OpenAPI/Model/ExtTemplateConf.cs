/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ExtTemplateConf
    /// </summary>
    [DataContract(Name = "ExtTemplateConf")]
    public partial class ExtTemplateConf : IEquatable<ExtTemplateConf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtTemplateConf" /> class.
        /// </summary>
        /// <param name="buyerId">淘宝uid.</param>
        /// <param name="xxhmInfoId">先享后买id.</param>
        public ExtTemplateConf(string buyerId = default(string), string xxhmInfoId = default(string))
        {
            this.BuyerId = buyerId;
            this.XxhmInfoId = xxhmInfoId;
        }

        /// <summary>
        /// 淘宝uid
        /// </summary>
        /// <value>淘宝uid</value>
        [DataMember(Name = "buyer_id", EmitDefaultValue = false)]
        public string BuyerId { get; set; }

        /// <summary>
        /// 先享后买id
        /// </summary>
        /// <value>先享后买id</value>
        [DataMember(Name = "xxhm_info_id", EmitDefaultValue = false)]
        public string XxhmInfoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtTemplateConf {\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  XxhmInfoId: ").Append(XxhmInfoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtTemplateConf);
        }

        /// <summary>
        /// Returns true if ExtTemplateConf instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtTemplateConf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtTemplateConf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuyerId == input.BuyerId ||
                    (this.BuyerId != null &&
                    this.BuyerId.Equals(input.BuyerId))
                ) && 
                (
                    this.XxhmInfoId == input.XxhmInfoId ||
                    (this.XxhmInfoId != null &&
                    this.XxhmInfoId.Equals(input.XxhmInfoId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyerId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerId.GetHashCode();
                }
                if (this.XxhmInfoId != null)
                {
                    hashCode = (hashCode * 59) + this.XxhmInfoId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
