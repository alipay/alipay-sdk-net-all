/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// LifeLabel
    /// </summary>
    [DataContract(Name = "LifeLabel")]
    public partial class LifeLabel : IEquatable<LifeLabel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LifeLabel" /> class.
        /// </summary>
        /// <param name="biz">该标签支持的业务列表，menu表示个性化菜单，extension表示个性化扩展区，message表示消息触达.</param>
        /// <param name="category">标签类目.</param>
        /// <param name="dataType">标签值数据类型.</param>
        /// <param name="labelCode">标签英文代码.</param>
        /// <param name="labelId">标签id，唯一标识一个标签.</param>
        /// <param name="labelName">标签名.</param>
        /// <param name="_operator">该标签支持的运算符.</param>
        /// <param name="options">每个取值的业务含义.</param>
        /// <param name="type">标签类型，目前分为common（通用标签）、custom（生活号自定义标签）、cloud（云实验室标签）.</param>
        public LifeLabel(string biz = default(string), string category = default(string), string dataType = default(string), string labelCode = default(string), string labelId = default(string), string labelName = default(string), string _operator = default(string), List<Option> options = default(List<Option>), string type = default(string))
        {
            this.Biz = biz;
            this.Category = category;
            this.DataType = dataType;
            this.LabelCode = labelCode;
            this.LabelId = labelId;
            this.LabelName = labelName;
            this.Operator = _operator;
            this.Options = options;
            this.Type = type;
        }

        /// <summary>
        /// 该标签支持的业务列表，menu表示个性化菜单，extension表示个性化扩展区，message表示消息触达
        /// </summary>
        /// <value>该标签支持的业务列表，menu表示个性化菜单，extension表示个性化扩展区，message表示消息触达</value>
        [DataMember(Name = "biz", EmitDefaultValue = false)]
        public string Biz { get; set; }

        /// <summary>
        /// 标签类目
        /// </summary>
        /// <value>标签类目</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// 标签值数据类型
        /// </summary>
        /// <value>标签值数据类型</value>
        [DataMember(Name = "data_type", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// 标签英文代码
        /// </summary>
        /// <value>标签英文代码</value>
        [DataMember(Name = "label_code", EmitDefaultValue = false)]
        public string LabelCode { get; set; }

        /// <summary>
        /// 标签id，唯一标识一个标签
        /// </summary>
        /// <value>标签id，唯一标识一个标签</value>
        [DataMember(Name = "label_id", EmitDefaultValue = false)]
        public string LabelId { get; set; }

        /// <summary>
        /// 标签名
        /// </summary>
        /// <value>标签名</value>
        [DataMember(Name = "label_name", EmitDefaultValue = false)]
        public string LabelName { get; set; }

        /// <summary>
        /// 该标签支持的运算符
        /// </summary>
        /// <value>该标签支持的运算符</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// 每个取值的业务含义
        /// </summary>
        /// <value>每个取值的业务含义</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// 标签类型，目前分为common（通用标签）、custom（生活号自定义标签）、cloud（云实验室标签）
        /// </summary>
        /// <value>标签类型，目前分为common（通用标签）、custom（生活号自定义标签）、cloud（云实验室标签）</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LifeLabel {\n");
            sb.Append("  Biz: ").Append(Biz).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  LabelCode: ").Append(LabelCode).Append("\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  LabelName: ").Append(LabelName).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LifeLabel);
        }

        /// <summary>
        /// Returns true if LifeLabel instances are equal
        /// </summary>
        /// <param name="input">Instance of LifeLabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LifeLabel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Biz == input.Biz ||
                    (this.Biz != null &&
                    this.Biz.Equals(input.Biz))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.LabelCode == input.LabelCode ||
                    (this.LabelCode != null &&
                    this.LabelCode.Equals(input.LabelCode))
                ) && 
                (
                    this.LabelId == input.LabelId ||
                    (this.LabelId != null &&
                    this.LabelId.Equals(input.LabelId))
                ) && 
                (
                    this.LabelName == input.LabelName ||
                    (this.LabelName != null &&
                    this.LabelName.Equals(input.LabelName))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Biz != null)
                {
                    hashCode = (hashCode * 59) + this.Biz.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                if (this.LabelCode != null)
                {
                    hashCode = (hashCode * 59) + this.LabelCode.GetHashCode();
                }
                if (this.LabelId != null)
                {
                    hashCode = (hashCode * 59) + this.LabelId.GetHashCode();
                }
                if (this.LabelName != null)
                {
                    hashCode = (hashCode * 59) + this.LabelName.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
