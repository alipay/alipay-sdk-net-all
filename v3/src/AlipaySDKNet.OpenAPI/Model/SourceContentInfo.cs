/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SourceContentInfo
    /// </summary>
    [DataContract(Name = "SourceContentInfo")]
    public partial class SourceContentInfo : IEquatable<SourceContentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceContentInfo" /> class.
        /// </summary>
        /// <param name="contentId">内容ID.</param>
        /// <param name="link">支付宝内容链接.</param>
        /// <param name="permissionStatus">内容分发范围。0 - 仅创作者自己可见，1 - 所有人可见，2 - 分发范围受限。.</param>
        /// <param name="sourceAuthor">作者.</param>
        /// <param name="sourceLink">来源文章的原始链接地址.</param>
        /// <param name="sourceMediaInfos">素材列表.</param>
        /// <param name="sourceOffers">关联服务.</param>
        /// <param name="sourcePublishDate">文章发布时间.</param>
        /// <param name="sourceStatus">内容状态 0-审核中 1-成功发布 2-审核不通过 3-己删除.</param>
        /// <param name="sourceSummary">文章的摘要.</param>
        /// <param name="sourceTitle">内容标题.</param>
        /// <param name="sourceType">内容类型（0-长图文 1-短图文 2-视频）.</param>
        /// <param name="specialTags">平台加工后的内容标签，例如 HIGH_QUALITY: 优质.</param>
        public SourceContentInfo(string contentId = default(string), string link = default(string), string permissionStatus = default(string), string sourceAuthor = default(string), string sourceLink = default(string), List<SourceMediaInfo> sourceMediaInfos = default(List<SourceMediaInfo>), List<SourceOffer> sourceOffers = default(List<SourceOffer>), string sourcePublishDate = default(string), string sourceStatus = default(string), string sourceSummary = default(string), string sourceTitle = default(string), string sourceType = default(string), List<string> specialTags = default(List<string>))
        {
            this.ContentId = contentId;
            this.Link = link;
            this.PermissionStatus = permissionStatus;
            this.SourceAuthor = sourceAuthor;
            this.SourceLink = sourceLink;
            this.SourceMediaInfos = sourceMediaInfos;
            this.SourceOffers = sourceOffers;
            this.SourcePublishDate = sourcePublishDate;
            this.SourceStatus = sourceStatus;
            this.SourceSummary = sourceSummary;
            this.SourceTitle = sourceTitle;
            this.SourceType = sourceType;
            this.SpecialTags = specialTags;
        }

        /// <summary>
        /// 内容ID
        /// </summary>
        /// <value>内容ID</value>
        [DataMember(Name = "content_id", EmitDefaultValue = false)]
        public string ContentId { get; set; }

        /// <summary>
        /// 支付宝内容链接
        /// </summary>
        /// <value>支付宝内容链接</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// 内容分发范围。0 - 仅创作者自己可见，1 - 所有人可见，2 - 分发范围受限。
        /// </summary>
        /// <value>内容分发范围。0 - 仅创作者自己可见，1 - 所有人可见，2 - 分发范围受限。</value>
        [DataMember(Name = "permission_status", EmitDefaultValue = false)]
        public string PermissionStatus { get; set; }

        /// <summary>
        /// 作者
        /// </summary>
        /// <value>作者</value>
        [DataMember(Name = "source_author", EmitDefaultValue = false)]
        public string SourceAuthor { get; set; }

        /// <summary>
        /// 来源文章的原始链接地址
        /// </summary>
        /// <value>来源文章的原始链接地址</value>
        [DataMember(Name = "source_link", EmitDefaultValue = false)]
        public string SourceLink { get; set; }

        /// <summary>
        /// 素材列表
        /// </summary>
        /// <value>素材列表</value>
        [DataMember(Name = "source_media_infos", EmitDefaultValue = false)]
        public List<SourceMediaInfo> SourceMediaInfos { get; set; }

        /// <summary>
        /// 关联服务
        /// </summary>
        /// <value>关联服务</value>
        [DataMember(Name = "source_offers", EmitDefaultValue = false)]
        public List<SourceOffer> SourceOffers { get; set; }

        /// <summary>
        /// 文章发布时间
        /// </summary>
        /// <value>文章发布时间</value>
        [DataMember(Name = "source_publish_date", EmitDefaultValue = false)]
        public string SourcePublishDate { get; set; }

        /// <summary>
        /// 内容状态 0-审核中 1-成功发布 2-审核不通过 3-己删除
        /// </summary>
        /// <value>内容状态 0-审核中 1-成功发布 2-审核不通过 3-己删除</value>
        [DataMember(Name = "source_status", EmitDefaultValue = false)]
        public string SourceStatus { get; set; }

        /// <summary>
        /// 文章的摘要
        /// </summary>
        /// <value>文章的摘要</value>
        [DataMember(Name = "source_summary", EmitDefaultValue = false)]
        public string SourceSummary { get; set; }

        /// <summary>
        /// 内容标题
        /// </summary>
        /// <value>内容标题</value>
        [DataMember(Name = "source_title", EmitDefaultValue = false)]
        public string SourceTitle { get; set; }

        /// <summary>
        /// 内容类型（0-长图文 1-短图文 2-视频）
        /// </summary>
        /// <value>内容类型（0-长图文 1-短图文 2-视频）</value>
        [DataMember(Name = "source_type", EmitDefaultValue = false)]
        public string SourceType { get; set; }

        /// <summary>
        /// 平台加工后的内容标签，例如 HIGH_QUALITY: 优质
        /// </summary>
        /// <value>平台加工后的内容标签，例如 HIGH_QUALITY: 优质</value>
        [DataMember(Name = "special_tags", EmitDefaultValue = false)]
        public List<string> SpecialTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceContentInfo {\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  PermissionStatus: ").Append(PermissionStatus).Append("\n");
            sb.Append("  SourceAuthor: ").Append(SourceAuthor).Append("\n");
            sb.Append("  SourceLink: ").Append(SourceLink).Append("\n");
            sb.Append("  SourceMediaInfos: ").Append(SourceMediaInfos).Append("\n");
            sb.Append("  SourceOffers: ").Append(SourceOffers).Append("\n");
            sb.Append("  SourcePublishDate: ").Append(SourcePublishDate).Append("\n");
            sb.Append("  SourceStatus: ").Append(SourceStatus).Append("\n");
            sb.Append("  SourceSummary: ").Append(SourceSummary).Append("\n");
            sb.Append("  SourceTitle: ").Append(SourceTitle).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SpecialTags: ").Append(SpecialTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceContentInfo);
        }

        /// <summary>
        /// Returns true if SourceContentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceContentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceContentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.PermissionStatus == input.PermissionStatus ||
                    (this.PermissionStatus != null &&
                    this.PermissionStatus.Equals(input.PermissionStatus))
                ) && 
                (
                    this.SourceAuthor == input.SourceAuthor ||
                    (this.SourceAuthor != null &&
                    this.SourceAuthor.Equals(input.SourceAuthor))
                ) && 
                (
                    this.SourceLink == input.SourceLink ||
                    (this.SourceLink != null &&
                    this.SourceLink.Equals(input.SourceLink))
                ) && 
                (
                    this.SourceMediaInfos == input.SourceMediaInfos ||
                    this.SourceMediaInfos != null &&
                    input.SourceMediaInfos != null &&
                    this.SourceMediaInfos.SequenceEqual(input.SourceMediaInfos)
                ) && 
                (
                    this.SourceOffers == input.SourceOffers ||
                    this.SourceOffers != null &&
                    input.SourceOffers != null &&
                    this.SourceOffers.SequenceEqual(input.SourceOffers)
                ) && 
                (
                    this.SourcePublishDate == input.SourcePublishDate ||
                    (this.SourcePublishDate != null &&
                    this.SourcePublishDate.Equals(input.SourcePublishDate))
                ) && 
                (
                    this.SourceStatus == input.SourceStatus ||
                    (this.SourceStatus != null &&
                    this.SourceStatus.Equals(input.SourceStatus))
                ) && 
                (
                    this.SourceSummary == input.SourceSummary ||
                    (this.SourceSummary != null &&
                    this.SourceSummary.Equals(input.SourceSummary))
                ) && 
                (
                    this.SourceTitle == input.SourceTitle ||
                    (this.SourceTitle != null &&
                    this.SourceTitle.Equals(input.SourceTitle))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.SpecialTags == input.SpecialTags ||
                    this.SpecialTags != null &&
                    input.SpecialTags != null &&
                    this.SpecialTags.SequenceEqual(input.SpecialTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentId != null)
                {
                    hashCode = (hashCode * 59) + this.ContentId.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.PermissionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PermissionStatus.GetHashCode();
                }
                if (this.SourceAuthor != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAuthor.GetHashCode();
                }
                if (this.SourceLink != null)
                {
                    hashCode = (hashCode * 59) + this.SourceLink.GetHashCode();
                }
                if (this.SourceMediaInfos != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMediaInfos.GetHashCode();
                }
                if (this.SourceOffers != null)
                {
                    hashCode = (hashCode * 59) + this.SourceOffers.GetHashCode();
                }
                if (this.SourcePublishDate != null)
                {
                    hashCode = (hashCode * 59) + this.SourcePublishDate.GetHashCode();
                }
                if (this.SourceStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SourceStatus.GetHashCode();
                }
                if (this.SourceSummary != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSummary.GetHashCode();
                }
                if (this.SourceTitle != null)
                {
                    hashCode = (hashCode * 59) + this.SourceTitle.GetHashCode();
                }
                if (this.SourceType != null)
                {
                    hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                }
                if (this.SpecialTags != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialTags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
