/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayUserInfoShareResponseModel
    /// </summary>
    [DataContract(Name = "AlipayUserInfoShareResponseModel")]
    public partial class AlipayUserInfoShareResponseModel : IEquatable<AlipayUserInfoShareResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayUserInfoShareResponseModel" /> class.
        /// </summary>
        /// <param name="address">详细地址。.</param>
        /// <param name="age">用户年龄，实名认证为T，且证件类型为身份证，则输出年龄字段，否则不输出.</param>
        /// <param name="area">区县名称。.</param>
        /// <param name="avatar">用户头像地址。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。.</param>
        /// <param name="businessScope">经营/业务范围（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="certNo">【证件号码】结合证件类型使用.【注意】只is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="certType">【证件类型】0:身份证 1:护照 2:军官证 3:士兵证 4:回乡证 5:临时身份证 6:户口簿 7:警官证 8:台胞证 9:营业执照10:其它证件 11:港澳居民来往内地通行证 12:台湾居民来往大陆通行证 13:台湾居民居住证 14:港澳居民居住证  15:港澳身份证 16:外国人永久居住证【注意】只有is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="city">市名称。.</param>
        /// <param name="collegeName">学信网返回的学校名称，有可能为空。.</param>
        /// <param name="countryCode">国家码.</param>
        /// <param name="degree">学信网返回的学历/学位信息，数据质量一般，请谨慎使用，取值包括：博士研究生、硕士研究生、高升本、专科、博士、硕士、本科、夜大电大函大普通班、专科(高职)、第二学士学位。.</param>
        /// <param name="deliverAddresses">收货地址列表.</param>
        /// <param name="displayName">展示名称，用于展示和识别用户。返回的值是支付宝账户的可用外标之一，根据展示名称产品规则可能返回手机号/邮箱/支付宝号其中的一个。同一个账户在不同的时期返回的展示名称可能随规则变化而变化。.</param>
        /// <param name="email">优先获取email登录名，如果不存在，则返回mobile登录名.</param>
        /// <param name="enrollmentTime">入学时间，yyyy-mm-dd格式.</param>
        /// <param name="entLicenseAddress">企业证照地址的详细地址（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="entLicenseArea">企业证照地址所在地区或县（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性，目前企业营业执照地址不含县(区)，area为空。.</param>
        /// <param name="entLicenseCity">企业证照地址所在市（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="entLicenseProvince">企业证照地址所在省份（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="firmAgentPersonCertExpiryDate">企业代理人证件有效期（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmAgentPersonCertNo">企业代理人证件号码（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmAgentPersonCertType">企业代理人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmAgentPersonName">企业代理人姓名（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmLegalPersonCertExpiryDate">企业法人证件有效期（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmLegalPersonCertNo">法人证件号码（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmLegalPersonCertType">企业法人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmLegalPersonName">企业法人名称（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmLegalPersonPictures">企业法人证件图片（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmPictures">企业相关证件图片，包含图片地址（目前需要调用alipay.user.certify.image.fetch转换一下）及类型（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="firmType">公司类型，包括（用户类型是公司类型时才有此字段）：  CO(公司)  INST(事业单位),  COMM(社会团体),  NGO(民办非企业组织),  STATEORGAN(党政国家机关).</param>
        /// <param name="gender">性别。枚举值如下： F：女性； M：男性。.</param>
        /// <param name="graduationTime">预期毕业时间，不保证准确性，yyyy-mm-dd格式。.</param>
        /// <param name="identityCardAddress">身份证地址信息.</param>
        /// <param name="identityCardArea">身份证地区信息.</param>
        /// <param name="identityCardCity">身份证市信息.</param>
        /// <param name="identityCardProvince">身份证省信息.</param>
        /// <param name="instOrCorp">是否是金融机构或特殊单位，\&quot;I\&quot;表示金融机构, \&quot;C\&quot;表示无余额账户的单位账户,  \&quot;V\&quot;, 表示虚拟主体(类似机构仅内部户无余额户),  \&quot;N\&quot;表示非金融机构且非无余额账户的单位账户,\&quot;?\&quot;表示匿名用户.</param>
        /// <param name="isAdult">T/F, 实名认证为T，且证件类型为身份证，则输出是否成年字段，否则不输出.</param>
        /// <param name="isBalanceFrozen">余额账户是否被冻结。  T- -被冻结；F- -未冻结.</param>
        /// <param name="isBlocked">账户是否被冻结，T/F，T冻结，F未冻结.</param>
        /// <param name="isCertified">是否通过实名认证。T是通过 F是没有实名认证。.</param>
        /// <param name="isStudentCertified">是否是学生.</param>
        /// <param name="licenseExpiryDate">营业执照有效期，yyyyMMdd或长期，（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="licenseNo">企业执照号码（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="memberGrade">支付宝会员等级.</param>
        /// <param name="mobile">手机号码。.</param>
        /// <param name="nickName">用户昵称。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。.</param>
        /// <param name="openId">支付宝用户的openId。.</param>
        /// <param name="organizationCode">组织机构代码（用户类型是公司类型时才有此字段）。.</param>
        /// <param name="personBirthday">个人用户生日。.</param>
        /// <param name="personBirthdayWithoutYear">生日。不包含具体年份，格式MMdd.</param>
        /// <param name="personCertExpiryDate">证件有效期（用户类型是个人的时候才有此字段）。.</param>
        /// <param name="personCertIssueDate">证件起始日期（用户类型是个人的时候才可能有此字段，不保证准确，同时有可能为空）。.</param>
        /// <param name="personPictures">个人证件图片（用户类型是个人的时候才有此字段）。.</param>
        /// <param name="phone">电话号码。.</param>
        /// <param name="profession">职业.</param>
        /// <param name="province">省份名称。.</param>
        /// <param name="taobaoId">淘宝id.</param>
        /// <param name="userId">支付宝用户的userId。.</param>
        /// <param name="userName">若用户是个人用户，则是用户的真实姓名；若是企业用户，则是企业名称。【注意】只有is_certified为T的时候才有意义，否则不保证准确性..</param>
        /// <param name="userNation">身份证民族信息.</param>
        /// <param name="userStatus">用户状态（Q/T/B/W）。 Q代表快速注册用户 T代表正常用户 B代表被冻结账户 W代表已注册，未激活的账户.</param>
        /// <param name="userType">用户类型（1/2）  1代表公司账户2代表个人账户.</param>
        /// <param name="zip">邮政编码。.</param>
        public AlipayUserInfoShareResponseModel(string address = default(string), string age = default(string), string area = default(string), string avatar = default(string), string businessScope = default(string), string certNo = default(string), string certType = default(string), string city = default(string), string collegeName = default(string), string countryCode = default(string), string degree = default(string), List<AlipayUserDeliverAddress> deliverAddresses = default(List<AlipayUserDeliverAddress>), string displayName = default(string), string email = default(string), string enrollmentTime = default(string), string entLicenseAddress = default(string), string entLicenseArea = default(string), string entLicenseCity = default(string), string entLicenseProvince = default(string), string firmAgentPersonCertExpiryDate = default(string), string firmAgentPersonCertNo = default(string), string firmAgentPersonCertType = default(string), string firmAgentPersonName = default(string), string firmLegalPersonCertExpiryDate = default(string), string firmLegalPersonCertNo = default(string), string firmLegalPersonCertType = default(string), string firmLegalPersonName = default(string), List<AlipayUserPicture> firmLegalPersonPictures = default(List<AlipayUserPicture>), List<AlipayUserPicture> firmPictures = default(List<AlipayUserPicture>), string firmType = default(string), string gender = default(string), string graduationTime = default(string), string identityCardAddress = default(string), string identityCardArea = default(string), string identityCardCity = default(string), string identityCardProvince = default(string), string instOrCorp = default(string), string isAdult = default(string), string isBalanceFrozen = default(string), string isBlocked = default(string), string isCertified = default(string), string isStudentCertified = default(string), string licenseExpiryDate = default(string), string licenseNo = default(string), string memberGrade = default(string), string mobile = default(string), string nickName = default(string), string openId = default(string), string organizationCode = default(string), string personBirthday = default(string), string personBirthdayWithoutYear = default(string), string personCertExpiryDate = default(string), string personCertIssueDate = default(string), List<AlipayUserPicture> personPictures = default(List<AlipayUserPicture>), string phone = default(string), string profession = default(string), string province = default(string), string taobaoId = default(string), string userId = default(string), string userName = default(string), string userNation = default(string), string userStatus = default(string), string userType = default(string), string zip = default(string))
        {
            this.Address = address;
            this.Age = age;
            this.Area = area;
            this.Avatar = avatar;
            this.BusinessScope = businessScope;
            this.CertNo = certNo;
            this.CertType = certType;
            this.City = city;
            this.CollegeName = collegeName;
            this.CountryCode = countryCode;
            this.Degree = degree;
            this.DeliverAddresses = deliverAddresses;
            this.DisplayName = displayName;
            this.Email = email;
            this.EnrollmentTime = enrollmentTime;
            this.EntLicenseAddress = entLicenseAddress;
            this.EntLicenseArea = entLicenseArea;
            this.EntLicenseCity = entLicenseCity;
            this.EntLicenseProvince = entLicenseProvince;
            this.FirmAgentPersonCertExpiryDate = firmAgentPersonCertExpiryDate;
            this.FirmAgentPersonCertNo = firmAgentPersonCertNo;
            this.FirmAgentPersonCertType = firmAgentPersonCertType;
            this.FirmAgentPersonName = firmAgentPersonName;
            this.FirmLegalPersonCertExpiryDate = firmLegalPersonCertExpiryDate;
            this.FirmLegalPersonCertNo = firmLegalPersonCertNo;
            this.FirmLegalPersonCertType = firmLegalPersonCertType;
            this.FirmLegalPersonName = firmLegalPersonName;
            this.FirmLegalPersonPictures = firmLegalPersonPictures;
            this.FirmPictures = firmPictures;
            this.FirmType = firmType;
            this.Gender = gender;
            this.GraduationTime = graduationTime;
            this.IdentityCardAddress = identityCardAddress;
            this.IdentityCardArea = identityCardArea;
            this.IdentityCardCity = identityCardCity;
            this.IdentityCardProvince = identityCardProvince;
            this.InstOrCorp = instOrCorp;
            this.IsAdult = isAdult;
            this.IsBalanceFrozen = isBalanceFrozen;
            this.IsBlocked = isBlocked;
            this.IsCertified = isCertified;
            this.IsStudentCertified = isStudentCertified;
            this.LicenseExpiryDate = licenseExpiryDate;
            this.LicenseNo = licenseNo;
            this.MemberGrade = memberGrade;
            this.Mobile = mobile;
            this.NickName = nickName;
            this.OpenId = openId;
            this.OrganizationCode = organizationCode;
            this.PersonBirthday = personBirthday;
            this.PersonBirthdayWithoutYear = personBirthdayWithoutYear;
            this.PersonCertExpiryDate = personCertExpiryDate;
            this.PersonCertIssueDate = personCertIssueDate;
            this.PersonPictures = personPictures;
            this.Phone = phone;
            this.Profession = profession;
            this.Province = province;
            this.TaobaoId = taobaoId;
            this.UserId = userId;
            this.UserName = userName;
            this.UserNation = userNation;
            this.UserStatus = userStatus;
            this.UserType = userType;
            this.Zip = zip;
        }

        /// <summary>
        /// 详细地址。
        /// </summary>
        /// <value>详细地址。</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// 用户年龄，实名认证为T，且证件类型为身份证，则输出年龄字段，否则不输出
        /// </summary>
        /// <value>用户年龄，实名认证为T，且证件类型为身份证，则输出年龄字段，否则不输出</value>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public string Age { get; set; }

        /// <summary>
        /// 区县名称。
        /// </summary>
        /// <value>区县名称。</value>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// 用户头像地址。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。
        /// </summary>
        /// <value>用户头像地址。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。</value>
        [DataMember(Name = "avatar", EmitDefaultValue = false)]
        public string Avatar { get; set; }

        /// <summary>
        /// 经营/业务范围（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>经营/业务范围（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "business_scope", EmitDefaultValue = false)]
        public string BusinessScope { get; set; }

        /// <summary>
        /// 【证件号码】结合证件类型使用.【注意】只is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>【证件号码】结合证件类型使用.【注意】只is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 【证件类型】0:身份证 1:护照 2:军官证 3:士兵证 4:回乡证 5:临时身份证 6:户口簿 7:警官证 8:台胞证 9:营业执照10:其它证件 11:港澳居民来往内地通行证 12:台湾居民来往大陆通行证 13:台湾居民居住证 14:港澳居民居住证  15:港澳身份证 16:外国人永久居住证【注意】只有is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>【证件类型】0:身份证 1:护照 2:军官证 3:士兵证 4:回乡证 5:临时身份证 6:户口簿 7:警官证 8:台胞证 9:营业执照10:其它证件 11:港澳居民来往内地通行证 12:台湾居民来往大陆通行证 13:台湾居民居住证 14:港澳居民居住证  15:港澳身份证 16:外国人永久居住证【注意】只有is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public string CertType { get; set; }

        /// <summary>
        /// 市名称。
        /// </summary>
        /// <value>市名称。</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// 学信网返回的学校名称，有可能为空。
        /// </summary>
        /// <value>学信网返回的学校名称，有可能为空。</value>
        [DataMember(Name = "college_name", EmitDefaultValue = false)]
        public string CollegeName { get; set; }

        /// <summary>
        /// 国家码
        /// </summary>
        /// <value>国家码</value>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// 学信网返回的学历/学位信息，数据质量一般，请谨慎使用，取值包括：博士研究生、硕士研究生、高升本、专科、博士、硕士、本科、夜大电大函大普通班、专科(高职)、第二学士学位。
        /// </summary>
        /// <value>学信网返回的学历/学位信息，数据质量一般，请谨慎使用，取值包括：博士研究生、硕士研究生、高升本、专科、博士、硕士、本科、夜大电大函大普通班、专科(高职)、第二学士学位。</value>
        [DataMember(Name = "degree", EmitDefaultValue = false)]
        public string Degree { get; set; }

        /// <summary>
        /// 收货地址列表
        /// </summary>
        /// <value>收货地址列表</value>
        [DataMember(Name = "deliver_addresses", EmitDefaultValue = false)]
        public List<AlipayUserDeliverAddress> DeliverAddresses { get; set; }

        /// <summary>
        /// 展示名称，用于展示和识别用户。返回的值是支付宝账户的可用外标之一，根据展示名称产品规则可能返回手机号/邮箱/支付宝号其中的一个。同一个账户在不同的时期返回的展示名称可能随规则变化而变化。
        /// </summary>
        /// <value>展示名称，用于展示和识别用户。返回的值是支付宝账户的可用外标之一，根据展示名称产品规则可能返回手机号/邮箱/支付宝号其中的一个。同一个账户在不同的时期返回的展示名称可能随规则变化而变化。</value>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 优先获取email登录名，如果不存在，则返回mobile登录名
        /// </summary>
        /// <value>优先获取email登录名，如果不存在，则返回mobile登录名</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// 入学时间，yyyy-mm-dd格式
        /// </summary>
        /// <value>入学时间，yyyy-mm-dd格式</value>
        [DataMember(Name = "enrollment_time", EmitDefaultValue = false)]
        public string EnrollmentTime { get; set; }

        /// <summary>
        /// 企业证照地址的详细地址（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>企业证照地址的详细地址（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "ent_license_address", EmitDefaultValue = false)]
        public string EntLicenseAddress { get; set; }

        /// <summary>
        /// 企业证照地址所在地区或县（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性，目前企业营业执照地址不含县(区)，area为空。
        /// </summary>
        /// <value>企业证照地址所在地区或县（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性，目前企业营业执照地址不含县(区)，area为空。</value>
        [DataMember(Name = "ent_license_area", EmitDefaultValue = false)]
        public string EntLicenseArea { get; set; }

        /// <summary>
        /// 企业证照地址所在市（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>企业证照地址所在市（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "ent_license_city", EmitDefaultValue = false)]
        public string EntLicenseCity { get; set; }

        /// <summary>
        /// 企业证照地址所在省份（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>企业证照地址所在省份（用户类型是公司用户才有该字段）【注意】只有is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "ent_license_province", EmitDefaultValue = false)]
        public string EntLicenseProvince { get; set; }

        /// <summary>
        /// 企业代理人证件有效期（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业代理人证件有效期（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_agent_person_cert_expiry_date", EmitDefaultValue = false)]
        public string FirmAgentPersonCertExpiryDate { get; set; }

        /// <summary>
        /// 企业代理人证件号码（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业代理人证件号码（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_agent_person_cert_no", EmitDefaultValue = false)]
        public string FirmAgentPersonCertNo { get; set; }

        /// <summary>
        /// 企业代理人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业代理人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_agent_person_cert_type", EmitDefaultValue = false)]
        public string FirmAgentPersonCertType { get; set; }

        /// <summary>
        /// 企业代理人姓名（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业代理人姓名（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_agent_person_name", EmitDefaultValue = false)]
        public string FirmAgentPersonName { get; set; }

        /// <summary>
        /// 企业法人证件有效期（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业法人证件有效期（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_legal_person_cert_expiry_date", EmitDefaultValue = false)]
        public string FirmLegalPersonCertExpiryDate { get; set; }

        /// <summary>
        /// 法人证件号码（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>法人证件号码（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_legal_person_cert_no", EmitDefaultValue = false)]
        public string FirmLegalPersonCertNo { get; set; }

        /// <summary>
        /// 企业法人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业法人证件类型, 返回值参考cert_type字段（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_legal_person_cert_type", EmitDefaultValue = false)]
        public string FirmLegalPersonCertType { get; set; }

        /// <summary>
        /// 企业法人名称（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业法人名称（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_legal_person_name", EmitDefaultValue = false)]
        public string FirmLegalPersonName { get; set; }

        /// <summary>
        /// 企业法人证件图片（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业法人证件图片（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_legal_person_pictures", EmitDefaultValue = false)]
        public List<AlipayUserPicture> FirmLegalPersonPictures { get; set; }

        /// <summary>
        /// 企业相关证件图片，包含图片地址（目前需要调用alipay.user.certify.image.fetch转换一下）及类型（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业相关证件图片，包含图片地址（目前需要调用alipay.user.certify.image.fetch转换一下）及类型（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "firm_pictures", EmitDefaultValue = false)]
        public List<AlipayUserPicture> FirmPictures { get; set; }

        /// <summary>
        /// 公司类型，包括（用户类型是公司类型时才有此字段）：  CO(公司)  INST(事业单位),  COMM(社会团体),  NGO(民办非企业组织),  STATEORGAN(党政国家机关)
        /// </summary>
        /// <value>公司类型，包括（用户类型是公司类型时才有此字段）：  CO(公司)  INST(事业单位),  COMM(社会团体),  NGO(民办非企业组织),  STATEORGAN(党政国家机关)</value>
        [DataMember(Name = "firm_type", EmitDefaultValue = false)]
        public string FirmType { get; set; }

        /// <summary>
        /// 性别。枚举值如下： F：女性； M：男性。
        /// </summary>
        /// <value>性别。枚举值如下： F：女性； M：男性。</value>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// 预期毕业时间，不保证准确性，yyyy-mm-dd格式。
        /// </summary>
        /// <value>预期毕业时间，不保证准确性，yyyy-mm-dd格式。</value>
        [DataMember(Name = "graduation_time", EmitDefaultValue = false)]
        public string GraduationTime { get; set; }

        /// <summary>
        /// 身份证地址信息
        /// </summary>
        /// <value>身份证地址信息</value>
        [DataMember(Name = "identity_card_address", EmitDefaultValue = false)]
        public string IdentityCardAddress { get; set; }

        /// <summary>
        /// 身份证地区信息
        /// </summary>
        /// <value>身份证地区信息</value>
        [DataMember(Name = "identity_card_area", EmitDefaultValue = false)]
        public string IdentityCardArea { get; set; }

        /// <summary>
        /// 身份证市信息
        /// </summary>
        /// <value>身份证市信息</value>
        [DataMember(Name = "identity_card_city", EmitDefaultValue = false)]
        public string IdentityCardCity { get; set; }

        /// <summary>
        /// 身份证省信息
        /// </summary>
        /// <value>身份证省信息</value>
        [DataMember(Name = "identity_card_province", EmitDefaultValue = false)]
        public string IdentityCardProvince { get; set; }

        /// <summary>
        /// 是否是金融机构或特殊单位，\&quot;I\&quot;表示金融机构, \&quot;C\&quot;表示无余额账户的单位账户,  \&quot;V\&quot;, 表示虚拟主体(类似机构仅内部户无余额户),  \&quot;N\&quot;表示非金融机构且非无余额账户的单位账户,\&quot;?\&quot;表示匿名用户
        /// </summary>
        /// <value>是否是金融机构或特殊单位，\&quot;I\&quot;表示金融机构, \&quot;C\&quot;表示无余额账户的单位账户,  \&quot;V\&quot;, 表示虚拟主体(类似机构仅内部户无余额户),  \&quot;N\&quot;表示非金融机构且非无余额账户的单位账户,\&quot;?\&quot;表示匿名用户</value>
        [DataMember(Name = "inst_or_corp", EmitDefaultValue = false)]
        public string InstOrCorp { get; set; }

        /// <summary>
        /// T/F, 实名认证为T，且证件类型为身份证，则输出是否成年字段，否则不输出
        /// </summary>
        /// <value>T/F, 实名认证为T，且证件类型为身份证，则输出是否成年字段，否则不输出</value>
        [DataMember(Name = "is_adult", EmitDefaultValue = false)]
        public string IsAdult { get; set; }

        /// <summary>
        /// 余额账户是否被冻结。  T- -被冻结；F- -未冻结
        /// </summary>
        /// <value>余额账户是否被冻结。  T- -被冻结；F- -未冻结</value>
        [DataMember(Name = "is_balance_frozen", EmitDefaultValue = false)]
        public string IsBalanceFrozen { get; set; }

        /// <summary>
        /// 账户是否被冻结，T/F，T冻结，F未冻结
        /// </summary>
        /// <value>账户是否被冻结，T/F，T冻结，F未冻结</value>
        [DataMember(Name = "is_blocked", EmitDefaultValue = false)]
        public string IsBlocked { get; set; }

        /// <summary>
        /// 是否通过实名认证。T是通过 F是没有实名认证。
        /// </summary>
        /// <value>是否通过实名认证。T是通过 F是没有实名认证。</value>
        [DataMember(Name = "is_certified", EmitDefaultValue = false)]
        public string IsCertified { get; set; }

        /// <summary>
        /// 是否是学生
        /// </summary>
        /// <value>是否是学生</value>
        [DataMember(Name = "is_student_certified", EmitDefaultValue = false)]
        public string IsStudentCertified { get; set; }

        /// <summary>
        /// 营业执照有效期，yyyyMMdd或长期，（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>营业执照有效期，yyyyMMdd或长期，（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "license_expiry_date", EmitDefaultValue = false)]
        public string LicenseExpiryDate { get; set; }

        /// <summary>
        /// 企业执照号码（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>企业执照号码（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "license_no", EmitDefaultValue = false)]
        public string LicenseNo { get; set; }

        /// <summary>
        /// 支付宝会员等级
        /// </summary>
        /// <value>支付宝会员等级</value>
        [DataMember(Name = "member_grade", EmitDefaultValue = false)]
        public string MemberGrade { get; set; }

        /// <summary>
        /// 手机号码。
        /// </summary>
        /// <value>手机号码。</value>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// 用户昵称。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。
        /// </summary>
        /// <value>用户昵称。 注意：如果没有数据（用户未设置）时不会返回该信息，请做好容错。</value>
        [DataMember(Name = "nick_name", EmitDefaultValue = false)]
        public string NickName { get; set; }

        /// <summary>
        /// 支付宝用户的openId。
        /// </summary>
        /// <value>支付宝用户的openId。</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 组织机构代码（用户类型是公司类型时才有此字段）。
        /// </summary>
        /// <value>组织机构代码（用户类型是公司类型时才有此字段）。</value>
        [DataMember(Name = "organization_code", EmitDefaultValue = false)]
        public string OrganizationCode { get; set; }

        /// <summary>
        /// 个人用户生日。
        /// </summary>
        /// <value>个人用户生日。</value>
        [DataMember(Name = "person_birthday", EmitDefaultValue = false)]
        public string PersonBirthday { get; set; }

        /// <summary>
        /// 生日。不包含具体年份，格式MMdd
        /// </summary>
        /// <value>生日。不包含具体年份，格式MMdd</value>
        [DataMember(Name = "person_birthday_without_year", EmitDefaultValue = false)]
        public string PersonBirthdayWithoutYear { get; set; }

        /// <summary>
        /// 证件有效期（用户类型是个人的时候才有此字段）。
        /// </summary>
        /// <value>证件有效期（用户类型是个人的时候才有此字段）。</value>
        [DataMember(Name = "person_cert_expiry_date", EmitDefaultValue = false)]
        public string PersonCertExpiryDate { get; set; }

        /// <summary>
        /// 证件起始日期（用户类型是个人的时候才可能有此字段，不保证准确，同时有可能为空）。
        /// </summary>
        /// <value>证件起始日期（用户类型是个人的时候才可能有此字段，不保证准确，同时有可能为空）。</value>
        [DataMember(Name = "person_cert_issue_date", EmitDefaultValue = false)]
        public string PersonCertIssueDate { get; set; }

        /// <summary>
        /// 个人证件图片（用户类型是个人的时候才有此字段）。
        /// </summary>
        /// <value>个人证件图片（用户类型是个人的时候才有此字段）。</value>
        [DataMember(Name = "person_pictures", EmitDefaultValue = false)]
        public List<AlipayUserPicture> PersonPictures { get; set; }

        /// <summary>
        /// 电话号码。
        /// </summary>
        /// <value>电话号码。</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// 职业
        /// </summary>
        /// <value>职业</value>
        [DataMember(Name = "profession", EmitDefaultValue = false)]
        public string Profession { get; set; }

        /// <summary>
        /// 省份名称。
        /// </summary>
        /// <value>省份名称。</value>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// 淘宝id
        /// </summary>
        /// <value>淘宝id</value>
        [DataMember(Name = "taobao_id", EmitDefaultValue = false)]
        public string TaobaoId { get; set; }

        /// <summary>
        /// 支付宝用户的userId。
        /// </summary>
        /// <value>支付宝用户的userId。</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// 若用户是个人用户，则是用户的真实姓名；若是企业用户，则是企业名称。【注意】只有is_certified为T的时候才有意义，否则不保证准确性.
        /// </summary>
        /// <value>若用户是个人用户，则是用户的真实姓名；若是企业用户，则是企业名称。【注意】只有is_certified为T的时候才有意义，否则不保证准确性.</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// 身份证民族信息
        /// </summary>
        /// <value>身份证民族信息</value>
        [DataMember(Name = "user_nation", EmitDefaultValue = false)]
        public string UserNation { get; set; }

        /// <summary>
        /// 用户状态（Q/T/B/W）。 Q代表快速注册用户 T代表正常用户 B代表被冻结账户 W代表已注册，未激活的账户
        /// </summary>
        /// <value>用户状态（Q/T/B/W）。 Q代表快速注册用户 T代表正常用户 B代表被冻结账户 W代表已注册，未激活的账户</value>
        [DataMember(Name = "user_status", EmitDefaultValue = false)]
        public string UserStatus { get; set; }

        /// <summary>
        /// 用户类型（1/2）  1代表公司账户2代表个人账户
        /// </summary>
        /// <value>用户类型（1/2）  1代表公司账户2代表个人账户</value>
        [DataMember(Name = "user_type", EmitDefaultValue = false)]
        public string UserType { get; set; }

        /// <summary>
        /// 邮政编码。
        /// </summary>
        /// <value>邮政编码。</value>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayUserInfoShareResponseModel {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  BusinessScope: ").Append(BusinessScope).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CollegeName: ").Append(CollegeName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  DeliverAddresses: ").Append(DeliverAddresses).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnrollmentTime: ").Append(EnrollmentTime).Append("\n");
            sb.Append("  EntLicenseAddress: ").Append(EntLicenseAddress).Append("\n");
            sb.Append("  EntLicenseArea: ").Append(EntLicenseArea).Append("\n");
            sb.Append("  EntLicenseCity: ").Append(EntLicenseCity).Append("\n");
            sb.Append("  EntLicenseProvince: ").Append(EntLicenseProvince).Append("\n");
            sb.Append("  FirmAgentPersonCertExpiryDate: ").Append(FirmAgentPersonCertExpiryDate).Append("\n");
            sb.Append("  FirmAgentPersonCertNo: ").Append(FirmAgentPersonCertNo).Append("\n");
            sb.Append("  FirmAgentPersonCertType: ").Append(FirmAgentPersonCertType).Append("\n");
            sb.Append("  FirmAgentPersonName: ").Append(FirmAgentPersonName).Append("\n");
            sb.Append("  FirmLegalPersonCertExpiryDate: ").Append(FirmLegalPersonCertExpiryDate).Append("\n");
            sb.Append("  FirmLegalPersonCertNo: ").Append(FirmLegalPersonCertNo).Append("\n");
            sb.Append("  FirmLegalPersonCertType: ").Append(FirmLegalPersonCertType).Append("\n");
            sb.Append("  FirmLegalPersonName: ").Append(FirmLegalPersonName).Append("\n");
            sb.Append("  FirmLegalPersonPictures: ").Append(FirmLegalPersonPictures).Append("\n");
            sb.Append("  FirmPictures: ").Append(FirmPictures).Append("\n");
            sb.Append("  FirmType: ").Append(FirmType).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  GraduationTime: ").Append(GraduationTime).Append("\n");
            sb.Append("  IdentityCardAddress: ").Append(IdentityCardAddress).Append("\n");
            sb.Append("  IdentityCardArea: ").Append(IdentityCardArea).Append("\n");
            sb.Append("  IdentityCardCity: ").Append(IdentityCardCity).Append("\n");
            sb.Append("  IdentityCardProvince: ").Append(IdentityCardProvince).Append("\n");
            sb.Append("  InstOrCorp: ").Append(InstOrCorp).Append("\n");
            sb.Append("  IsAdult: ").Append(IsAdult).Append("\n");
            sb.Append("  IsBalanceFrozen: ").Append(IsBalanceFrozen).Append("\n");
            sb.Append("  IsBlocked: ").Append(IsBlocked).Append("\n");
            sb.Append("  IsCertified: ").Append(IsCertified).Append("\n");
            sb.Append("  IsStudentCertified: ").Append(IsStudentCertified).Append("\n");
            sb.Append("  LicenseExpiryDate: ").Append(LicenseExpiryDate).Append("\n");
            sb.Append("  LicenseNo: ").Append(LicenseNo).Append("\n");
            sb.Append("  MemberGrade: ").Append(MemberGrade).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OrganizationCode: ").Append(OrganizationCode).Append("\n");
            sb.Append("  PersonBirthday: ").Append(PersonBirthday).Append("\n");
            sb.Append("  PersonBirthdayWithoutYear: ").Append(PersonBirthdayWithoutYear).Append("\n");
            sb.Append("  PersonCertExpiryDate: ").Append(PersonCertExpiryDate).Append("\n");
            sb.Append("  PersonCertIssueDate: ").Append(PersonCertIssueDate).Append("\n");
            sb.Append("  PersonPictures: ").Append(PersonPictures).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Profession: ").Append(Profession).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  TaobaoId: ").Append(TaobaoId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserNation: ").Append(UserNation).Append("\n");
            sb.Append("  UserStatus: ").Append(UserStatus).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayUserInfoShareResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayUserInfoShareResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayUserInfoShareResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayUserInfoShareResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.BusinessScope == input.BusinessScope ||
                    (this.BusinessScope != null &&
                    this.BusinessScope.Equals(input.BusinessScope))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CollegeName == input.CollegeName ||
                    (this.CollegeName != null &&
                    this.CollegeName.Equals(input.CollegeName))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Degree == input.Degree ||
                    (this.Degree != null &&
                    this.Degree.Equals(input.Degree))
                ) && 
                (
                    this.DeliverAddresses == input.DeliverAddresses ||
                    this.DeliverAddresses != null &&
                    input.DeliverAddresses != null &&
                    this.DeliverAddresses.SequenceEqual(input.DeliverAddresses)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EnrollmentTime == input.EnrollmentTime ||
                    (this.EnrollmentTime != null &&
                    this.EnrollmentTime.Equals(input.EnrollmentTime))
                ) && 
                (
                    this.EntLicenseAddress == input.EntLicenseAddress ||
                    (this.EntLicenseAddress != null &&
                    this.EntLicenseAddress.Equals(input.EntLicenseAddress))
                ) && 
                (
                    this.EntLicenseArea == input.EntLicenseArea ||
                    (this.EntLicenseArea != null &&
                    this.EntLicenseArea.Equals(input.EntLicenseArea))
                ) && 
                (
                    this.EntLicenseCity == input.EntLicenseCity ||
                    (this.EntLicenseCity != null &&
                    this.EntLicenseCity.Equals(input.EntLicenseCity))
                ) && 
                (
                    this.EntLicenseProvince == input.EntLicenseProvince ||
                    (this.EntLicenseProvince != null &&
                    this.EntLicenseProvince.Equals(input.EntLicenseProvince))
                ) && 
                (
                    this.FirmAgentPersonCertExpiryDate == input.FirmAgentPersonCertExpiryDate ||
                    (this.FirmAgentPersonCertExpiryDate != null &&
                    this.FirmAgentPersonCertExpiryDate.Equals(input.FirmAgentPersonCertExpiryDate))
                ) && 
                (
                    this.FirmAgentPersonCertNo == input.FirmAgentPersonCertNo ||
                    (this.FirmAgentPersonCertNo != null &&
                    this.FirmAgentPersonCertNo.Equals(input.FirmAgentPersonCertNo))
                ) && 
                (
                    this.FirmAgentPersonCertType == input.FirmAgentPersonCertType ||
                    (this.FirmAgentPersonCertType != null &&
                    this.FirmAgentPersonCertType.Equals(input.FirmAgentPersonCertType))
                ) && 
                (
                    this.FirmAgentPersonName == input.FirmAgentPersonName ||
                    (this.FirmAgentPersonName != null &&
                    this.FirmAgentPersonName.Equals(input.FirmAgentPersonName))
                ) && 
                (
                    this.FirmLegalPersonCertExpiryDate == input.FirmLegalPersonCertExpiryDate ||
                    (this.FirmLegalPersonCertExpiryDate != null &&
                    this.FirmLegalPersonCertExpiryDate.Equals(input.FirmLegalPersonCertExpiryDate))
                ) && 
                (
                    this.FirmLegalPersonCertNo == input.FirmLegalPersonCertNo ||
                    (this.FirmLegalPersonCertNo != null &&
                    this.FirmLegalPersonCertNo.Equals(input.FirmLegalPersonCertNo))
                ) && 
                (
                    this.FirmLegalPersonCertType == input.FirmLegalPersonCertType ||
                    (this.FirmLegalPersonCertType != null &&
                    this.FirmLegalPersonCertType.Equals(input.FirmLegalPersonCertType))
                ) && 
                (
                    this.FirmLegalPersonName == input.FirmLegalPersonName ||
                    (this.FirmLegalPersonName != null &&
                    this.FirmLegalPersonName.Equals(input.FirmLegalPersonName))
                ) && 
                (
                    this.FirmLegalPersonPictures == input.FirmLegalPersonPictures ||
                    this.FirmLegalPersonPictures != null &&
                    input.FirmLegalPersonPictures != null &&
                    this.FirmLegalPersonPictures.SequenceEqual(input.FirmLegalPersonPictures)
                ) && 
                (
                    this.FirmPictures == input.FirmPictures ||
                    this.FirmPictures != null &&
                    input.FirmPictures != null &&
                    this.FirmPictures.SequenceEqual(input.FirmPictures)
                ) && 
                (
                    this.FirmType == input.FirmType ||
                    (this.FirmType != null &&
                    this.FirmType.Equals(input.FirmType))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.GraduationTime == input.GraduationTime ||
                    (this.GraduationTime != null &&
                    this.GraduationTime.Equals(input.GraduationTime))
                ) && 
                (
                    this.IdentityCardAddress == input.IdentityCardAddress ||
                    (this.IdentityCardAddress != null &&
                    this.IdentityCardAddress.Equals(input.IdentityCardAddress))
                ) && 
                (
                    this.IdentityCardArea == input.IdentityCardArea ||
                    (this.IdentityCardArea != null &&
                    this.IdentityCardArea.Equals(input.IdentityCardArea))
                ) && 
                (
                    this.IdentityCardCity == input.IdentityCardCity ||
                    (this.IdentityCardCity != null &&
                    this.IdentityCardCity.Equals(input.IdentityCardCity))
                ) && 
                (
                    this.IdentityCardProvince == input.IdentityCardProvince ||
                    (this.IdentityCardProvince != null &&
                    this.IdentityCardProvince.Equals(input.IdentityCardProvince))
                ) && 
                (
                    this.InstOrCorp == input.InstOrCorp ||
                    (this.InstOrCorp != null &&
                    this.InstOrCorp.Equals(input.InstOrCorp))
                ) && 
                (
                    this.IsAdult == input.IsAdult ||
                    (this.IsAdult != null &&
                    this.IsAdult.Equals(input.IsAdult))
                ) && 
                (
                    this.IsBalanceFrozen == input.IsBalanceFrozen ||
                    (this.IsBalanceFrozen != null &&
                    this.IsBalanceFrozen.Equals(input.IsBalanceFrozen))
                ) && 
                (
                    this.IsBlocked == input.IsBlocked ||
                    (this.IsBlocked != null &&
                    this.IsBlocked.Equals(input.IsBlocked))
                ) && 
                (
                    this.IsCertified == input.IsCertified ||
                    (this.IsCertified != null &&
                    this.IsCertified.Equals(input.IsCertified))
                ) && 
                (
                    this.IsStudentCertified == input.IsStudentCertified ||
                    (this.IsStudentCertified != null &&
                    this.IsStudentCertified.Equals(input.IsStudentCertified))
                ) && 
                (
                    this.LicenseExpiryDate == input.LicenseExpiryDate ||
                    (this.LicenseExpiryDate != null &&
                    this.LicenseExpiryDate.Equals(input.LicenseExpiryDate))
                ) && 
                (
                    this.LicenseNo == input.LicenseNo ||
                    (this.LicenseNo != null &&
                    this.LicenseNo.Equals(input.LicenseNo))
                ) && 
                (
                    this.MemberGrade == input.MemberGrade ||
                    (this.MemberGrade != null &&
                    this.MemberGrade.Equals(input.MemberGrade))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.NickName == input.NickName ||
                    (this.NickName != null &&
                    this.NickName.Equals(input.NickName))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OrganizationCode == input.OrganizationCode ||
                    (this.OrganizationCode != null &&
                    this.OrganizationCode.Equals(input.OrganizationCode))
                ) && 
                (
                    this.PersonBirthday == input.PersonBirthday ||
                    (this.PersonBirthday != null &&
                    this.PersonBirthday.Equals(input.PersonBirthday))
                ) && 
                (
                    this.PersonBirthdayWithoutYear == input.PersonBirthdayWithoutYear ||
                    (this.PersonBirthdayWithoutYear != null &&
                    this.PersonBirthdayWithoutYear.Equals(input.PersonBirthdayWithoutYear))
                ) && 
                (
                    this.PersonCertExpiryDate == input.PersonCertExpiryDate ||
                    (this.PersonCertExpiryDate != null &&
                    this.PersonCertExpiryDate.Equals(input.PersonCertExpiryDate))
                ) && 
                (
                    this.PersonCertIssueDate == input.PersonCertIssueDate ||
                    (this.PersonCertIssueDate != null &&
                    this.PersonCertIssueDate.Equals(input.PersonCertIssueDate))
                ) && 
                (
                    this.PersonPictures == input.PersonPictures ||
                    this.PersonPictures != null &&
                    input.PersonPictures != null &&
                    this.PersonPictures.SequenceEqual(input.PersonPictures)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Profession == input.Profession ||
                    (this.Profession != null &&
                    this.Profession.Equals(input.Profession))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.TaobaoId == input.TaobaoId ||
                    (this.TaobaoId != null &&
                    this.TaobaoId.Equals(input.TaobaoId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserNation == input.UserNation ||
                    (this.UserNation != null &&
                    this.UserNation.Equals(input.UserNation))
                ) && 
                (
                    this.UserStatus == input.UserStatus ||
                    (this.UserStatus != null &&
                    this.UserStatus.Equals(input.UserStatus))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Age != null)
                {
                    hashCode = (hashCode * 59) + this.Age.GetHashCode();
                }
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.Avatar != null)
                {
                    hashCode = (hashCode * 59) + this.Avatar.GetHashCode();
                }
                if (this.BusinessScope != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessScope.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.CertType != null)
                {
                    hashCode = (hashCode * 59) + this.CertType.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.CollegeName != null)
                {
                    hashCode = (hashCode * 59) + this.CollegeName.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.Degree != null)
                {
                    hashCode = (hashCode * 59) + this.Degree.GetHashCode();
                }
                if (this.DeliverAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.DeliverAddresses.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.EnrollmentTime != null)
                {
                    hashCode = (hashCode * 59) + this.EnrollmentTime.GetHashCode();
                }
                if (this.EntLicenseAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EntLicenseAddress.GetHashCode();
                }
                if (this.EntLicenseArea != null)
                {
                    hashCode = (hashCode * 59) + this.EntLicenseArea.GetHashCode();
                }
                if (this.EntLicenseCity != null)
                {
                    hashCode = (hashCode * 59) + this.EntLicenseCity.GetHashCode();
                }
                if (this.EntLicenseProvince != null)
                {
                    hashCode = (hashCode * 59) + this.EntLicenseProvince.GetHashCode();
                }
                if (this.FirmAgentPersonCertExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirmAgentPersonCertExpiryDate.GetHashCode();
                }
                if (this.FirmAgentPersonCertNo != null)
                {
                    hashCode = (hashCode * 59) + this.FirmAgentPersonCertNo.GetHashCode();
                }
                if (this.FirmAgentPersonCertType != null)
                {
                    hashCode = (hashCode * 59) + this.FirmAgentPersonCertType.GetHashCode();
                }
                if (this.FirmAgentPersonName != null)
                {
                    hashCode = (hashCode * 59) + this.FirmAgentPersonName.GetHashCode();
                }
                if (this.FirmLegalPersonCertExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirmLegalPersonCertExpiryDate.GetHashCode();
                }
                if (this.FirmLegalPersonCertNo != null)
                {
                    hashCode = (hashCode * 59) + this.FirmLegalPersonCertNo.GetHashCode();
                }
                if (this.FirmLegalPersonCertType != null)
                {
                    hashCode = (hashCode * 59) + this.FirmLegalPersonCertType.GetHashCode();
                }
                if (this.FirmLegalPersonName != null)
                {
                    hashCode = (hashCode * 59) + this.FirmLegalPersonName.GetHashCode();
                }
                if (this.FirmLegalPersonPictures != null)
                {
                    hashCode = (hashCode * 59) + this.FirmLegalPersonPictures.GetHashCode();
                }
                if (this.FirmPictures != null)
                {
                    hashCode = (hashCode * 59) + this.FirmPictures.GetHashCode();
                }
                if (this.FirmType != null)
                {
                    hashCode = (hashCode * 59) + this.FirmType.GetHashCode();
                }
                if (this.Gender != null)
                {
                    hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                }
                if (this.GraduationTime != null)
                {
                    hashCode = (hashCode * 59) + this.GraduationTime.GetHashCode();
                }
                if (this.IdentityCardAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityCardAddress.GetHashCode();
                }
                if (this.IdentityCardArea != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityCardArea.GetHashCode();
                }
                if (this.IdentityCardCity != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityCardCity.GetHashCode();
                }
                if (this.IdentityCardProvince != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityCardProvince.GetHashCode();
                }
                if (this.InstOrCorp != null)
                {
                    hashCode = (hashCode * 59) + this.InstOrCorp.GetHashCode();
                }
                if (this.IsAdult != null)
                {
                    hashCode = (hashCode * 59) + this.IsAdult.GetHashCode();
                }
                if (this.IsBalanceFrozen != null)
                {
                    hashCode = (hashCode * 59) + this.IsBalanceFrozen.GetHashCode();
                }
                if (this.IsBlocked != null)
                {
                    hashCode = (hashCode * 59) + this.IsBlocked.GetHashCode();
                }
                if (this.IsCertified != null)
                {
                    hashCode = (hashCode * 59) + this.IsCertified.GetHashCode();
                }
                if (this.IsStudentCertified != null)
                {
                    hashCode = (hashCode * 59) + this.IsStudentCertified.GetHashCode();
                }
                if (this.LicenseExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.LicenseExpiryDate.GetHashCode();
                }
                if (this.LicenseNo != null)
                {
                    hashCode = (hashCode * 59) + this.LicenseNo.GetHashCode();
                }
                if (this.MemberGrade != null)
                {
                    hashCode = (hashCode * 59) + this.MemberGrade.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.NickName != null)
                {
                    hashCode = (hashCode * 59) + this.NickName.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OrganizationCode != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationCode.GetHashCode();
                }
                if (this.PersonBirthday != null)
                {
                    hashCode = (hashCode * 59) + this.PersonBirthday.GetHashCode();
                }
                if (this.PersonBirthdayWithoutYear != null)
                {
                    hashCode = (hashCode * 59) + this.PersonBirthdayWithoutYear.GetHashCode();
                }
                if (this.PersonCertExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.PersonCertExpiryDate.GetHashCode();
                }
                if (this.PersonCertIssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.PersonCertIssueDate.GetHashCode();
                }
                if (this.PersonPictures != null)
                {
                    hashCode = (hashCode * 59) + this.PersonPictures.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Profession != null)
                {
                    hashCode = (hashCode * 59) + this.Profession.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                if (this.TaobaoId != null)
                {
                    hashCode = (hashCode * 59) + this.TaobaoId.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.UserNation != null)
                {
                    hashCode = (hashCode * 59) + this.UserNation.GetHashCode();
                }
                if (this.UserStatus != null)
                {
                    hashCode = (hashCode * 59) + this.UserStatus.GetHashCode();
                }
                if (this.UserType != null)
                {
                    hashCode = (hashCode * 59) + this.UserType.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
