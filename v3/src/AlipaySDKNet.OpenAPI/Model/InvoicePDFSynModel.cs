/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// InvoicePDFSynModel
    /// </summary>
    [DataContract(Name = "InvoicePDFSynModel")]
    public partial class InvoicePDFSynModel : IEquatable<InvoicePDFSynModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicePDFSynModel" /> class.
        /// </summary>
        /// <param name="applyId">支付宝开票申请id.</param>
        /// <param name="extendFields">预留的扩展字段，格式如：key1&#x3D;value1\\nkey2&#x3D;value2\\nkey3&#x3D;value3，字段之间以\\n(换行符)分隔。.</param>
        /// <param name="fileBase">base64化的字符串，与file_download_url不可同时为空。.</param>
        /// <param name="fileDownloadType">文件类型，必填。 PDF类型文件填写PDF， OFD类型文件填写ofd， JPG类型文件填写JPG(JPG文件请先询问对接人当前是否支持).</param>
        /// <param name="fileDownloadUrl">发票文件下载地址，和file_base不可同时为空。.</param>
        /// <param name="loginId">支付宝登录账号.</param>
        /// <param name="openId">支付宝用户id，当apply_id为空时，open_id必填.</param>
        /// <param name="outInvoiceId">外部ISV的唯一发票标识.</param>
        /// <param name="userId">支付宝用户userId.</param>
        /// <param name="zip">压缩方式.</param>
        public InvoicePDFSynModel(string applyId = default(string), string extendFields = default(string), string fileBase = default(string), string fileDownloadType = default(string), string fileDownloadUrl = default(string), string loginId = default(string), string openId = default(string), string outInvoiceId = default(string), string userId = default(string), string zip = default(string))
        {
            this.ApplyId = applyId;
            this.ExtendFields = extendFields;
            this.FileBase = fileBase;
            this.FileDownloadType = fileDownloadType;
            this.FileDownloadUrl = fileDownloadUrl;
            this.LoginId = loginId;
            this.OpenId = openId;
            this.OutInvoiceId = outInvoiceId;
            this.UserId = userId;
            this.Zip = zip;
        }

        /// <summary>
        /// 支付宝开票申请id
        /// </summary>
        /// <value>支付宝开票申请id</value>
        [DataMember(Name = "apply_id", EmitDefaultValue = false)]
        public string ApplyId { get; set; }

        /// <summary>
        /// 预留的扩展字段，格式如：key1&#x3D;value1\\nkey2&#x3D;value2\\nkey3&#x3D;value3，字段之间以\\n(换行符)分隔。
        /// </summary>
        /// <value>预留的扩展字段，格式如：key1&#x3D;value1\\nkey2&#x3D;value2\\nkey3&#x3D;value3，字段之间以\\n(换行符)分隔。</value>
        [DataMember(Name = "extend_fields", EmitDefaultValue = false)]
        public string ExtendFields { get; set; }

        /// <summary>
        /// base64化的字符串，与file_download_url不可同时为空。
        /// </summary>
        /// <value>base64化的字符串，与file_download_url不可同时为空。</value>
        [DataMember(Name = "file_base", EmitDefaultValue = false)]
        public string FileBase { get; set; }

        /// <summary>
        /// 文件类型，必填。 PDF类型文件填写PDF， OFD类型文件填写ofd， JPG类型文件填写JPG(JPG文件请先询问对接人当前是否支持)
        /// </summary>
        /// <value>文件类型，必填。 PDF类型文件填写PDF， OFD类型文件填写ofd， JPG类型文件填写JPG(JPG文件请先询问对接人当前是否支持)</value>
        [DataMember(Name = "file_download_type", EmitDefaultValue = false)]
        public string FileDownloadType { get; set; }

        /// <summary>
        /// 发票文件下载地址，和file_base不可同时为空。
        /// </summary>
        /// <value>发票文件下载地址，和file_base不可同时为空。</value>
        [DataMember(Name = "file_download_url", EmitDefaultValue = false)]
        public string FileDownloadUrl { get; set; }

        /// <summary>
        /// 支付宝登录账号
        /// </summary>
        /// <value>支付宝登录账号</value>
        [DataMember(Name = "login_id", EmitDefaultValue = false)]
        public string LoginId { get; set; }

        /// <summary>
        /// 支付宝用户id，当apply_id为空时，open_id必填
        /// </summary>
        /// <value>支付宝用户id，当apply_id为空时，open_id必填</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 外部ISV的唯一发票标识
        /// </summary>
        /// <value>外部ISV的唯一发票标识</value>
        [DataMember(Name = "out_invoice_id", EmitDefaultValue = false)]
        public string OutInvoiceId { get; set; }

        /// <summary>
        /// 支付宝用户userId
        /// </summary>
        /// <value>支付宝用户userId</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// 压缩方式
        /// </summary>
        /// <value>压缩方式</value>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoicePDFSynModel {\n");
            sb.Append("  ApplyId: ").Append(ApplyId).Append("\n");
            sb.Append("  ExtendFields: ").Append(ExtendFields).Append("\n");
            sb.Append("  FileBase: ").Append(FileBase).Append("\n");
            sb.Append("  FileDownloadType: ").Append(FileDownloadType).Append("\n");
            sb.Append("  FileDownloadUrl: ").Append(FileDownloadUrl).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutInvoiceId: ").Append(OutInvoiceId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoicePDFSynModel);
        }

        /// <summary>
        /// Returns true if InvoicePDFSynModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoicePDFSynModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoicePDFSynModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplyId == input.ApplyId ||
                    (this.ApplyId != null &&
                    this.ApplyId.Equals(input.ApplyId))
                ) && 
                (
                    this.ExtendFields == input.ExtendFields ||
                    (this.ExtendFields != null &&
                    this.ExtendFields.Equals(input.ExtendFields))
                ) && 
                (
                    this.FileBase == input.FileBase ||
                    (this.FileBase != null &&
                    this.FileBase.Equals(input.FileBase))
                ) && 
                (
                    this.FileDownloadType == input.FileDownloadType ||
                    (this.FileDownloadType != null &&
                    this.FileDownloadType.Equals(input.FileDownloadType))
                ) && 
                (
                    this.FileDownloadUrl == input.FileDownloadUrl ||
                    (this.FileDownloadUrl != null &&
                    this.FileDownloadUrl.Equals(input.FileDownloadUrl))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OutInvoiceId == input.OutInvoiceId ||
                    (this.OutInvoiceId != null &&
                    this.OutInvoiceId.Equals(input.OutInvoiceId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplyId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyId.GetHashCode();
                }
                if (this.ExtendFields != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendFields.GetHashCode();
                }
                if (this.FileBase != null)
                {
                    hashCode = (hashCode * 59) + this.FileBase.GetHashCode();
                }
                if (this.FileDownloadType != null)
                {
                    hashCode = (hashCode * 59) + this.FileDownloadType.GetHashCode();
                }
                if (this.FileDownloadUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FileDownloadUrl.GetHashCode();
                }
                if (this.LoginId != null)
                {
                    hashCode = (hashCode * 59) + this.LoginId.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OutInvoiceId != null)
                {
                    hashCode = (hashCode * 59) + this.OutInvoiceId.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
