/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PreOrderExtInfo
    /// </summary>
    [DataContract(Name = "PreOrderExtInfo")]
    public partial class PreOrderExtInfo : IEquatable<PreOrderExtInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOrderExtInfo" /> class.
        /// </summary>
        /// <param name="brandId">品牌id.</param>
        /// <param name="brandName">品牌名称.</param>
        /// <param name="channel">请求渠道.</param>
        /// <param name="orderFeature">单据属性,风控系统使用.</param>
        public PreOrderExtInfo(string brandId = default(string), string brandName = default(string), string channel = default(string), string orderFeature = default(string))
        {
            this.BrandId = brandId;
            this.BrandName = brandName;
            this.Channel = channel;
            this.OrderFeature = orderFeature;
        }

        /// <summary>
        /// 品牌id
        /// </summary>
        /// <value>品牌id</value>
        [DataMember(Name = "brand_id", EmitDefaultValue = false)]
        public string BrandId { get; set; }

        /// <summary>
        /// 品牌名称
        /// </summary>
        /// <value>品牌名称</value>
        [DataMember(Name = "brand_name", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// 请求渠道
        /// </summary>
        /// <value>请求渠道</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// 单据属性,风控系统使用
        /// </summary>
        /// <value>单据属性,风控系统使用</value>
        [DataMember(Name = "order_feature", EmitDefaultValue = false)]
        public string OrderFeature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreOrderExtInfo {\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  OrderFeature: ").Append(OrderFeature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreOrderExtInfo);
        }

        /// <summary>
        /// Returns true if PreOrderExtInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PreOrderExtInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreOrderExtInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.OrderFeature == input.OrderFeature ||
                    (this.OrderFeature != null &&
                    this.OrderFeature.Equals(input.OrderFeature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrandId != null)
                {
                    hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                }
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.Channel != null)
                {
                    hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                }
                if (this.OrderFeature != null)
                {
                    hashCode = (hashCode * 59) + this.OrderFeature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
