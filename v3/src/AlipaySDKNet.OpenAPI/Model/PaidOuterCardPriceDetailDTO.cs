/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PaidOuterCardPriceDetailDTO
    /// </summary>
    [DataContract(Name = "PaidOuterCardPriceDetailDTO")]
    public partial class PaidOuterCardPriceDetailDTO : IEquatable<PaidOuterCardPriceDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaidOuterCardPriceDetailDTO" /> class.
        /// </summary>
        /// <param name="desc">方案描述.</param>
        /// <param name="price">售卖具体金额。单位为元。支持两位小数。.</param>
        /// <param name="priceType">售卖金额类型.</param>
        /// <param name="worth">价值。单位为元。支持两位小数.</param>
        public PaidOuterCardPriceDetailDTO(string desc = default(string), string price = default(string), string priceType = default(string), string worth = default(string))
        {
            this.Desc = desc;
            this.Price = price;
            this.PriceType = priceType;
            this.Worth = worth;
        }

        /// <summary>
        /// 方案描述
        /// </summary>
        /// <value>方案描述</value>
        [DataMember(Name = "desc", EmitDefaultValue = false)]
        public string Desc { get; set; }

        /// <summary>
        /// 售卖具体金额。单位为元。支持两位小数。
        /// </summary>
        /// <value>售卖具体金额。单位为元。支持两位小数。</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public string Price { get; set; }

        /// <summary>
        /// 售卖金额类型
        /// </summary>
        /// <value>售卖金额类型</value>
        [DataMember(Name = "price_type", EmitDefaultValue = false)]
        public string PriceType { get; set; }

        /// <summary>
        /// 价值。单位为元。支持两位小数
        /// </summary>
        /// <value>价值。单位为元。支持两位小数</value>
        [DataMember(Name = "worth", EmitDefaultValue = false)]
        public string Worth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaidOuterCardPriceDetailDTO {\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  Worth: ").Append(Worth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaidOuterCardPriceDetailDTO);
        }

        /// <summary>
        /// Returns true if PaidOuterCardPriceDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PaidOuterCardPriceDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaidOuterCardPriceDetailDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PriceType == input.PriceType ||
                    (this.PriceType != null &&
                    this.PriceType.Equals(input.PriceType))
                ) && 
                (
                    this.Worth == input.Worth ||
                    (this.Worth != null &&
                    this.Worth.Equals(input.Worth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Desc != null)
                {
                    hashCode = (hashCode * 59) + this.Desc.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.PriceType != null)
                {
                    hashCode = (hashCode * 59) + this.PriceType.GetHashCode();
                }
                if (this.Worth != null)
                {
                    hashCode = (hashCode * 59) + this.Worth.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
