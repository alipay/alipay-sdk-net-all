/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// JinyouTestTwo
    /// </summary>
    [DataContract(Name = "JinyouTestTwo")]
    public partial class JinyouTestTwo : IEquatable<JinyouTestTwo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JinyouTestTwo" /> class.
        /// </summary>
        /// <param name="t1Openid">1.</param>
        /// <param name="t1Y">1.</param>
        /// <param name="t2F">t2F.</param>
        /// <param name="t3N">1.</param>
        public JinyouTestTwo(string t1Openid = default(string), string t1Y = default(string), JinyouTestOne t2F = default(JinyouTestOne), string t3N = default(string))
        {
            this.T1Openid = t1Openid;
            this.T1Y = t1Y;
            this.T2F = t2F;
            this.T3N = t3N;
        }

        /// <summary>
        /// 1
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "t_1_openid", EmitDefaultValue = false)]
        public string T1Openid { get; set; }

        /// <summary>
        /// 1
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "t_1_y", EmitDefaultValue = false)]
        public string T1Y { get; set; }

        /// <summary>
        /// Gets or Sets T2F
        /// </summary>
        [DataMember(Name = "t_2_f", EmitDefaultValue = false)]
        public JinyouTestOne T2F { get; set; }

        /// <summary>
        /// 1
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "t_3_n", EmitDefaultValue = false)]
        public string T3N { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JinyouTestTwo {\n");
            sb.Append("  T1Openid: ").Append(T1Openid).Append("\n");
            sb.Append("  T1Y: ").Append(T1Y).Append("\n");
            sb.Append("  T2F: ").Append(T2F).Append("\n");
            sb.Append("  T3N: ").Append(T3N).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JinyouTestTwo);
        }

        /// <summary>
        /// Returns true if JinyouTestTwo instances are equal
        /// </summary>
        /// <param name="input">Instance of JinyouTestTwo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JinyouTestTwo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.T1Openid == input.T1Openid ||
                    (this.T1Openid != null &&
                    this.T1Openid.Equals(input.T1Openid))
                ) && 
                (
                    this.T1Y == input.T1Y ||
                    (this.T1Y != null &&
                    this.T1Y.Equals(input.T1Y))
                ) && 
                (
                    this.T2F == input.T2F ||
                    (this.T2F != null &&
                    this.T2F.Equals(input.T2F))
                ) && 
                (
                    this.T3N == input.T3N ||
                    (this.T3N != null &&
                    this.T3N.Equals(input.T3N))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.T1Openid != null)
                {
                    hashCode = (hashCode * 59) + this.T1Openid.GetHashCode();
                }
                if (this.T1Y != null)
                {
                    hashCode = (hashCode * 59) + this.T1Y.GetHashCode();
                }
                if (this.T2F != null)
                {
                    hashCode = (hashCode * 59) + this.T2F.GetHashCode();
                }
                if (this.T3N != null)
                {
                    hashCode = (hashCode * 59) + this.T3N.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
