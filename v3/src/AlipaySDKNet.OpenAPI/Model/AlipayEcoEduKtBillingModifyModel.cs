/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEcoEduKtBillingModifyModel
    /// </summary>
    [DataContract(Name = "AlipayEcoEduKtBillingModifyModel")]
    public partial class AlipayEcoEduKtBillingModifyModel : IEquatable<AlipayEcoEduKtBillingModifyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEcoEduKtBillingModifyModel" /> class.
        /// </summary>
        /// <param name="bankSuccess">成功Y，失败N.</param>
        /// <param name="buyerLogonId">退款时，支付宝返回的用户的登录id.</param>
        /// <param name="buyerUserId">支付宝返回的买家支付宝用户id.</param>
        /// <param name="buyerUserOpenId">支付宝返回的买家支付宝用户id加密后信息.</param>
        /// <param name="fundChange">本次退款是否发生了资金变化.</param>
        /// <param name="gmtRefund">支付宝返回的退款时间，而不是商户退款申请的时间.</param>
        /// <param name="outRequestNo">标识一次退款请求，同一笔交易多次退款需要保证唯一，如需部分退款，则此参数必传。（若退款时填写，则同步退款状态时也必须填写）.</param>
        /// <param name="outTradeNo">isv系统的订单号.</param>
        /// <param name="refundAmount">需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数.</param>
        /// <param name="refundDetailItemList">支付宝返回的退款资金渠道，json格式字符串.</param>
        /// <param name="refundReason">退款原因，商家根据客户实际退款原因填写（若退款时填写，则同步退款状态时也必须填写）.</param>
        /// <param name="status">状态：1:缴费成功，2:关闭账单，3、退费  如果为退款状态，需要填写fund_change,   refund_amount, refund_reason,  out_request_no, buyer_logon_id,  gmt_refund,  buyer_user_id, refund_detail_item_list;  4、同步网商返回的状态,如果是网商银行的账单，bank_success这个字段必填.</param>
        /// <param name="tradeNo">支付宝返回的交易号.</param>
        public AlipayEcoEduKtBillingModifyModel(string bankSuccess = default(string), string buyerLogonId = default(string), string buyerUserId = default(string), string buyerUserOpenId = default(string), string fundChange = default(string), string gmtRefund = default(string), string outRequestNo = default(string), string outTradeNo = default(string), string refundAmount = default(string), string refundDetailItemList = default(string), string refundReason = default(string), string status = default(string), string tradeNo = default(string))
        {
            this.BankSuccess = bankSuccess;
            this.BuyerLogonId = buyerLogonId;
            this.BuyerUserId = buyerUserId;
            this.BuyerUserOpenId = buyerUserOpenId;
            this.FundChange = fundChange;
            this.GmtRefund = gmtRefund;
            this.OutRequestNo = outRequestNo;
            this.OutTradeNo = outTradeNo;
            this.RefundAmount = refundAmount;
            this.RefundDetailItemList = refundDetailItemList;
            this.RefundReason = refundReason;
            this.Status = status;
            this.TradeNo = tradeNo;
        }

        /// <summary>
        /// 成功Y，失败N
        /// </summary>
        /// <value>成功Y，失败N</value>
        [DataMember(Name = "bank_success", EmitDefaultValue = false)]
        public string BankSuccess { get; set; }

        /// <summary>
        /// 退款时，支付宝返回的用户的登录id
        /// </summary>
        /// <value>退款时，支付宝返回的用户的登录id</value>
        [DataMember(Name = "buyer_logon_id", EmitDefaultValue = false)]
        public string BuyerLogonId { get; set; }

        /// <summary>
        /// 支付宝返回的买家支付宝用户id
        /// </summary>
        /// <value>支付宝返回的买家支付宝用户id</value>
        [DataMember(Name = "buyer_user_id", EmitDefaultValue = false)]
        public string BuyerUserId { get; set; }

        /// <summary>
        /// 支付宝返回的买家支付宝用户id加密后信息
        /// </summary>
        /// <value>支付宝返回的买家支付宝用户id加密后信息</value>
        [DataMember(Name = "buyer_user_open_id", EmitDefaultValue = false)]
        public string BuyerUserOpenId { get; set; }

        /// <summary>
        /// 本次退款是否发生了资金变化
        /// </summary>
        /// <value>本次退款是否发生了资金变化</value>
        [DataMember(Name = "fund_change", EmitDefaultValue = false)]
        public string FundChange { get; set; }

        /// <summary>
        /// 支付宝返回的退款时间，而不是商户退款申请的时间
        /// </summary>
        /// <value>支付宝返回的退款时间，而不是商户退款申请的时间</value>
        [DataMember(Name = "gmt_refund", EmitDefaultValue = false)]
        public string GmtRefund { get; set; }

        /// <summary>
        /// 标识一次退款请求，同一笔交易多次退款需要保证唯一，如需部分退款，则此参数必传。（若退款时填写，则同步退款状态时也必须填写）
        /// </summary>
        /// <value>标识一次退款请求，同一笔交易多次退款需要保证唯一，如需部分退款，则此参数必传。（若退款时填写，则同步退款状态时也必须填写）</value>
        [DataMember(Name = "out_request_no", EmitDefaultValue = false)]
        public string OutRequestNo { get; set; }

        /// <summary>
        /// isv系统的订单号
        /// </summary>
        /// <value>isv系统的订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数
        /// </summary>
        /// <value>需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数</value>
        [DataMember(Name = "refund_amount", EmitDefaultValue = false)]
        public string RefundAmount { get; set; }

        /// <summary>
        /// 支付宝返回的退款资金渠道，json格式字符串
        /// </summary>
        /// <value>支付宝返回的退款资金渠道，json格式字符串</value>
        [DataMember(Name = "refund_detail_item_list", EmitDefaultValue = false)]
        public string RefundDetailItemList { get; set; }

        /// <summary>
        /// 退款原因，商家根据客户实际退款原因填写（若退款时填写，则同步退款状态时也必须填写）
        /// </summary>
        /// <value>退款原因，商家根据客户实际退款原因填写（若退款时填写，则同步退款状态时也必须填写）</value>
        [DataMember(Name = "refund_reason", EmitDefaultValue = false)]
        public string RefundReason { get; set; }

        /// <summary>
        /// 状态：1:缴费成功，2:关闭账单，3、退费  如果为退款状态，需要填写fund_change,   refund_amount, refund_reason,  out_request_no, buyer_logon_id,  gmt_refund,  buyer_user_id, refund_detail_item_list;  4、同步网商返回的状态,如果是网商银行的账单，bank_success这个字段必填
        /// </summary>
        /// <value>状态：1:缴费成功，2:关闭账单，3、退费  如果为退款状态，需要填写fund_change,   refund_amount, refund_reason,  out_request_no, buyer_logon_id,  gmt_refund,  buyer_user_id, refund_detail_item_list;  4、同步网商返回的状态,如果是网商银行的账单，bank_success这个字段必填</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 支付宝返回的交易号
        /// </summary>
        /// <value>支付宝返回的交易号</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEcoEduKtBillingModifyModel {\n");
            sb.Append("  BankSuccess: ").Append(BankSuccess).Append("\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  BuyerUserOpenId: ").Append(BuyerUserOpenId).Append("\n");
            sb.Append("  FundChange: ").Append(FundChange).Append("\n");
            sb.Append("  GmtRefund: ").Append(GmtRefund).Append("\n");
            sb.Append("  OutRequestNo: ").Append(OutRequestNo).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  RefundDetailItemList: ").Append(RefundDetailItemList).Append("\n");
            sb.Append("  RefundReason: ").Append(RefundReason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEcoEduKtBillingModifyModel);
        }

        /// <summary>
        /// Returns true if AlipayEcoEduKtBillingModifyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEcoEduKtBillingModifyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEcoEduKtBillingModifyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankSuccess == input.BankSuccess ||
                    (this.BankSuccess != null &&
                    this.BankSuccess.Equals(input.BankSuccess))
                ) && 
                (
                    this.BuyerLogonId == input.BuyerLogonId ||
                    (this.BuyerLogonId != null &&
                    this.BuyerLogonId.Equals(input.BuyerLogonId))
                ) && 
                (
                    this.BuyerUserId == input.BuyerUserId ||
                    (this.BuyerUserId != null &&
                    this.BuyerUserId.Equals(input.BuyerUserId))
                ) && 
                (
                    this.BuyerUserOpenId == input.BuyerUserOpenId ||
                    (this.BuyerUserOpenId != null &&
                    this.BuyerUserOpenId.Equals(input.BuyerUserOpenId))
                ) && 
                (
                    this.FundChange == input.FundChange ||
                    (this.FundChange != null &&
                    this.FundChange.Equals(input.FundChange))
                ) && 
                (
                    this.GmtRefund == input.GmtRefund ||
                    (this.GmtRefund != null &&
                    this.GmtRefund.Equals(input.GmtRefund))
                ) && 
                (
                    this.OutRequestNo == input.OutRequestNo ||
                    (this.OutRequestNo != null &&
                    this.OutRequestNo.Equals(input.OutRequestNo))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.RefundDetailItemList == input.RefundDetailItemList ||
                    (this.RefundDetailItemList != null &&
                    this.RefundDetailItemList.Equals(input.RefundDetailItemList))
                ) && 
                (
                    this.RefundReason == input.RefundReason ||
                    (this.RefundReason != null &&
                    this.RefundReason.Equals(input.RefundReason))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankSuccess != null)
                {
                    hashCode = (hashCode * 59) + this.BankSuccess.GetHashCode();
                }
                if (this.BuyerLogonId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerLogonId.GetHashCode();
                }
                if (this.BuyerUserId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserId.GetHashCode();
                }
                if (this.BuyerUserOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserOpenId.GetHashCode();
                }
                if (this.FundChange != null)
                {
                    hashCode = (hashCode * 59) + this.FundChange.GetHashCode();
                }
                if (this.GmtRefund != null)
                {
                    hashCode = (hashCode * 59) + this.GmtRefund.GetHashCode();
                }
                if (this.OutRequestNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutRequestNo.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.RefundAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                }
                if (this.RefundDetailItemList != null)
                {
                    hashCode = (hashCode * 59) + this.RefundDetailItemList.GetHashCode();
                }
                if (this.RefundReason != null)
                {
                    hashCode = (hashCode * 59) + this.RefundReason.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
