/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEbppInvoiceApplyInvUploadModel
    /// </summary>
    [DataContract(Name = "AlipayEbppInvoiceApplyInvUploadModel")]
    public partial class AlipayEbppInvoiceApplyInvUploadModel : IEquatable<AlipayEbppInvoiceApplyInvUploadModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEbppInvoiceApplyInvUploadModel" /> class.
        /// </summary>
        /// <param name="antiFakeCode">发票防伪码/密码.</param>
        /// <param name="applyId">发票申请ID, 由阿里发票平台生成。 拆单开票后一笔申请可能对应多张发票。 source&#x3D;apply时必填，其他source可为空.</param>
        /// <param name="bizErrorCode">开票失败错误码， 开票失败(create_result&#x3D;fail)时必填.</param>
        /// <param name="bizErrorMsg">开票失败错误信息， 开票失败(create_result&#x3D;fail)时必填.</param>
        /// <param name="businessType">抬头类型。可选值： 0：个人 1：企业.</param>
        /// <param name="checkCode">校验码.</param>
        /// <param name="createResult">开票结果，枚举值： success: 发票开具成功； fail: 开票失败； source&#x3D;async时必填，传实际的开票结果。其他source可不传，默认为success.</param>
        /// <param name="deviceNo">开票分机号/机器编号.</param>
        /// <param name="invoiceAmount">合计含税金额（开票金额），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceCode">发票代码。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceDate">开票日期，格式 yyyy-MM-dd. 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceFileContent">发票版式文件数据，base64化的字符串； 电子发票必填.</param>
        /// <param name="invoiceFileType">发票板式文件类型。可选值： PDF, OFD。 开电票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceItems">invoiceItems.</param>
        /// <param name="invoiceKind">开票发票类型 可选值： 0: 电票； 1：纸质普票； 2：纸质专票； 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceMemo">发票备注，会显示在票面.</param>
        /// <param name="invoiceNo">发票号码。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="invoiceType">发票(开票)类型，可选值： blue: 蓝票； red: 红票； 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="levyType">征税方式，0普通征收，1减按征收，2差额征收.</param>
        /// <param name="normalInvoiceCode">原发票代码。 冲红且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="normalInvoiceNo">原发票号码。 冲红且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payeeAddress">销方地址。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payeeBankAccountId">销方银行账号.</param>
        /// <param name="payeeBankName">销方开户行名称.</param>
        /// <param name="payeeChecker">复核人.</param>
        /// <param name="payeeName">销方名称。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payeeOperator">开票人。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payeePhone">销方联系电话。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payeeReceiver">收款人.</param>
        /// <param name="payeeRegisterNo">销方税务登记证号。由大写字母或数字组成，长度要求15~20位。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerAddress">购方地址， 专票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerBankAccountId">购方银行账号， 专票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerBankName">购方开户行名称， 专票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerEmail">购方电子邮箱，需满足邮箱格式。 格式要求：\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*.</param>
        /// <param name="payerName">购方抬头。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerPhone">购方联系电话， 专票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="payerRegisterNo">购方税务登记证号，由大写字母或数字组成，长度要求15~20位。 开企业抬头时必填， 专票且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="platformCode">业务平台Code, 由发票中台分配。 用于标识需交付发票的业务平台，source&#x3D;upload时必填，其他source可为空.</param>
        /// <param name="platformTid">业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空.</param>
        /// <param name="platformUserId">业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空.</param>
        /// <param name="qrCode">二维码.</param>
        /// <param name="receiveMobile">购方手机号码，用于收票.</param>
        /// <param name="redNoticeNo">红字通知单号； 专票冲红且开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="serialNo">开票流水号/序列号，唯一标志一笔开票请求，由于阿里发票中台生成。 source&#x3D;async时必填，其他source可为空.</param>
        /// <param name="source">发票来源，可选值： apply: 间连开票模式，ISV回传商家基于申请开具的发票； async：直连开票模式，ISV回传开票结果； upload：直接回传，进行归集与交付的发票.</param>
        /// <param name="specialFlag">特殊票种标识，可选值： “00”非特殊票种 （默认值） “02”农产品收购 “06”抵扣通行费 “07”其它通行费 “08”成品油销售 “18”成品油专票负数发票.</param>
        /// <param name="sumPrice">合计金额（不含税），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填.</param>
        /// <param name="sumTax">合计税额，格式为2位小数。 当开红票时，该字段为0或负数。 开票成功时(create_result&#x3D;success)必填.</param>
        public AlipayEbppInvoiceApplyInvUploadModel(string antiFakeCode = default(string), string applyId = default(string), string bizErrorCode = default(string), string bizErrorMsg = default(string), int businessType = default(int), string checkCode = default(string), string createResult = default(string), string deviceNo = default(string), string invoiceAmount = default(string), string invoiceCode = default(string), string invoiceDate = default(string), string invoiceFileContent = default(string), string invoiceFileType = default(string), InvoiceItem invoiceItems = default(InvoiceItem), int invoiceKind = default(int), string invoiceMemo = default(string), string invoiceNo = default(string), string invoiceType = default(string), string levyType = default(string), string normalInvoiceCode = default(string), string normalInvoiceNo = default(string), string payeeAddress = default(string), string payeeBankAccountId = default(string), string payeeBankName = default(string), string payeeChecker = default(string), string payeeName = default(string), string payeeOperator = default(string), string payeePhone = default(string), string payeeReceiver = default(string), string payeeRegisterNo = default(string), string payerAddress = default(string), string payerBankAccountId = default(string), string payerBankName = default(string), string payerEmail = default(string), string payerName = default(string), string payerPhone = default(string), string payerRegisterNo = default(string), string platformCode = default(string), string platformTid = default(string), string platformUserId = default(string), string qrCode = default(string), string receiveMobile = default(string), string redNoticeNo = default(string), string serialNo = default(string), string source = default(string), string specialFlag = default(string), string sumPrice = default(string), string sumTax = default(string))
        {
            this.AntiFakeCode = antiFakeCode;
            this.ApplyId = applyId;
            this.BizErrorCode = bizErrorCode;
            this.BizErrorMsg = bizErrorMsg;
            this.BusinessType = businessType;
            this.CheckCode = checkCode;
            this.CreateResult = createResult;
            this.DeviceNo = deviceNo;
            this.InvoiceAmount = invoiceAmount;
            this.InvoiceCode = invoiceCode;
            this.InvoiceDate = invoiceDate;
            this.InvoiceFileContent = invoiceFileContent;
            this.InvoiceFileType = invoiceFileType;
            this.InvoiceItems = invoiceItems;
            this.InvoiceKind = invoiceKind;
            this.InvoiceMemo = invoiceMemo;
            this.InvoiceNo = invoiceNo;
            this.InvoiceType = invoiceType;
            this.LevyType = levyType;
            this.NormalInvoiceCode = normalInvoiceCode;
            this.NormalInvoiceNo = normalInvoiceNo;
            this.PayeeAddress = payeeAddress;
            this.PayeeBankAccountId = payeeBankAccountId;
            this.PayeeBankName = payeeBankName;
            this.PayeeChecker = payeeChecker;
            this.PayeeName = payeeName;
            this.PayeeOperator = payeeOperator;
            this.PayeePhone = payeePhone;
            this.PayeeReceiver = payeeReceiver;
            this.PayeeRegisterNo = payeeRegisterNo;
            this.PayerAddress = payerAddress;
            this.PayerBankAccountId = payerBankAccountId;
            this.PayerBankName = payerBankName;
            this.PayerEmail = payerEmail;
            this.PayerName = payerName;
            this.PayerPhone = payerPhone;
            this.PayerRegisterNo = payerRegisterNo;
            this.PlatformCode = platformCode;
            this.PlatformTid = platformTid;
            this.PlatformUserId = platformUserId;
            this.QrCode = qrCode;
            this.ReceiveMobile = receiveMobile;
            this.RedNoticeNo = redNoticeNo;
            this.SerialNo = serialNo;
            this.Source = source;
            this.SpecialFlag = specialFlag;
            this.SumPrice = sumPrice;
            this.SumTax = sumTax;
        }

        /// <summary>
        /// 发票防伪码/密码
        /// </summary>
        /// <value>发票防伪码/密码</value>
        [DataMember(Name = "anti_fake_code", EmitDefaultValue = false)]
        public string AntiFakeCode { get; set; }

        /// <summary>
        /// 发票申请ID, 由阿里发票平台生成。 拆单开票后一笔申请可能对应多张发票。 source&#x3D;apply时必填，其他source可为空
        /// </summary>
        /// <value>发票申请ID, 由阿里发票平台生成。 拆单开票后一笔申请可能对应多张发票。 source&#x3D;apply时必填，其他source可为空</value>
        [DataMember(Name = "apply_id", EmitDefaultValue = false)]
        public string ApplyId { get; set; }

        /// <summary>
        /// 开票失败错误码， 开票失败(create_result&#x3D;fail)时必填
        /// </summary>
        /// <value>开票失败错误码， 开票失败(create_result&#x3D;fail)时必填</value>
        [DataMember(Name = "biz_error_code", EmitDefaultValue = false)]
        public string BizErrorCode { get; set; }

        /// <summary>
        /// 开票失败错误信息， 开票失败(create_result&#x3D;fail)时必填
        /// </summary>
        /// <value>开票失败错误信息， 开票失败(create_result&#x3D;fail)时必填</value>
        [DataMember(Name = "biz_error_msg", EmitDefaultValue = false)]
        public string BizErrorMsg { get; set; }

        /// <summary>
        /// 抬头类型。可选值： 0：个人 1：企业
        /// </summary>
        /// <value>抬头类型。可选值： 0：个人 1：企业</value>
        [DataMember(Name = "business_type", EmitDefaultValue = false)]
        public int BusinessType { get; set; }

        /// <summary>
        /// 校验码
        /// </summary>
        /// <value>校验码</value>
        [DataMember(Name = "check_code", EmitDefaultValue = false)]
        public string CheckCode { get; set; }

        /// <summary>
        /// 开票结果，枚举值： success: 发票开具成功； fail: 开票失败； source&#x3D;async时必填，传实际的开票结果。其他source可不传，默认为success
        /// </summary>
        /// <value>开票结果，枚举值： success: 发票开具成功； fail: 开票失败； source&#x3D;async时必填，传实际的开票结果。其他source可不传，默认为success</value>
        [DataMember(Name = "create_result", EmitDefaultValue = false)]
        public string CreateResult { get; set; }

        /// <summary>
        /// 开票分机号/机器编号
        /// </summary>
        /// <value>开票分机号/机器编号</value>
        [DataMember(Name = "device_no", EmitDefaultValue = false)]
        public string DeviceNo { get; set; }

        /// <summary>
        /// 合计含税金额（开票金额），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>合计含税金额（开票金额），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_amount", EmitDefaultValue = false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// 发票代码。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>发票代码。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_code", EmitDefaultValue = false)]
        public string InvoiceCode { get; set; }

        /// <summary>
        /// 开票日期，格式 yyyy-MM-dd. 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>开票日期，格式 yyyy-MM-dd. 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_date", EmitDefaultValue = false)]
        public string InvoiceDate { get; set; }

        /// <summary>
        /// 发票版式文件数据，base64化的字符串； 电子发票必填
        /// </summary>
        /// <value>发票版式文件数据，base64化的字符串； 电子发票必填</value>
        [DataMember(Name = "invoice_file_content", EmitDefaultValue = false)]
        public string InvoiceFileContent { get; set; }

        /// <summary>
        /// 发票板式文件类型。可选值： PDF, OFD。 开电票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>发票板式文件类型。可选值： PDF, OFD。 开电票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_file_type", EmitDefaultValue = false)]
        public string InvoiceFileType { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceItems
        /// </summary>
        [DataMember(Name = "invoice_items", EmitDefaultValue = false)]
        public InvoiceItem InvoiceItems { get; set; }

        /// <summary>
        /// 开票发票类型 可选值： 0: 电票； 1：纸质普票； 2：纸质专票； 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>开票发票类型 可选值： 0: 电票； 1：纸质普票； 2：纸质专票； 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_kind", EmitDefaultValue = false)]
        public int InvoiceKind { get; set; }

        /// <summary>
        /// 发票备注，会显示在票面
        /// </summary>
        /// <value>发票备注，会显示在票面</value>
        [DataMember(Name = "invoice_memo", EmitDefaultValue = false)]
        public string InvoiceMemo { get; set; }

        /// <summary>
        /// 发票号码。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>发票号码。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_no", EmitDefaultValue = false)]
        public string InvoiceNo { get; set; }

        /// <summary>
        /// 发票(开票)类型，可选值： blue: 蓝票； red: 红票； 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>发票(开票)类型，可选值： blue: 蓝票； red: 红票； 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "invoice_type", EmitDefaultValue = false)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// 征税方式，0普通征收，1减按征收，2差额征收
        /// </summary>
        /// <value>征税方式，0普通征收，1减按征收，2差额征收</value>
        [DataMember(Name = "levy_type", EmitDefaultValue = false)]
        public string LevyType { get; set; }

        /// <summary>
        /// 原发票代码。 冲红且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>原发票代码。 冲红且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "normal_invoice_code", EmitDefaultValue = false)]
        public string NormalInvoiceCode { get; set; }

        /// <summary>
        /// 原发票号码。 冲红且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>原发票号码。 冲红且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "normal_invoice_no", EmitDefaultValue = false)]
        public string NormalInvoiceNo { get; set; }

        /// <summary>
        /// 销方地址。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>销方地址。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payee_address", EmitDefaultValue = false)]
        public string PayeeAddress { get; set; }

        /// <summary>
        /// 销方银行账号
        /// </summary>
        /// <value>销方银行账号</value>
        [DataMember(Name = "payee_bank_account_id", EmitDefaultValue = false)]
        public string PayeeBankAccountId { get; set; }

        /// <summary>
        /// 销方开户行名称
        /// </summary>
        /// <value>销方开户行名称</value>
        [DataMember(Name = "payee_bank_name", EmitDefaultValue = false)]
        public string PayeeBankName { get; set; }

        /// <summary>
        /// 复核人
        /// </summary>
        /// <value>复核人</value>
        [DataMember(Name = "payee_checker", EmitDefaultValue = false)]
        public string PayeeChecker { get; set; }

        /// <summary>
        /// 销方名称。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>销方名称。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payee_name", EmitDefaultValue = false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// 开票人。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>开票人。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payee_operator", EmitDefaultValue = false)]
        public string PayeeOperator { get; set; }

        /// <summary>
        /// 销方联系电话。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>销方联系电话。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payee_phone", EmitDefaultValue = false)]
        public string PayeePhone { get; set; }

        /// <summary>
        /// 收款人
        /// </summary>
        /// <value>收款人</value>
        [DataMember(Name = "payee_receiver", EmitDefaultValue = false)]
        public string PayeeReceiver { get; set; }

        /// <summary>
        /// 销方税务登记证号。由大写字母或数字组成，长度要求15~20位。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>销方税务登记证号。由大写字母或数字组成，长度要求15~20位。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payee_register_no", EmitDefaultValue = false)]
        public string PayeeRegisterNo { get; set; }

        /// <summary>
        /// 购方地址， 专票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方地址， 专票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_address", EmitDefaultValue = false)]
        public string PayerAddress { get; set; }

        /// <summary>
        /// 购方银行账号， 专票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方银行账号， 专票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_bank_account_id", EmitDefaultValue = false)]
        public string PayerBankAccountId { get; set; }

        /// <summary>
        /// 购方开户行名称， 专票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方开户行名称， 专票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_bank_name", EmitDefaultValue = false)]
        public string PayerBankName { get; set; }

        /// <summary>
        /// 购方电子邮箱，需满足邮箱格式。 格式要求：\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*
        /// </summary>
        /// <value>购方电子邮箱，需满足邮箱格式。 格式要求：\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*</value>
        [DataMember(Name = "payer_email", EmitDefaultValue = false)]
        public string PayerEmail { get; set; }

        /// <summary>
        /// 购方抬头。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方抬头。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_name", EmitDefaultValue = false)]
        public string PayerName { get; set; }

        /// <summary>
        /// 购方联系电话， 专票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方联系电话， 专票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_phone", EmitDefaultValue = false)]
        public string PayerPhone { get; set; }

        /// <summary>
        /// 购方税务登记证号，由大写字母或数字组成，长度要求15~20位。 开企业抬头时必填， 专票且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>购方税务登记证号，由大写字母或数字组成，长度要求15~20位。 开企业抬头时必填， 专票且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "payer_register_no", EmitDefaultValue = false)]
        public string PayerRegisterNo { get; set; }

        /// <summary>
        /// 业务平台Code, 由发票中台分配。 用于标识需交付发票的业务平台，source&#x3D;upload时必填，其他source可为空
        /// </summary>
        /// <value>业务平台Code, 由发票中台分配。 用于标识需交付发票的业务平台，source&#x3D;upload时必填，其他source可为空</value>
        [DataMember(Name = "platform_code", EmitDefaultValue = false)]
        public string PlatformCode { get; set; }

        /// <summary>
        /// 业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空
        /// </summary>
        /// <value>业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空</value>
        [DataMember(Name = "platform_tid", EmitDefaultValue = false)]
        public string PlatformTid { get; set; }

        /// <summary>
        /// 业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空
        /// </summary>
        /// <value>业务平台发票申请对应的订单号。 用于区分业务平台订单号，source&#x3D;upload时必填，其他source可为空</value>
        [DataMember(Name = "platform_user_id", EmitDefaultValue = false)]
        public string PlatformUserId { get; set; }

        /// <summary>
        /// 二维码
        /// </summary>
        /// <value>二维码</value>
        [DataMember(Name = "qr_code", EmitDefaultValue = false)]
        public string QrCode { get; set; }

        /// <summary>
        /// 购方手机号码，用于收票
        /// </summary>
        /// <value>购方手机号码，用于收票</value>
        [DataMember(Name = "receive_mobile", EmitDefaultValue = false)]
        public string ReceiveMobile { get; set; }

        /// <summary>
        /// 红字通知单号； 专票冲红且开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>红字通知单号； 专票冲红且开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "red_notice_no", EmitDefaultValue = false)]
        public string RedNoticeNo { get; set; }

        /// <summary>
        /// 开票流水号/序列号，唯一标志一笔开票请求，由于阿里发票中台生成。 source&#x3D;async时必填，其他source可为空
        /// </summary>
        /// <value>开票流水号/序列号，唯一标志一笔开票请求，由于阿里发票中台生成。 source&#x3D;async时必填，其他source可为空</value>
        [DataMember(Name = "serial_no", EmitDefaultValue = false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// 发票来源，可选值： apply: 间连开票模式，ISV回传商家基于申请开具的发票； async：直连开票模式，ISV回传开票结果； upload：直接回传，进行归集与交付的发票
        /// </summary>
        /// <value>发票来源，可选值： apply: 间连开票模式，ISV回传商家基于申请开具的发票； async：直连开票模式，ISV回传开票结果； upload：直接回传，进行归集与交付的发票</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// 特殊票种标识，可选值： “00”非特殊票种 （默认值） “02”农产品收购 “06”抵扣通行费 “07”其它通行费 “08”成品油销售 “18”成品油专票负数发票
        /// </summary>
        /// <value>特殊票种标识，可选值： “00”非特殊票种 （默认值） “02”农产品收购 “06”抵扣通行费 “07”其它通行费 “08”成品油销售 “18”成品油专票负数发票</value>
        [DataMember(Name = "special_flag", EmitDefaultValue = false)]
        public string SpecialFlag { get; set; }

        /// <summary>
        /// 合计金额（不含税），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>合计金额（不含税），格式为2位小数。 当开红票时，该字段为负数。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "sum_price", EmitDefaultValue = false)]
        public string SumPrice { get; set; }

        /// <summary>
        /// 合计税额，格式为2位小数。 当开红票时，该字段为0或负数。 开票成功时(create_result&#x3D;success)必填
        /// </summary>
        /// <value>合计税额，格式为2位小数。 当开红票时，该字段为0或负数。 开票成功时(create_result&#x3D;success)必填</value>
        [DataMember(Name = "sum_tax", EmitDefaultValue = false)]
        public string SumTax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEbppInvoiceApplyInvUploadModel {\n");
            sb.Append("  AntiFakeCode: ").Append(AntiFakeCode).Append("\n");
            sb.Append("  ApplyId: ").Append(ApplyId).Append("\n");
            sb.Append("  BizErrorCode: ").Append(BizErrorCode).Append("\n");
            sb.Append("  BizErrorMsg: ").Append(BizErrorMsg).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  CheckCode: ").Append(CheckCode).Append("\n");
            sb.Append("  CreateResult: ").Append(CreateResult).Append("\n");
            sb.Append("  DeviceNo: ").Append(DeviceNo).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  InvoiceCode: ").Append(InvoiceCode).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceFileContent: ").Append(InvoiceFileContent).Append("\n");
            sb.Append("  InvoiceFileType: ").Append(InvoiceFileType).Append("\n");
            sb.Append("  InvoiceItems: ").Append(InvoiceItems).Append("\n");
            sb.Append("  InvoiceKind: ").Append(InvoiceKind).Append("\n");
            sb.Append("  InvoiceMemo: ").Append(InvoiceMemo).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  LevyType: ").Append(LevyType).Append("\n");
            sb.Append("  NormalInvoiceCode: ").Append(NormalInvoiceCode).Append("\n");
            sb.Append("  NormalInvoiceNo: ").Append(NormalInvoiceNo).Append("\n");
            sb.Append("  PayeeAddress: ").Append(PayeeAddress).Append("\n");
            sb.Append("  PayeeBankAccountId: ").Append(PayeeBankAccountId).Append("\n");
            sb.Append("  PayeeBankName: ").Append(PayeeBankName).Append("\n");
            sb.Append("  PayeeChecker: ").Append(PayeeChecker).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PayeeOperator: ").Append(PayeeOperator).Append("\n");
            sb.Append("  PayeePhone: ").Append(PayeePhone).Append("\n");
            sb.Append("  PayeeReceiver: ").Append(PayeeReceiver).Append("\n");
            sb.Append("  PayeeRegisterNo: ").Append(PayeeRegisterNo).Append("\n");
            sb.Append("  PayerAddress: ").Append(PayerAddress).Append("\n");
            sb.Append("  PayerBankAccountId: ").Append(PayerBankAccountId).Append("\n");
            sb.Append("  PayerBankName: ").Append(PayerBankName).Append("\n");
            sb.Append("  PayerEmail: ").Append(PayerEmail).Append("\n");
            sb.Append("  PayerName: ").Append(PayerName).Append("\n");
            sb.Append("  PayerPhone: ").Append(PayerPhone).Append("\n");
            sb.Append("  PayerRegisterNo: ").Append(PayerRegisterNo).Append("\n");
            sb.Append("  PlatformCode: ").Append(PlatformCode).Append("\n");
            sb.Append("  PlatformTid: ").Append(PlatformTid).Append("\n");
            sb.Append("  PlatformUserId: ").Append(PlatformUserId).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("  ReceiveMobile: ").Append(ReceiveMobile).Append("\n");
            sb.Append("  RedNoticeNo: ").Append(RedNoticeNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SpecialFlag: ").Append(SpecialFlag).Append("\n");
            sb.Append("  SumPrice: ").Append(SumPrice).Append("\n");
            sb.Append("  SumTax: ").Append(SumTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEbppInvoiceApplyInvUploadModel);
        }

        /// <summary>
        /// Returns true if AlipayEbppInvoiceApplyInvUploadModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEbppInvoiceApplyInvUploadModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEbppInvoiceApplyInvUploadModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AntiFakeCode == input.AntiFakeCode ||
                    (this.AntiFakeCode != null &&
                    this.AntiFakeCode.Equals(input.AntiFakeCode))
                ) && 
                (
                    this.ApplyId == input.ApplyId ||
                    (this.ApplyId != null &&
                    this.ApplyId.Equals(input.ApplyId))
                ) && 
                (
                    this.BizErrorCode == input.BizErrorCode ||
                    (this.BizErrorCode != null &&
                    this.BizErrorCode.Equals(input.BizErrorCode))
                ) && 
                (
                    this.BizErrorMsg == input.BizErrorMsg ||
                    (this.BizErrorMsg != null &&
                    this.BizErrorMsg.Equals(input.BizErrorMsg))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    this.BusinessType.Equals(input.BusinessType)
                ) && 
                (
                    this.CheckCode == input.CheckCode ||
                    (this.CheckCode != null &&
                    this.CheckCode.Equals(input.CheckCode))
                ) && 
                (
                    this.CreateResult == input.CreateResult ||
                    (this.CreateResult != null &&
                    this.CreateResult.Equals(input.CreateResult))
                ) && 
                (
                    this.DeviceNo == input.DeviceNo ||
                    (this.DeviceNo != null &&
                    this.DeviceNo.Equals(input.DeviceNo))
                ) && 
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) && 
                (
                    this.InvoiceCode == input.InvoiceCode ||
                    (this.InvoiceCode != null &&
                    this.InvoiceCode.Equals(input.InvoiceCode))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.InvoiceFileContent == input.InvoiceFileContent ||
                    (this.InvoiceFileContent != null &&
                    this.InvoiceFileContent.Equals(input.InvoiceFileContent))
                ) && 
                (
                    this.InvoiceFileType == input.InvoiceFileType ||
                    (this.InvoiceFileType != null &&
                    this.InvoiceFileType.Equals(input.InvoiceFileType))
                ) && 
                (
                    this.InvoiceItems == input.InvoiceItems ||
                    (this.InvoiceItems != null &&
                    this.InvoiceItems.Equals(input.InvoiceItems))
                ) && 
                (
                    this.InvoiceKind == input.InvoiceKind ||
                    this.InvoiceKind.Equals(input.InvoiceKind)
                ) && 
                (
                    this.InvoiceMemo == input.InvoiceMemo ||
                    (this.InvoiceMemo != null &&
                    this.InvoiceMemo.Equals(input.InvoiceMemo))
                ) && 
                (
                    this.InvoiceNo == input.InvoiceNo ||
                    (this.InvoiceNo != null &&
                    this.InvoiceNo.Equals(input.InvoiceNo))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) && 
                (
                    this.LevyType == input.LevyType ||
                    (this.LevyType != null &&
                    this.LevyType.Equals(input.LevyType))
                ) && 
                (
                    this.NormalInvoiceCode == input.NormalInvoiceCode ||
                    (this.NormalInvoiceCode != null &&
                    this.NormalInvoiceCode.Equals(input.NormalInvoiceCode))
                ) && 
                (
                    this.NormalInvoiceNo == input.NormalInvoiceNo ||
                    (this.NormalInvoiceNo != null &&
                    this.NormalInvoiceNo.Equals(input.NormalInvoiceNo))
                ) && 
                (
                    this.PayeeAddress == input.PayeeAddress ||
                    (this.PayeeAddress != null &&
                    this.PayeeAddress.Equals(input.PayeeAddress))
                ) && 
                (
                    this.PayeeBankAccountId == input.PayeeBankAccountId ||
                    (this.PayeeBankAccountId != null &&
                    this.PayeeBankAccountId.Equals(input.PayeeBankAccountId))
                ) && 
                (
                    this.PayeeBankName == input.PayeeBankName ||
                    (this.PayeeBankName != null &&
                    this.PayeeBankName.Equals(input.PayeeBankName))
                ) && 
                (
                    this.PayeeChecker == input.PayeeChecker ||
                    (this.PayeeChecker != null &&
                    this.PayeeChecker.Equals(input.PayeeChecker))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PayeeOperator == input.PayeeOperator ||
                    (this.PayeeOperator != null &&
                    this.PayeeOperator.Equals(input.PayeeOperator))
                ) && 
                (
                    this.PayeePhone == input.PayeePhone ||
                    (this.PayeePhone != null &&
                    this.PayeePhone.Equals(input.PayeePhone))
                ) && 
                (
                    this.PayeeReceiver == input.PayeeReceiver ||
                    (this.PayeeReceiver != null &&
                    this.PayeeReceiver.Equals(input.PayeeReceiver))
                ) && 
                (
                    this.PayeeRegisterNo == input.PayeeRegisterNo ||
                    (this.PayeeRegisterNo != null &&
                    this.PayeeRegisterNo.Equals(input.PayeeRegisterNo))
                ) && 
                (
                    this.PayerAddress == input.PayerAddress ||
                    (this.PayerAddress != null &&
                    this.PayerAddress.Equals(input.PayerAddress))
                ) && 
                (
                    this.PayerBankAccountId == input.PayerBankAccountId ||
                    (this.PayerBankAccountId != null &&
                    this.PayerBankAccountId.Equals(input.PayerBankAccountId))
                ) && 
                (
                    this.PayerBankName == input.PayerBankName ||
                    (this.PayerBankName != null &&
                    this.PayerBankName.Equals(input.PayerBankName))
                ) && 
                (
                    this.PayerEmail == input.PayerEmail ||
                    (this.PayerEmail != null &&
                    this.PayerEmail.Equals(input.PayerEmail))
                ) && 
                (
                    this.PayerName == input.PayerName ||
                    (this.PayerName != null &&
                    this.PayerName.Equals(input.PayerName))
                ) && 
                (
                    this.PayerPhone == input.PayerPhone ||
                    (this.PayerPhone != null &&
                    this.PayerPhone.Equals(input.PayerPhone))
                ) && 
                (
                    this.PayerRegisterNo == input.PayerRegisterNo ||
                    (this.PayerRegisterNo != null &&
                    this.PayerRegisterNo.Equals(input.PayerRegisterNo))
                ) && 
                (
                    this.PlatformCode == input.PlatformCode ||
                    (this.PlatformCode != null &&
                    this.PlatformCode.Equals(input.PlatformCode))
                ) && 
                (
                    this.PlatformTid == input.PlatformTid ||
                    (this.PlatformTid != null &&
                    this.PlatformTid.Equals(input.PlatformTid))
                ) && 
                (
                    this.PlatformUserId == input.PlatformUserId ||
                    (this.PlatformUserId != null &&
                    this.PlatformUserId.Equals(input.PlatformUserId))
                ) && 
                (
                    this.QrCode == input.QrCode ||
                    (this.QrCode != null &&
                    this.QrCode.Equals(input.QrCode))
                ) && 
                (
                    this.ReceiveMobile == input.ReceiveMobile ||
                    (this.ReceiveMobile != null &&
                    this.ReceiveMobile.Equals(input.ReceiveMobile))
                ) && 
                (
                    this.RedNoticeNo == input.RedNoticeNo ||
                    (this.RedNoticeNo != null &&
                    this.RedNoticeNo.Equals(input.RedNoticeNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SpecialFlag == input.SpecialFlag ||
                    (this.SpecialFlag != null &&
                    this.SpecialFlag.Equals(input.SpecialFlag))
                ) && 
                (
                    this.SumPrice == input.SumPrice ||
                    (this.SumPrice != null &&
                    this.SumPrice.Equals(input.SumPrice))
                ) && 
                (
                    this.SumTax == input.SumTax ||
                    (this.SumTax != null &&
                    this.SumTax.Equals(input.SumTax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AntiFakeCode != null)
                {
                    hashCode = (hashCode * 59) + this.AntiFakeCode.GetHashCode();
                }
                if (this.ApplyId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyId.GetHashCode();
                }
                if (this.BizErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.BizErrorCode.GetHashCode();
                }
                if (this.BizErrorMsg != null)
                {
                    hashCode = (hashCode * 59) + this.BizErrorMsg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BusinessType.GetHashCode();
                if (this.CheckCode != null)
                {
                    hashCode = (hashCode * 59) + this.CheckCode.GetHashCode();
                }
                if (this.CreateResult != null)
                {
                    hashCode = (hashCode * 59) + this.CreateResult.GetHashCode();
                }
                if (this.DeviceNo != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceNo.GetHashCode();
                }
                if (this.InvoiceAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceAmount.GetHashCode();
                }
                if (this.InvoiceCode != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceCode.GetHashCode();
                }
                if (this.InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                }
                if (this.InvoiceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceFileContent.GetHashCode();
                }
                if (this.InvoiceFileType != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceFileType.GetHashCode();
                }
                if (this.InvoiceItems != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceItems.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceKind.GetHashCode();
                if (this.InvoiceMemo != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceMemo.GetHashCode();
                }
                if (this.InvoiceNo != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNo.GetHashCode();
                }
                if (this.InvoiceType != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceType.GetHashCode();
                }
                if (this.LevyType != null)
                {
                    hashCode = (hashCode * 59) + this.LevyType.GetHashCode();
                }
                if (this.NormalInvoiceCode != null)
                {
                    hashCode = (hashCode * 59) + this.NormalInvoiceCode.GetHashCode();
                }
                if (this.NormalInvoiceNo != null)
                {
                    hashCode = (hashCode * 59) + this.NormalInvoiceNo.GetHashCode();
                }
                if (this.PayeeAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeAddress.GetHashCode();
                }
                if (this.PayeeBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeBankAccountId.GetHashCode();
                }
                if (this.PayeeBankName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeBankName.GetHashCode();
                }
                if (this.PayeeChecker != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeChecker.GetHashCode();
                }
                if (this.PayeeName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeName.GetHashCode();
                }
                if (this.PayeeOperator != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeOperator.GetHashCode();
                }
                if (this.PayeePhone != null)
                {
                    hashCode = (hashCode * 59) + this.PayeePhone.GetHashCode();
                }
                if (this.PayeeReceiver != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeReceiver.GetHashCode();
                }
                if (this.PayeeRegisterNo != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeRegisterNo.GetHashCode();
                }
                if (this.PayerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PayerAddress.GetHashCode();
                }
                if (this.PayerBankAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.PayerBankAccountId.GetHashCode();
                }
                if (this.PayerBankName != null)
                {
                    hashCode = (hashCode * 59) + this.PayerBankName.GetHashCode();
                }
                if (this.PayerEmail != null)
                {
                    hashCode = (hashCode * 59) + this.PayerEmail.GetHashCode();
                }
                if (this.PayerName != null)
                {
                    hashCode = (hashCode * 59) + this.PayerName.GetHashCode();
                }
                if (this.PayerPhone != null)
                {
                    hashCode = (hashCode * 59) + this.PayerPhone.GetHashCode();
                }
                if (this.PayerRegisterNo != null)
                {
                    hashCode = (hashCode * 59) + this.PayerRegisterNo.GetHashCode();
                }
                if (this.PlatformCode != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformCode.GetHashCode();
                }
                if (this.PlatformTid != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformTid.GetHashCode();
                }
                if (this.PlatformUserId != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformUserId.GetHashCode();
                }
                if (this.QrCode != null)
                {
                    hashCode = (hashCode * 59) + this.QrCode.GetHashCode();
                }
                if (this.ReceiveMobile != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiveMobile.GetHashCode();
                }
                if (this.RedNoticeNo != null)
                {
                    hashCode = (hashCode * 59) + this.RedNoticeNo.GetHashCode();
                }
                if (this.SerialNo != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNo.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.SpecialFlag != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialFlag.GetHashCode();
                }
                if (this.SumPrice != null)
                {
                    hashCode = (hashCode * 59) + this.SumPrice.GetHashCode();
                }
                if (this.SumTax != null)
                {
                    hashCode = (hashCode * 59) + this.SumTax.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
