/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PaymentVoucherDisplayInfo
    /// </summary>
    [DataContract(Name = "PaymentVoucherDisplayInfo")]
    public partial class PaymentVoucherDisplayInfo : IEquatable<PaymentVoucherDisplayInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentVoucherDisplayInfo" /> class.
        /// </summary>
        /// <param name="brandName">商户品牌名称。.</param>
        /// <param name="customerServiceMobile">商家客服电话，会展示在支付宝卡包券详情页。.</param>
        /// <param name="voucherDescription">用于说明详细的活动规则，会展示在支付宝卡包券详情页。.</param>
        /// <param name="voucherDetailImages">券详细图列表，会展示在用户支付宝卡包券详情页 需要通过 alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_DETAIL_IMAGE ,接口返回的resource_id即为该参数的值 上传图片尺寸600*600，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制 1.voucher_image填入，该值才能填入； 2.最多3张；.</param>
        /// <param name="voucherImage">券详情页封面图，会展示在用户支付宝卡包券详情页 需要通过  alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_IMAGE，接口返回的resource_id即为该参数的值  限制: 该字段在兑换券场景下必传 上传图片尺寸670*335，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制: 1.指定可核销商品(available_goods)时必传.</param>
        public PaymentVoucherDisplayInfo(string brandName = default(string), string customerServiceMobile = default(string), string voucherDescription = default(string), List<string> voucherDetailImages = default(List<string>), string voucherImage = default(string))
        {
            this.BrandName = brandName;
            this.CustomerServiceMobile = customerServiceMobile;
            this.VoucherDescription = voucherDescription;
            this.VoucherDetailImages = voucherDetailImages;
            this.VoucherImage = voucherImage;
        }

        /// <summary>
        /// 商户品牌名称。
        /// </summary>
        /// <value>商户品牌名称。</value>
        [DataMember(Name = "brand_name", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// 商家客服电话，会展示在支付宝卡包券详情页。
        /// </summary>
        /// <value>商家客服电话，会展示在支付宝卡包券详情页。</value>
        [DataMember(Name = "customer_service_mobile", EmitDefaultValue = false)]
        public string CustomerServiceMobile { get; set; }

        /// <summary>
        /// 用于说明详细的活动规则，会展示在支付宝卡包券详情页。
        /// </summary>
        /// <value>用于说明详细的活动规则，会展示在支付宝卡包券详情页。</value>
        [DataMember(Name = "voucher_description", EmitDefaultValue = false)]
        public string VoucherDescription { get; set; }

        /// <summary>
        /// 券详细图列表，会展示在用户支付宝卡包券详情页 需要通过 alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_DETAIL_IMAGE ,接口返回的resource_id即为该参数的值 上传图片尺寸600*600，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制 1.voucher_image填入，该值才能填入； 2.最多3张；
        /// </summary>
        /// <value>券详细图列表，会展示在用户支付宝卡包券详情页 需要通过 alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_DETAIL_IMAGE ,接口返回的resource_id即为该参数的值 上传图片尺寸600*600，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制 1.voucher_image填入，该值才能填入； 2.最多3张；</value>
        [DataMember(Name = "voucher_detail_images", EmitDefaultValue = false)]
        public List<string> VoucherDetailImages { get; set; }

        /// <summary>
        /// 券详情页封面图，会展示在用户支付宝卡包券详情页 需要通过  alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_IMAGE，接口返回的resource_id即为该参数的值  限制: 该字段在兑换券场景下必传 上传图片尺寸670*335，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制: 1.指定可核销商品(available_goods)时必传
        /// </summary>
        /// <value>券详情页封面图，会展示在用户支付宝卡包券详情页 需要通过  alipay.marketing.material.image.upload接口上传图片，指定file_key为PROMO_VOUCHER_IMAGE，接口返回的resource_id即为该参数的值  限制: 该字段在兑换券场景下必传 上传图片尺寸670*335，支持格式：png、jpg、jpeg、bmp，大小不超过2MB 限制: 1.指定可核销商品(available_goods)时必传</value>
        [DataMember(Name = "voucher_image", EmitDefaultValue = false)]
        public string VoucherImage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentVoucherDisplayInfo {\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  CustomerServiceMobile: ").Append(CustomerServiceMobile).Append("\n");
            sb.Append("  VoucherDescription: ").Append(VoucherDescription).Append("\n");
            sb.Append("  VoucherDetailImages: ").Append(VoucherDetailImages).Append("\n");
            sb.Append("  VoucherImage: ").Append(VoucherImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentVoucherDisplayInfo);
        }

        /// <summary>
        /// Returns true if PaymentVoucherDisplayInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentVoucherDisplayInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentVoucherDisplayInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.CustomerServiceMobile == input.CustomerServiceMobile ||
                    (this.CustomerServiceMobile != null &&
                    this.CustomerServiceMobile.Equals(input.CustomerServiceMobile))
                ) && 
                (
                    this.VoucherDescription == input.VoucherDescription ||
                    (this.VoucherDescription != null &&
                    this.VoucherDescription.Equals(input.VoucherDescription))
                ) && 
                (
                    this.VoucherDetailImages == input.VoucherDetailImages ||
                    this.VoucherDetailImages != null &&
                    input.VoucherDetailImages != null &&
                    this.VoucherDetailImages.SequenceEqual(input.VoucherDetailImages)
                ) && 
                (
                    this.VoucherImage == input.VoucherImage ||
                    (this.VoucherImage != null &&
                    this.VoucherImage.Equals(input.VoucherImage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.CustomerServiceMobile != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerServiceMobile.GetHashCode();
                }
                if (this.VoucherDescription != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherDescription.GetHashCode();
                }
                if (this.VoucherDetailImages != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherDetailImages.GetHashCode();
                }
                if (this.VoucherImage != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherImage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
