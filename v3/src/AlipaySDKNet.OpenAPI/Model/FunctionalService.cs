/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// FunctionalService
    /// </summary>
    [DataContract(Name = "FunctionalService")]
    public partial class FunctionalService : IEquatable<FunctionalService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalService" /> class.
        /// </summary>
        /// <param name="content">功能内容.</param>
        /// <param name="extInfo">扩展信息.</param>
        /// <param name="functionCode">功能码 支持的功能码请与产品或对应技术确认.</param>
        /// <param name="functionName">功能名称.</param>
        /// <param name="functionType">功能类型.</param>
        /// <param name="functionUrl">功能入口.</param>
        /// <param name="memo">备注信息.</param>
        public FunctionalService(string content = default(string), List<OrderExtInfo> extInfo = default(List<OrderExtInfo>), string functionCode = default(string), string functionName = default(string), string functionType = default(string), string functionUrl = default(string), string memo = default(string))
        {
            this.Content = content;
            this.ExtInfo = extInfo;
            this.FunctionCode = functionCode;
            this.FunctionName = functionName;
            this.FunctionType = functionType;
            this.FunctionUrl = functionUrl;
            this.Memo = memo;
        }

        /// <summary>
        /// 功能内容
        /// </summary>
        /// <value>功能内容</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// 扩展信息
        /// </summary>
        /// <value>扩展信息</value>
        [DataMember(Name = "ext_info", EmitDefaultValue = false)]
        public List<OrderExtInfo> ExtInfo { get; set; }

        /// <summary>
        /// 功能码 支持的功能码请与产品或对应技术确认
        /// </summary>
        /// <value>功能码 支持的功能码请与产品或对应技术确认</value>
        [DataMember(Name = "function_code", EmitDefaultValue = false)]
        public string FunctionCode { get; set; }

        /// <summary>
        /// 功能名称
        /// </summary>
        /// <value>功能名称</value>
        [DataMember(Name = "function_name", EmitDefaultValue = false)]
        public string FunctionName { get; set; }

        /// <summary>
        /// 功能类型
        /// </summary>
        /// <value>功能类型</value>
        [DataMember(Name = "function_type", EmitDefaultValue = false)]
        public string FunctionType { get; set; }

        /// <summary>
        /// 功能入口
        /// </summary>
        /// <value>功能入口</value>
        [DataMember(Name = "function_url", EmitDefaultValue = false)]
        public string FunctionUrl { get; set; }

        /// <summary>
        /// 备注信息
        /// </summary>
        /// <value>备注信息</value>
        [DataMember(Name = "memo", EmitDefaultValue = false)]
        public string Memo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunctionalService {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  FunctionCode: ").Append(FunctionCode).Append("\n");
            sb.Append("  FunctionName: ").Append(FunctionName).Append("\n");
            sb.Append("  FunctionType: ").Append(FunctionType).Append("\n");
            sb.Append("  FunctionUrl: ").Append(FunctionUrl).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FunctionalService);
        }

        /// <summary>
        /// Returns true if FunctionalService instances are equal
        /// </summary>
        /// <param name="input">Instance of FunctionalService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunctionalService input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ExtInfo == input.ExtInfo ||
                    this.ExtInfo != null &&
                    input.ExtInfo != null &&
                    this.ExtInfo.SequenceEqual(input.ExtInfo)
                ) && 
                (
                    this.FunctionCode == input.FunctionCode ||
                    (this.FunctionCode != null &&
                    this.FunctionCode.Equals(input.FunctionCode))
                ) && 
                (
                    this.FunctionName == input.FunctionName ||
                    (this.FunctionName != null &&
                    this.FunctionName.Equals(input.FunctionName))
                ) && 
                (
                    this.FunctionType == input.FunctionType ||
                    (this.FunctionType != null &&
                    this.FunctionType.Equals(input.FunctionType))
                ) && 
                (
                    this.FunctionUrl == input.FunctionUrl ||
                    (this.FunctionUrl != null &&
                    this.FunctionUrl.Equals(input.FunctionUrl))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.ExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfo.GetHashCode();
                }
                if (this.FunctionCode != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionCode.GetHashCode();
                }
                if (this.FunctionName != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionName.GetHashCode();
                }
                if (this.FunctionType != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionType.GetHashCode();
                }
                if (this.FunctionUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionUrl.GetHashCode();
                }
                if (this.Memo != null)
                {
                    hashCode = (hashCode * 59) + this.Memo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
