/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// CampusInfo
    /// </summary>
    [DataContract(Name = "CampusInfo")]
    public partial class CampusInfo : IEquatable<CampusInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampusInfo" /> class.
        /// </summary>
        /// <param name="address">地址.</param>
        /// <param name="campusId">校区id.</param>
        /// <param name="campusName">校区名称.</param>
        /// <param name="instName">学校名称.</param>
        public CampusInfo(string address = default(string), string campusId = default(string), string campusName = default(string), string instName = default(string))
        {
            this.Address = address;
            this.CampusId = campusId;
            this.CampusName = campusName;
            this.InstName = instName;
        }

        /// <summary>
        /// 地址
        /// </summary>
        /// <value>地址</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// 校区id
        /// </summary>
        /// <value>校区id</value>
        [DataMember(Name = "campus_id", EmitDefaultValue = false)]
        public string CampusId { get; set; }

        /// <summary>
        /// 校区名称
        /// </summary>
        /// <value>校区名称</value>
        [DataMember(Name = "campus_name", EmitDefaultValue = false)]
        public string CampusName { get; set; }

        /// <summary>
        /// 学校名称
        /// </summary>
        /// <value>学校名称</value>
        [DataMember(Name = "inst_name", EmitDefaultValue = false)]
        public string InstName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampusInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CampusId: ").Append(CampusId).Append("\n");
            sb.Append("  CampusName: ").Append(CampusName).Append("\n");
            sb.Append("  InstName: ").Append(InstName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampusInfo);
        }

        /// <summary>
        /// Returns true if CampusInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CampusInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampusInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CampusId == input.CampusId ||
                    (this.CampusId != null &&
                    this.CampusId.Equals(input.CampusId))
                ) && 
                (
                    this.CampusName == input.CampusName ||
                    (this.CampusName != null &&
                    this.CampusName.Equals(input.CampusName))
                ) && 
                (
                    this.InstName == input.InstName ||
                    (this.InstName != null &&
                    this.InstName.Equals(input.InstName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.CampusId != null)
                {
                    hashCode = (hashCode * 59) + this.CampusId.GetHashCode();
                }
                if (this.CampusName != null)
                {
                    hashCode = (hashCode * 59) + this.CampusName.GetHashCode();
                }
                if (this.InstName != null)
                {
                    hashCode = (hashCode * 59) + this.InstName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
