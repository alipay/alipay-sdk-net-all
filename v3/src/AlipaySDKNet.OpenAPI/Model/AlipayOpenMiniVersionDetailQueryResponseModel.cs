/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniVersionDetailQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniVersionDetailQueryResponseModel")]
    public partial class AlipayOpenMiniVersionDetailQueryResponseModel : IEquatable<AlipayOpenMiniVersionDetailQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniVersionDetailQueryResponseModel" /> class.
        /// </summary>
        /// <param name="appDesc">小程序应用描述.</param>
        /// <param name="appEnglishName">小程序应用英文名称.</param>
        /// <param name="appLogo">小程序应用logo图标.</param>
        /// <param name="appName">小程序应用名称.</param>
        /// <param name="appSlogan">小程序应用简介，一句话描述小程序功能.</param>
        /// <param name="appVersion">小程序版本号.</param>
        /// <param name="baseAudit">准入审核结果 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）.</param>
        /// <param name="baseAuditRecord">baseAuditRecord.</param>
        /// <param name="canRelease">是否可上架 true：可上架 false：不可上架 （version_status 为PROMOTE_AUDIT_REJECT有值） （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）.</param>
        /// <param name="gmtApplyAudit">小程序版本提交审核的时间，格式为yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="gmtAuditEnd">小程序版本审核结束时间，格式为yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="gmtCreate">小程序版本创建时间.</param>
        /// <param name="gmtOffline">小程序版本下架时间.</param>
        /// <param name="gmtOnline">小程序版本上架时间.</param>
        /// <param name="grayStrategy">小程序灰度比例值，p10-10%的用户，p30-30%的用户，p50-50%的用户.</param>
        /// <param name="memo">小程序备注.</param>
        /// <param name="miniAppCategoryInfoList">小程序类目列表.</param>
        /// <param name="miniCategoryInfoList">新小程序类目列表.</param>
        /// <param name="packageInfoList">小程序功能包列表.</param>
        /// <param name="promoteAudit">营销审核结果： PASS：通过 REJECT：驳回 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）.</param>
        /// <param name="promoteAuditRecord">promoteAuditRecord.</param>
        /// <param name="rejectReason">审核驳回原因.</param>
        /// <param name="scanResult">安全扫描结果，True-安全扫描通过，False-安全扫描不通过，NAN-扫描中.</param>
        /// <param name="screenShotList">小程序版本截图，多个截图以逗号隔开.</param>
        /// <param name="serviceEmail">客服邮箱.</param>
        /// <param name="servicePhone">客服电话.</param>
        /// <param name="serviceRegionInfo">小程序服务区域信息，当服务区域类型是LOCATION时，这里明确指出具体的服务区域信息.</param>
        /// <param name="serviceRegionType">小程序服务区域类型.</param>
        /// <param name="status">小程序版本状态，INIT-开发中，AUDITING-审核中，WAIT_RELEASE-待上架，BASE_AUDIT_PASS-准入不可营销，AUDIT_REJECT-审核驳回，RELEASE-已上架，GRAY-灰度中，OFFLINE-已下架，AUDIT_OFFLINE-已被强制下架.</param>
        /// <param name="versionDesc">小程序版本描述.</param>
        public AlipayOpenMiniVersionDetailQueryResponseModel(string appDesc = default(string), string appEnglishName = default(string), string appLogo = default(string), string appName = default(string), string appSlogan = default(string), string appVersion = default(string), string baseAudit = default(string), MiniAppAuditReason baseAuditRecord = default(MiniAppAuditReason), string canRelease = default(string), string gmtApplyAudit = default(string), string gmtAuditEnd = default(string), string gmtCreate = default(string), string gmtOffline = default(string), string gmtOnline = default(string), string grayStrategy = default(string), string memo = default(string), List<MiniAppCategoryInfo> miniAppCategoryInfoList = default(List<MiniAppCategoryInfo>), List<MiniAppCategoryInfo> miniCategoryInfoList = default(List<MiniAppCategoryInfo>), List<MiniPackageInfo> packageInfoList = default(List<MiniPackageInfo>), string promoteAudit = default(string), MiniAppAuditReason promoteAuditRecord = default(MiniAppAuditReason), string rejectReason = default(string), string scanResult = default(string), List<string> screenShotList = default(List<string>), string serviceEmail = default(string), string servicePhone = default(string), List<RegionInfo> serviceRegionInfo = default(List<RegionInfo>), string serviceRegionType = default(string), string status = default(string), string versionDesc = default(string))
        {
            this.AppDesc = appDesc;
            this.AppEnglishName = appEnglishName;
            this.AppLogo = appLogo;
            this.AppName = appName;
            this.AppSlogan = appSlogan;
            this.AppVersion = appVersion;
            this.BaseAudit = baseAudit;
            this.BaseAuditRecord = baseAuditRecord;
            this.CanRelease = canRelease;
            this.GmtApplyAudit = gmtApplyAudit;
            this.GmtAuditEnd = gmtAuditEnd;
            this.GmtCreate = gmtCreate;
            this.GmtOffline = gmtOffline;
            this.GmtOnline = gmtOnline;
            this.GrayStrategy = grayStrategy;
            this.Memo = memo;
            this.MiniAppCategoryInfoList = miniAppCategoryInfoList;
            this.MiniCategoryInfoList = miniCategoryInfoList;
            this.PackageInfoList = packageInfoList;
            this.PromoteAudit = promoteAudit;
            this.PromoteAuditRecord = promoteAuditRecord;
            this.RejectReason = rejectReason;
            this.ScanResult = scanResult;
            this.ScreenShotList = screenShotList;
            this.ServiceEmail = serviceEmail;
            this.ServicePhone = servicePhone;
            this.ServiceRegionInfo = serviceRegionInfo;
            this.ServiceRegionType = serviceRegionType;
            this.Status = status;
            this.VersionDesc = versionDesc;
        }

        /// <summary>
        /// 小程序应用描述
        /// </summary>
        /// <value>小程序应用描述</value>
        [DataMember(Name = "app_desc", EmitDefaultValue = false)]
        public string AppDesc { get; set; }

        /// <summary>
        /// 小程序应用英文名称
        /// </summary>
        /// <value>小程序应用英文名称</value>
        [DataMember(Name = "app_english_name", EmitDefaultValue = false)]
        public string AppEnglishName { get; set; }

        /// <summary>
        /// 小程序应用logo图标
        /// </summary>
        /// <value>小程序应用logo图标</value>
        [DataMember(Name = "app_logo", EmitDefaultValue = false)]
        public string AppLogo { get; set; }

        /// <summary>
        /// 小程序应用名称
        /// </summary>
        /// <value>小程序应用名称</value>
        [DataMember(Name = "app_name", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// 小程序应用简介，一句话描述小程序功能
        /// </summary>
        /// <value>小程序应用简介，一句话描述小程序功能</value>
        [DataMember(Name = "app_slogan", EmitDefaultValue = false)]
        public string AppSlogan { get; set; }

        /// <summary>
        /// 小程序版本号
        /// </summary>
        /// <value>小程序版本号</value>
        [DataMember(Name = "app_version", EmitDefaultValue = false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// 准入审核结果 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）
        /// </summary>
        /// <value>准入审核结果 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）</value>
        [DataMember(Name = "base_audit", EmitDefaultValue = false)]
        public string BaseAudit { get; set; }

        /// <summary>
        /// Gets or Sets BaseAuditRecord
        /// </summary>
        [DataMember(Name = "base_audit_record", EmitDefaultValue = false)]
        public MiniAppAuditReason BaseAuditRecord { get; set; }

        /// <summary>
        /// 是否可上架 true：可上架 false：不可上架 （version_status 为PROMOTE_AUDIT_REJECT有值） （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）
        /// </summary>
        /// <value>是否可上架 true：可上架 false：不可上架 （version_status 为PROMOTE_AUDIT_REJECT有值） （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）</value>
        [DataMember(Name = "can_release", EmitDefaultValue = false)]
        public string CanRelease { get; set; }

        /// <summary>
        /// 小程序版本提交审核的时间，格式为yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>小程序版本提交审核的时间，格式为yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "gmt_apply_audit", EmitDefaultValue = false)]
        public string GmtApplyAudit { get; set; }

        /// <summary>
        /// 小程序版本审核结束时间，格式为yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>小程序版本审核结束时间，格式为yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "gmt_audit_end", EmitDefaultValue = false)]
        public string GmtAuditEnd { get; set; }

        /// <summary>
        /// 小程序版本创建时间
        /// </summary>
        /// <value>小程序版本创建时间</value>
        [DataMember(Name = "gmt_create", EmitDefaultValue = false)]
        public string GmtCreate { get; set; }

        /// <summary>
        /// 小程序版本下架时间
        /// </summary>
        /// <value>小程序版本下架时间</value>
        [DataMember(Name = "gmt_offline", EmitDefaultValue = false)]
        public string GmtOffline { get; set; }

        /// <summary>
        /// 小程序版本上架时间
        /// </summary>
        /// <value>小程序版本上架时间</value>
        [DataMember(Name = "gmt_online", EmitDefaultValue = false)]
        public string GmtOnline { get; set; }

        /// <summary>
        /// 小程序灰度比例值，p10-10%的用户，p30-30%的用户，p50-50%的用户
        /// </summary>
        /// <value>小程序灰度比例值，p10-10%的用户，p30-30%的用户，p50-50%的用户</value>
        [DataMember(Name = "gray_strategy", EmitDefaultValue = false)]
        public string GrayStrategy { get; set; }

        /// <summary>
        /// 小程序备注
        /// </summary>
        /// <value>小程序备注</value>
        [DataMember(Name = "memo", EmitDefaultValue = false)]
        public string Memo { get; set; }

        /// <summary>
        /// 小程序类目列表
        /// </summary>
        /// <value>小程序类目列表</value>
        [DataMember(Name = "mini_app_category_info_list", EmitDefaultValue = false)]
        public List<MiniAppCategoryInfo> MiniAppCategoryInfoList { get; set; }

        /// <summary>
        /// 新小程序类目列表
        /// </summary>
        /// <value>新小程序类目列表</value>
        [DataMember(Name = "mini_category_info_list", EmitDefaultValue = false)]
        public List<MiniAppCategoryInfo> MiniCategoryInfoList { get; set; }

        /// <summary>
        /// 小程序功能包列表
        /// </summary>
        /// <value>小程序功能包列表</value>
        [DataMember(Name = "package_info_list", EmitDefaultValue = false)]
        public List<MiniPackageInfo> PackageInfoList { get; set; }

        /// <summary>
        /// 营销审核结果： PASS：通过 REJECT：驳回 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）
        /// </summary>
        /// <value>营销审核结果： PASS：通过 REJECT：驳回 （提审时 audit_rule 传 BASE_PROMOTE 时有该字段）</value>
        [DataMember(Name = "promote_audit", EmitDefaultValue = false)]
        public string PromoteAudit { get; set; }

        /// <summary>
        /// Gets or Sets PromoteAuditRecord
        /// </summary>
        [DataMember(Name = "promote_audit_record", EmitDefaultValue = false)]
        public MiniAppAuditReason PromoteAuditRecord { get; set; }

        /// <summary>
        /// 审核驳回原因
        /// </summary>
        /// <value>审核驳回原因</value>
        [DataMember(Name = "reject_reason", EmitDefaultValue = false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// 安全扫描结果，True-安全扫描通过，False-安全扫描不通过，NAN-扫描中
        /// </summary>
        /// <value>安全扫描结果，True-安全扫描通过，False-安全扫描不通过，NAN-扫描中</value>
        [DataMember(Name = "scan_result", EmitDefaultValue = false)]
        public string ScanResult { get; set; }

        /// <summary>
        /// 小程序版本截图，多个截图以逗号隔开
        /// </summary>
        /// <value>小程序版本截图，多个截图以逗号隔开</value>
        [DataMember(Name = "screen_shot_list", EmitDefaultValue = false)]
        public List<string> ScreenShotList { get; set; }

        /// <summary>
        /// 客服邮箱
        /// </summary>
        /// <value>客服邮箱</value>
        [DataMember(Name = "service_email", EmitDefaultValue = false)]
        public string ServiceEmail { get; set; }

        /// <summary>
        /// 客服电话
        /// </summary>
        /// <value>客服电话</value>
        [DataMember(Name = "service_phone", EmitDefaultValue = false)]
        public string ServicePhone { get; set; }

        /// <summary>
        /// 小程序服务区域信息，当服务区域类型是LOCATION时，这里明确指出具体的服务区域信息
        /// </summary>
        /// <value>小程序服务区域信息，当服务区域类型是LOCATION时，这里明确指出具体的服务区域信息</value>
        [DataMember(Name = "service_region_info", EmitDefaultValue = false)]
        public List<RegionInfo> ServiceRegionInfo { get; set; }

        /// <summary>
        /// 小程序服务区域类型
        /// </summary>
        /// <value>小程序服务区域类型</value>
        [DataMember(Name = "service_region_type", EmitDefaultValue = false)]
        public string ServiceRegionType { get; set; }

        /// <summary>
        /// 小程序版本状态，INIT-开发中，AUDITING-审核中，WAIT_RELEASE-待上架，BASE_AUDIT_PASS-准入不可营销，AUDIT_REJECT-审核驳回，RELEASE-已上架，GRAY-灰度中，OFFLINE-已下架，AUDIT_OFFLINE-已被强制下架
        /// </summary>
        /// <value>小程序版本状态，INIT-开发中，AUDITING-审核中，WAIT_RELEASE-待上架，BASE_AUDIT_PASS-准入不可营销，AUDIT_REJECT-审核驳回，RELEASE-已上架，GRAY-灰度中，OFFLINE-已下架，AUDIT_OFFLINE-已被强制下架</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 小程序版本描述
        /// </summary>
        /// <value>小程序版本描述</value>
        [DataMember(Name = "version_desc", EmitDefaultValue = false)]
        public string VersionDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniVersionDetailQueryResponseModel {\n");
            sb.Append("  AppDesc: ").Append(AppDesc).Append("\n");
            sb.Append("  AppEnglishName: ").Append(AppEnglishName).Append("\n");
            sb.Append("  AppLogo: ").Append(AppLogo).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppSlogan: ").Append(AppSlogan).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  BaseAudit: ").Append(BaseAudit).Append("\n");
            sb.Append("  BaseAuditRecord: ").Append(BaseAuditRecord).Append("\n");
            sb.Append("  CanRelease: ").Append(CanRelease).Append("\n");
            sb.Append("  GmtApplyAudit: ").Append(GmtApplyAudit).Append("\n");
            sb.Append("  GmtAuditEnd: ").Append(GmtAuditEnd).Append("\n");
            sb.Append("  GmtCreate: ").Append(GmtCreate).Append("\n");
            sb.Append("  GmtOffline: ").Append(GmtOffline).Append("\n");
            sb.Append("  GmtOnline: ").Append(GmtOnline).Append("\n");
            sb.Append("  GrayStrategy: ").Append(GrayStrategy).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  MiniAppCategoryInfoList: ").Append(MiniAppCategoryInfoList).Append("\n");
            sb.Append("  MiniCategoryInfoList: ").Append(MiniCategoryInfoList).Append("\n");
            sb.Append("  PackageInfoList: ").Append(PackageInfoList).Append("\n");
            sb.Append("  PromoteAudit: ").Append(PromoteAudit).Append("\n");
            sb.Append("  PromoteAuditRecord: ").Append(PromoteAuditRecord).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  ScanResult: ").Append(ScanResult).Append("\n");
            sb.Append("  ScreenShotList: ").Append(ScreenShotList).Append("\n");
            sb.Append("  ServiceEmail: ").Append(ServiceEmail).Append("\n");
            sb.Append("  ServicePhone: ").Append(ServicePhone).Append("\n");
            sb.Append("  ServiceRegionInfo: ").Append(ServiceRegionInfo).Append("\n");
            sb.Append("  ServiceRegionType: ").Append(ServiceRegionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VersionDesc: ").Append(VersionDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniVersionDetailQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniVersionDetailQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniVersionDetailQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniVersionDetailQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppDesc == input.AppDesc ||
                    (this.AppDesc != null &&
                    this.AppDesc.Equals(input.AppDesc))
                ) && 
                (
                    this.AppEnglishName == input.AppEnglishName ||
                    (this.AppEnglishName != null &&
                    this.AppEnglishName.Equals(input.AppEnglishName))
                ) && 
                (
                    this.AppLogo == input.AppLogo ||
                    (this.AppLogo != null &&
                    this.AppLogo.Equals(input.AppLogo))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppSlogan == input.AppSlogan ||
                    (this.AppSlogan != null &&
                    this.AppSlogan.Equals(input.AppSlogan))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.BaseAudit == input.BaseAudit ||
                    (this.BaseAudit != null &&
                    this.BaseAudit.Equals(input.BaseAudit))
                ) && 
                (
                    this.BaseAuditRecord == input.BaseAuditRecord ||
                    (this.BaseAuditRecord != null &&
                    this.BaseAuditRecord.Equals(input.BaseAuditRecord))
                ) && 
                (
                    this.CanRelease == input.CanRelease ||
                    (this.CanRelease != null &&
                    this.CanRelease.Equals(input.CanRelease))
                ) && 
                (
                    this.GmtApplyAudit == input.GmtApplyAudit ||
                    (this.GmtApplyAudit != null &&
                    this.GmtApplyAudit.Equals(input.GmtApplyAudit))
                ) && 
                (
                    this.GmtAuditEnd == input.GmtAuditEnd ||
                    (this.GmtAuditEnd != null &&
                    this.GmtAuditEnd.Equals(input.GmtAuditEnd))
                ) && 
                (
                    this.GmtCreate == input.GmtCreate ||
                    (this.GmtCreate != null &&
                    this.GmtCreate.Equals(input.GmtCreate))
                ) && 
                (
                    this.GmtOffline == input.GmtOffline ||
                    (this.GmtOffline != null &&
                    this.GmtOffline.Equals(input.GmtOffline))
                ) && 
                (
                    this.GmtOnline == input.GmtOnline ||
                    (this.GmtOnline != null &&
                    this.GmtOnline.Equals(input.GmtOnline))
                ) && 
                (
                    this.GrayStrategy == input.GrayStrategy ||
                    (this.GrayStrategy != null &&
                    this.GrayStrategy.Equals(input.GrayStrategy))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.MiniAppCategoryInfoList == input.MiniAppCategoryInfoList ||
                    this.MiniAppCategoryInfoList != null &&
                    input.MiniAppCategoryInfoList != null &&
                    this.MiniAppCategoryInfoList.SequenceEqual(input.MiniAppCategoryInfoList)
                ) && 
                (
                    this.MiniCategoryInfoList == input.MiniCategoryInfoList ||
                    this.MiniCategoryInfoList != null &&
                    input.MiniCategoryInfoList != null &&
                    this.MiniCategoryInfoList.SequenceEqual(input.MiniCategoryInfoList)
                ) && 
                (
                    this.PackageInfoList == input.PackageInfoList ||
                    this.PackageInfoList != null &&
                    input.PackageInfoList != null &&
                    this.PackageInfoList.SequenceEqual(input.PackageInfoList)
                ) && 
                (
                    this.PromoteAudit == input.PromoteAudit ||
                    (this.PromoteAudit != null &&
                    this.PromoteAudit.Equals(input.PromoteAudit))
                ) && 
                (
                    this.PromoteAuditRecord == input.PromoteAuditRecord ||
                    (this.PromoteAuditRecord != null &&
                    this.PromoteAuditRecord.Equals(input.PromoteAuditRecord))
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    (this.RejectReason != null &&
                    this.RejectReason.Equals(input.RejectReason))
                ) && 
                (
                    this.ScanResult == input.ScanResult ||
                    (this.ScanResult != null &&
                    this.ScanResult.Equals(input.ScanResult))
                ) && 
                (
                    this.ScreenShotList == input.ScreenShotList ||
                    this.ScreenShotList != null &&
                    input.ScreenShotList != null &&
                    this.ScreenShotList.SequenceEqual(input.ScreenShotList)
                ) && 
                (
                    this.ServiceEmail == input.ServiceEmail ||
                    (this.ServiceEmail != null &&
                    this.ServiceEmail.Equals(input.ServiceEmail))
                ) && 
                (
                    this.ServicePhone == input.ServicePhone ||
                    (this.ServicePhone != null &&
                    this.ServicePhone.Equals(input.ServicePhone))
                ) && 
                (
                    this.ServiceRegionInfo == input.ServiceRegionInfo ||
                    this.ServiceRegionInfo != null &&
                    input.ServiceRegionInfo != null &&
                    this.ServiceRegionInfo.SequenceEqual(input.ServiceRegionInfo)
                ) && 
                (
                    this.ServiceRegionType == input.ServiceRegionType ||
                    (this.ServiceRegionType != null &&
                    this.ServiceRegionType.Equals(input.ServiceRegionType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VersionDesc == input.VersionDesc ||
                    (this.VersionDesc != null &&
                    this.VersionDesc.Equals(input.VersionDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppDesc != null)
                {
                    hashCode = (hashCode * 59) + this.AppDesc.GetHashCode();
                }
                if (this.AppEnglishName != null)
                {
                    hashCode = (hashCode * 59) + this.AppEnglishName.GetHashCode();
                }
                if (this.AppLogo != null)
                {
                    hashCode = (hashCode * 59) + this.AppLogo.GetHashCode();
                }
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.AppSlogan != null)
                {
                    hashCode = (hashCode * 59) + this.AppSlogan.GetHashCode();
                }
                if (this.AppVersion != null)
                {
                    hashCode = (hashCode * 59) + this.AppVersion.GetHashCode();
                }
                if (this.BaseAudit != null)
                {
                    hashCode = (hashCode * 59) + this.BaseAudit.GetHashCode();
                }
                if (this.BaseAuditRecord != null)
                {
                    hashCode = (hashCode * 59) + this.BaseAuditRecord.GetHashCode();
                }
                if (this.CanRelease != null)
                {
                    hashCode = (hashCode * 59) + this.CanRelease.GetHashCode();
                }
                if (this.GmtApplyAudit != null)
                {
                    hashCode = (hashCode * 59) + this.GmtApplyAudit.GetHashCode();
                }
                if (this.GmtAuditEnd != null)
                {
                    hashCode = (hashCode * 59) + this.GmtAuditEnd.GetHashCode();
                }
                if (this.GmtCreate != null)
                {
                    hashCode = (hashCode * 59) + this.GmtCreate.GetHashCode();
                }
                if (this.GmtOffline != null)
                {
                    hashCode = (hashCode * 59) + this.GmtOffline.GetHashCode();
                }
                if (this.GmtOnline != null)
                {
                    hashCode = (hashCode * 59) + this.GmtOnline.GetHashCode();
                }
                if (this.GrayStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.GrayStrategy.GetHashCode();
                }
                if (this.Memo != null)
                {
                    hashCode = (hashCode * 59) + this.Memo.GetHashCode();
                }
                if (this.MiniAppCategoryInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.MiniAppCategoryInfoList.GetHashCode();
                }
                if (this.MiniCategoryInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.MiniCategoryInfoList.GetHashCode();
                }
                if (this.PackageInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.PackageInfoList.GetHashCode();
                }
                if (this.PromoteAudit != null)
                {
                    hashCode = (hashCode * 59) + this.PromoteAudit.GetHashCode();
                }
                if (this.PromoteAuditRecord != null)
                {
                    hashCode = (hashCode * 59) + this.PromoteAuditRecord.GetHashCode();
                }
                if (this.RejectReason != null)
                {
                    hashCode = (hashCode * 59) + this.RejectReason.GetHashCode();
                }
                if (this.ScanResult != null)
                {
                    hashCode = (hashCode * 59) + this.ScanResult.GetHashCode();
                }
                if (this.ScreenShotList != null)
                {
                    hashCode = (hashCode * 59) + this.ScreenShotList.GetHashCode();
                }
                if (this.ServiceEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceEmail.GetHashCode();
                }
                if (this.ServicePhone != null)
                {
                    hashCode = (hashCode * 59) + this.ServicePhone.GetHashCode();
                }
                if (this.ServiceRegionInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceRegionInfo.GetHashCode();
                }
                if (this.ServiceRegionType != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceRegionType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.VersionDesc != null)
                {
                    hashCode = (hashCode * 59) + this.VersionDesc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
