/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenPublicMessageCustomSendModel
    /// </summary>
    [DataContract(Name = "AlipayOpenPublicMessageCustomSendModel")]
    public partial class AlipayOpenPublicMessageCustomSendModel : IEquatable<AlipayOpenPublicMessageCustomSendModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenPublicMessageCustomSendModel" /> class.
        /// </summary>
        /// <param name="articles">msg_type为image-text，本参数必填。 .</param>
        /// <param name="chat">是否为聊天消息。枚举支持： *0：代表非聊天消息，消息显示在生活号主页，默认为 0。 *1：代表是聊天消息，消息显示在咨询反馈列表页。.</param>
        /// <param name="eventType">触发消息的事件类型，默认为空。代表商户未改造。如果是follow，代表关注消息。click代表菜单点击，enter_ppchat代表进入事件；请注意事件类型的大小写.</param>
        /// <param name="msgType">消息类型。枚举支持： * text：表示文本消息； * image-text：表示图文消息。.</param>
        /// <param name="openId">支付宝用户的唯一标识.</param>
        /// <param name="text">text.</param>
        /// <param name="toUserId">消息接收用户的userid.</param>
        public AlipayOpenPublicMessageCustomSendModel(List<Article> articles = default(List<Article>), string chat = default(string), string eventType = default(string), string msgType = default(string), string openId = default(string), Text text = default(Text), string toUserId = default(string))
        {
            this.Articles = articles;
            this.Chat = chat;
            this.EventType = eventType;
            this.MsgType = msgType;
            this.OpenId = openId;
            this.Text = text;
            this.ToUserId = toUserId;
        }

        /// <summary>
        /// msg_type为image-text，本参数必填。 
        /// </summary>
        /// <value>msg_type为image-text，本参数必填。 </value>
        [DataMember(Name = "articles", EmitDefaultValue = false)]
        public List<Article> Articles { get; set; }

        /// <summary>
        /// 是否为聊天消息。枚举支持： *0：代表非聊天消息，消息显示在生活号主页，默认为 0。 *1：代表是聊天消息，消息显示在咨询反馈列表页。
        /// </summary>
        /// <value>是否为聊天消息。枚举支持： *0：代表非聊天消息，消息显示在生活号主页，默认为 0。 *1：代表是聊天消息，消息显示在咨询反馈列表页。</value>
        [DataMember(Name = "chat", EmitDefaultValue = false)]
        public string Chat { get; set; }

        /// <summary>
        /// 触发消息的事件类型，默认为空。代表商户未改造。如果是follow，代表关注消息。click代表菜单点击，enter_ppchat代表进入事件；请注意事件类型的大小写
        /// </summary>
        /// <value>触发消息的事件类型，默认为空。代表商户未改造。如果是follow，代表关注消息。click代表菜单点击，enter_ppchat代表进入事件；请注意事件类型的大小写</value>
        [DataMember(Name = "event_type", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// 消息类型。枚举支持： * text：表示文本消息； * image-text：表示图文消息。
        /// </summary>
        /// <value>消息类型。枚举支持： * text：表示文本消息； * image-text：表示图文消息。</value>
        [DataMember(Name = "msg_type", EmitDefaultValue = false)]
        public string MsgType { get; set; }

        /// <summary>
        /// 支付宝用户的唯一标识
        /// </summary>
        /// <value>支付宝用户的唯一标识</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public Text Text { get; set; }

        /// <summary>
        /// 消息接收用户的userid
        /// </summary>
        /// <value>消息接收用户的userid</value>
        [DataMember(Name = "to_user_id", EmitDefaultValue = false)]
        public string ToUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenPublicMessageCustomSendModel {\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  MsgType: ").Append(MsgType).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ToUserId: ").Append(ToUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenPublicMessageCustomSendModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenPublicMessageCustomSendModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenPublicMessageCustomSendModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenPublicMessageCustomSendModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Articles == input.Articles ||
                    this.Articles != null &&
                    input.Articles != null &&
                    this.Articles.SequenceEqual(input.Articles)
                ) && 
                (
                    this.Chat == input.Chat ||
                    (this.Chat != null &&
                    this.Chat.Equals(input.Chat))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.MsgType == input.MsgType ||
                    (this.MsgType != null &&
                    this.MsgType.Equals(input.MsgType))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ToUserId == input.ToUserId ||
                    (this.ToUserId != null &&
                    this.ToUserId.Equals(input.ToUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Articles != null)
                {
                    hashCode = (hashCode * 59) + this.Articles.GetHashCode();
                }
                if (this.Chat != null)
                {
                    hashCode = (hashCode * 59) + this.Chat.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.MsgType != null)
                {
                    hashCode = (hashCode * 59) + this.MsgType.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.ToUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ToUserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
