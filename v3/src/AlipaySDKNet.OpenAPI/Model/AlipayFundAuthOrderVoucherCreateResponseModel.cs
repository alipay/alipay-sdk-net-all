/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayFundAuthOrderVoucherCreateResponseModel
    /// </summary>
    [DataContract(Name = "AlipayFundAuthOrderVoucherCreateResponseModel")]
    public partial class AlipayFundAuthOrderVoucherCreateResponseModel : IEquatable<AlipayFundAuthOrderVoucherCreateResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayFundAuthOrderVoucherCreateResponseModel" /> class.
        /// </summary>
        /// <param name="codeType">码类型，分为  barCode：条形码 (一维码) 和 qrCode:二维码(qrCode) ；  目前发码只支持 qrCode.</param>
        /// <param name="codeUrl">生成的带有支付宝logo的二维码地址，如：&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&lt;/a&gt;；商户端通过在末尾追加picSize来指定要显示的图片大小，如 显示1280大小的URL:&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280&lt;/a&gt;；目前支持的大小有：256, 227, 270, 344, 430, 512, 570, 860, 1280, 1546；.</param>
        /// <param name="codeValue">当前发码请求生成的二维码码串，商户端可以利用二维码生成工具根据该码串值生成对应的二维码.</param>
        /// <param name="outOrderNo">商户的授权资金订单号.</param>
        /// <param name="outRequestNo">商户本次资金操作的请求流水号.</param>
        public AlipayFundAuthOrderVoucherCreateResponseModel(string codeType = default(string), string codeUrl = default(string), string codeValue = default(string), string outOrderNo = default(string), string outRequestNo = default(string))
        {
            this.CodeType = codeType;
            this.CodeUrl = codeUrl;
            this.CodeValue = codeValue;
            this.OutOrderNo = outOrderNo;
            this.OutRequestNo = outRequestNo;
        }

        /// <summary>
        /// 码类型，分为  barCode：条形码 (一维码) 和 qrCode:二维码(qrCode) ；  目前发码只支持 qrCode
        /// </summary>
        /// <value>码类型，分为  barCode：条形码 (一维码) 和 qrCode:二维码(qrCode) ；  目前发码只支持 qrCode</value>
        [DataMember(Name = "code_type", EmitDefaultValue = false)]
        public string CodeType { get; set; }

        /// <summary>
        /// 生成的带有支付宝logo的二维码地址，如：&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&lt;/a&gt;；商户端通过在末尾追加picSize来指定要显示的图片大小，如 显示1280大小的URL:&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280&lt;/a&gt;；目前支持的大小有：256, 227, 270, 344, 430, 512, 570, 860, 1280, 1546；
        /// </summary>
        /// <value>生成的带有支付宝logo的二维码地址，如：&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&lt;/a&gt;；商户端通过在末尾追加picSize来指定要显示的图片大小，如 显示1280大小的URL:&lt;a href&#x3D;\&quot;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280\&quot;&gt;http://mobilecodec.alipay.com/show.htm?code&#x3D;aeparsv2dknkqf3018556a&amp;picSize&#x3D;1280&lt;/a&gt;；目前支持的大小有：256, 227, 270, 344, 430, 512, 570, 860, 1280, 1546；</value>
        [DataMember(Name = "code_url", EmitDefaultValue = false)]
        public string CodeUrl { get; set; }

        /// <summary>
        /// 当前发码请求生成的二维码码串，商户端可以利用二维码生成工具根据该码串值生成对应的二维码
        /// </summary>
        /// <value>当前发码请求生成的二维码码串，商户端可以利用二维码生成工具根据该码串值生成对应的二维码</value>
        [DataMember(Name = "code_value", EmitDefaultValue = false)]
        public string CodeValue { get; set; }

        /// <summary>
        /// 商户的授权资金订单号
        /// </summary>
        /// <value>商户的授权资金订单号</value>
        [DataMember(Name = "out_order_no", EmitDefaultValue = false)]
        public string OutOrderNo { get; set; }

        /// <summary>
        /// 商户本次资金操作的请求流水号
        /// </summary>
        /// <value>商户本次资金操作的请求流水号</value>
        [DataMember(Name = "out_request_no", EmitDefaultValue = false)]
        public string OutRequestNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayFundAuthOrderVoucherCreateResponseModel {\n");
            sb.Append("  CodeType: ").Append(CodeType).Append("\n");
            sb.Append("  CodeUrl: ").Append(CodeUrl).Append("\n");
            sb.Append("  CodeValue: ").Append(CodeValue).Append("\n");
            sb.Append("  OutOrderNo: ").Append(OutOrderNo).Append("\n");
            sb.Append("  OutRequestNo: ").Append(OutRequestNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayFundAuthOrderVoucherCreateResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayFundAuthOrderVoucherCreateResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayFundAuthOrderVoucherCreateResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayFundAuthOrderVoucherCreateResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CodeType == input.CodeType ||
                    (this.CodeType != null &&
                    this.CodeType.Equals(input.CodeType))
                ) && 
                (
                    this.CodeUrl == input.CodeUrl ||
                    (this.CodeUrl != null &&
                    this.CodeUrl.Equals(input.CodeUrl))
                ) && 
                (
                    this.CodeValue == input.CodeValue ||
                    (this.CodeValue != null &&
                    this.CodeValue.Equals(input.CodeValue))
                ) && 
                (
                    this.OutOrderNo == input.OutOrderNo ||
                    (this.OutOrderNo != null &&
                    this.OutOrderNo.Equals(input.OutOrderNo))
                ) && 
                (
                    this.OutRequestNo == input.OutRequestNo ||
                    (this.OutRequestNo != null &&
                    this.OutRequestNo.Equals(input.OutRequestNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeType != null)
                {
                    hashCode = (hashCode * 59) + this.CodeType.GetHashCode();
                }
                if (this.CodeUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CodeUrl.GetHashCode();
                }
                if (this.CodeValue != null)
                {
                    hashCode = (hashCode * 59) + this.CodeValue.GetHashCode();
                }
                if (this.OutOrderNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutOrderNo.GetHashCode();
                }
                if (this.OutRequestNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutRequestNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
