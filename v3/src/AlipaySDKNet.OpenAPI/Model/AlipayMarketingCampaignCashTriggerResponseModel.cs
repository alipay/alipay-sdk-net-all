/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayMarketingCampaignCashTriggerResponseModel
    /// </summary>
    [DataContract(Name = "AlipayMarketingCampaignCashTriggerResponseModel")]
    public partial class AlipayMarketingCampaignCashTriggerResponseModel : IEquatable<AlipayMarketingCampaignCashTriggerResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayMarketingCampaignCashTriggerResponseModel" /> class.
        /// </summary>
        /// <param name="bizNo">支付宝业务号,发奖成功时返回,调用者可提供此字符串进行问题排查与核对等.</param>
        /// <param name="couponName">红包名称,创建活动时设置，用于账单列表和详情、红包列表和详情的展示.</param>
        /// <param name="errorMsg">用户领取失败的错误信息描述.</param>
        /// <param name="merchantLogo">商户头像logo的图片url地址，用于账单和红包列表、详情的展示.</param>
        /// <param name="outBizNo">外部业务号,回填请求中的out_biz_no,请求参数中传了out_biz_no就会回传回去，如果不传就回传默认的\&quot;default_out_biz_no\&quot;，请求者可用于日志记录与核对等.</param>
        /// <param name="partnerId">发送红包商户签约pid，发奖成功时非空.</param>
        /// <param name="prizeAmount">现金红包金额，发奖成功时非空，单位为元，保留两位小数.</param>
        /// <param name="prizeMsg">活动文案,用于账单的备注展示、红包详情页的文案展示.</param>
        /// <param name="repeatTriggerFlag">用户是否重复领取，如果重复领取，返回的是之前的中奖结果，如果是首次领取，则走发奖流程.</param>
        /// <param name="triggerResult">是否中奖结果状态，取值为true或false。如果为true表示发奖成功，这时返回的结果中的其他字段非空；如果为false表示发奖失败，这时返回的其他字段为空.</param>
        public AlipayMarketingCampaignCashTriggerResponseModel(string bizNo = default(string), string couponName = default(string), string errorMsg = default(string), string merchantLogo = default(string), string outBizNo = default(string), string partnerId = default(string), string prizeAmount = default(string), string prizeMsg = default(string), string repeatTriggerFlag = default(string), string triggerResult = default(string))
        {
            this.BizNo = bizNo;
            this.CouponName = couponName;
            this.ErrorMsg = errorMsg;
            this.MerchantLogo = merchantLogo;
            this.OutBizNo = outBizNo;
            this.PartnerId = partnerId;
            this.PrizeAmount = prizeAmount;
            this.PrizeMsg = prizeMsg;
            this.RepeatTriggerFlag = repeatTriggerFlag;
            this.TriggerResult = triggerResult;
        }

        /// <summary>
        /// 支付宝业务号,发奖成功时返回,调用者可提供此字符串进行问题排查与核对等
        /// </summary>
        /// <value>支付宝业务号,发奖成功时返回,调用者可提供此字符串进行问题排查与核对等</value>
        [DataMember(Name = "biz_no", EmitDefaultValue = false)]
        public string BizNo { get; set; }

        /// <summary>
        /// 红包名称,创建活动时设置，用于账单列表和详情、红包列表和详情的展示
        /// </summary>
        /// <value>红包名称,创建活动时设置，用于账单列表和详情、红包列表和详情的展示</value>
        [DataMember(Name = "coupon_name", EmitDefaultValue = false)]
        public string CouponName { get; set; }

        /// <summary>
        /// 用户领取失败的错误信息描述
        /// </summary>
        /// <value>用户领取失败的错误信息描述</value>
        [DataMember(Name = "error_msg", EmitDefaultValue = false)]
        public string ErrorMsg { get; set; }

        /// <summary>
        /// 商户头像logo的图片url地址，用于账单和红包列表、详情的展示
        /// </summary>
        /// <value>商户头像logo的图片url地址，用于账单和红包列表、详情的展示</value>
        [DataMember(Name = "merchant_logo", EmitDefaultValue = false)]
        public string MerchantLogo { get; set; }

        /// <summary>
        /// 外部业务号,回填请求中的out_biz_no,请求参数中传了out_biz_no就会回传回去，如果不传就回传默认的\&quot;default_out_biz_no\&quot;，请求者可用于日志记录与核对等
        /// </summary>
        /// <value>外部业务号,回填请求中的out_biz_no,请求参数中传了out_biz_no就会回传回去，如果不传就回传默认的\&quot;default_out_biz_no\&quot;，请求者可用于日志记录与核对等</value>
        [DataMember(Name = "out_biz_no", EmitDefaultValue = false)]
        public string OutBizNo { get; set; }

        /// <summary>
        /// 发送红包商户签约pid，发奖成功时非空
        /// </summary>
        /// <value>发送红包商户签约pid，发奖成功时非空</value>
        [DataMember(Name = "partner_id", EmitDefaultValue = false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// 现金红包金额，发奖成功时非空，单位为元，保留两位小数
        /// </summary>
        /// <value>现金红包金额，发奖成功时非空，单位为元，保留两位小数</value>
        [DataMember(Name = "prize_amount", EmitDefaultValue = false)]
        public string PrizeAmount { get; set; }

        /// <summary>
        /// 活动文案,用于账单的备注展示、红包详情页的文案展示
        /// </summary>
        /// <value>活动文案,用于账单的备注展示、红包详情页的文案展示</value>
        [DataMember(Name = "prize_msg", EmitDefaultValue = false)]
        public string PrizeMsg { get; set; }

        /// <summary>
        /// 用户是否重复领取，如果重复领取，返回的是之前的中奖结果，如果是首次领取，则走发奖流程
        /// </summary>
        /// <value>用户是否重复领取，如果重复领取，返回的是之前的中奖结果，如果是首次领取，则走发奖流程</value>
        [DataMember(Name = "repeat_trigger_flag", EmitDefaultValue = false)]
        public string RepeatTriggerFlag { get; set; }

        /// <summary>
        /// 是否中奖结果状态，取值为true或false。如果为true表示发奖成功，这时返回的结果中的其他字段非空；如果为false表示发奖失败，这时返回的其他字段为空
        /// </summary>
        /// <value>是否中奖结果状态，取值为true或false。如果为true表示发奖成功，这时返回的结果中的其他字段非空；如果为false表示发奖失败，这时返回的其他字段为空</value>
        [DataMember(Name = "trigger_result", EmitDefaultValue = false)]
        public string TriggerResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayMarketingCampaignCashTriggerResponseModel {\n");
            sb.Append("  BizNo: ").Append(BizNo).Append("\n");
            sb.Append("  CouponName: ").Append(CouponName).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  MerchantLogo: ").Append(MerchantLogo).Append("\n");
            sb.Append("  OutBizNo: ").Append(OutBizNo).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  PrizeAmount: ").Append(PrizeAmount).Append("\n");
            sb.Append("  PrizeMsg: ").Append(PrizeMsg).Append("\n");
            sb.Append("  RepeatTriggerFlag: ").Append(RepeatTriggerFlag).Append("\n");
            sb.Append("  TriggerResult: ").Append(TriggerResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayMarketingCampaignCashTriggerResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayMarketingCampaignCashTriggerResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayMarketingCampaignCashTriggerResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayMarketingCampaignCashTriggerResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BizNo == input.BizNo ||
                    (this.BizNo != null &&
                    this.BizNo.Equals(input.BizNo))
                ) && 
                (
                    this.CouponName == input.CouponName ||
                    (this.CouponName != null &&
                    this.CouponName.Equals(input.CouponName))
                ) && 
                (
                    this.ErrorMsg == input.ErrorMsg ||
                    (this.ErrorMsg != null &&
                    this.ErrorMsg.Equals(input.ErrorMsg))
                ) && 
                (
                    this.MerchantLogo == input.MerchantLogo ||
                    (this.MerchantLogo != null &&
                    this.MerchantLogo.Equals(input.MerchantLogo))
                ) && 
                (
                    this.OutBizNo == input.OutBizNo ||
                    (this.OutBizNo != null &&
                    this.OutBizNo.Equals(input.OutBizNo))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.PrizeAmount == input.PrizeAmount ||
                    (this.PrizeAmount != null &&
                    this.PrizeAmount.Equals(input.PrizeAmount))
                ) && 
                (
                    this.PrizeMsg == input.PrizeMsg ||
                    (this.PrizeMsg != null &&
                    this.PrizeMsg.Equals(input.PrizeMsg))
                ) && 
                (
                    this.RepeatTriggerFlag == input.RepeatTriggerFlag ||
                    (this.RepeatTriggerFlag != null &&
                    this.RepeatTriggerFlag.Equals(input.RepeatTriggerFlag))
                ) && 
                (
                    this.TriggerResult == input.TriggerResult ||
                    (this.TriggerResult != null &&
                    this.TriggerResult.Equals(input.TriggerResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BizNo != null)
                {
                    hashCode = (hashCode * 59) + this.BizNo.GetHashCode();
                }
                if (this.CouponName != null)
                {
                    hashCode = (hashCode * 59) + this.CouponName.GetHashCode();
                }
                if (this.ErrorMsg != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMsg.GetHashCode();
                }
                if (this.MerchantLogo != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantLogo.GetHashCode();
                }
                if (this.OutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutBizNo.GetHashCode();
                }
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                if (this.PrizeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PrizeAmount.GetHashCode();
                }
                if (this.PrizeMsg != null)
                {
                    hashCode = (hashCode * 59) + this.PrizeMsg.GetHashCode();
                }
                if (this.RepeatTriggerFlag != null)
                {
                    hashCode = (hashCode * 59) + this.RepeatTriggerFlag.GetHashCode();
                }
                if (this.TriggerResult != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerResult.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
