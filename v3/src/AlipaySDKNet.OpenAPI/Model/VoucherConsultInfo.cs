/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// VoucherConsultInfo
    /// </summary>
    [DataContract(Name = "VoucherConsultInfo")]
    public partial class VoucherConsultInfo : IEquatable<VoucherConsultInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherConsultInfo" /> class.
        /// </summary>
        /// <param name="ceilingAmount">封顶优惠金额，单位为元.</param>
        /// <param name="itemPromoInfo">itemPromoInfo.</param>
        /// <param name="optimal">是否为可使用的互斥券中最优的（目前返回的记录该值均为true，即可忽略该值判断）.</param>
        /// <param name="promoAmount">优惠总金额，单位为元.</param>
        /// <param name="promoText">优惠文案.</param>
        /// <param name="promoType">优惠类型： 代金(FIX),折扣(DISCOUNT),减至(SPECIAL，即特价券).</param>
        /// <param name="reductionAmount">满减金额，单位为元，仅针对代金券.</param>
        /// <param name="reductionRatio">优惠额度，如3折券，返回0.7，仅针对折扣券.</param>
        /// <param name="specifiedAmount">减至金额，单位为元，仅针对减至券.</param>
        /// <param name="thresholdAmount">优惠门槛，单位为元（部分券没有门槛金额）.</param>
        /// <param name="voucherId">券id.</param>
        /// <param name="voucherName">券名称.</param>
        /// <param name="voucherType">券类型： 1）全场券(ALL) 2）单品券(ITEM).</param>
        public VoucherConsultInfo(string ceilingAmount = default(string), ItemPromoInfo itemPromoInfo = default(ItemPromoInfo), bool optimal = default(bool), string promoAmount = default(string), string promoText = default(string), string promoType = default(string), string reductionAmount = default(string), string reductionRatio = default(string), string specifiedAmount = default(string), string thresholdAmount = default(string), string voucherId = default(string), string voucherName = default(string), string voucherType = default(string))
        {
            this.CeilingAmount = ceilingAmount;
            this.ItemPromoInfo = itemPromoInfo;
            this.Optimal = optimal;
            this.PromoAmount = promoAmount;
            this.PromoText = promoText;
            this.PromoType = promoType;
            this.ReductionAmount = reductionAmount;
            this.ReductionRatio = reductionRatio;
            this.SpecifiedAmount = specifiedAmount;
            this.ThresholdAmount = thresholdAmount;
            this.VoucherId = voucherId;
            this.VoucherName = voucherName;
            this.VoucherType = voucherType;
        }

        /// <summary>
        /// 封顶优惠金额，单位为元
        /// </summary>
        /// <value>封顶优惠金额，单位为元</value>
        [DataMember(Name = "ceiling_amount", EmitDefaultValue = false)]
        public string CeilingAmount { get; set; }

        /// <summary>
        /// Gets or Sets ItemPromoInfo
        /// </summary>
        [DataMember(Name = "item_promo_info", EmitDefaultValue = false)]
        public ItemPromoInfo ItemPromoInfo { get; set; }

        /// <summary>
        /// 是否为可使用的互斥券中最优的（目前返回的记录该值均为true，即可忽略该值判断）
        /// </summary>
        /// <value>是否为可使用的互斥券中最优的（目前返回的记录该值均为true，即可忽略该值判断）</value>
        [DataMember(Name = "optimal", EmitDefaultValue = true)]
        public bool Optimal { get; set; }

        /// <summary>
        /// 优惠总金额，单位为元
        /// </summary>
        /// <value>优惠总金额，单位为元</value>
        [DataMember(Name = "promo_amount", EmitDefaultValue = false)]
        public string PromoAmount { get; set; }

        /// <summary>
        /// 优惠文案
        /// </summary>
        /// <value>优惠文案</value>
        [DataMember(Name = "promo_text", EmitDefaultValue = false)]
        public string PromoText { get; set; }

        /// <summary>
        /// 优惠类型： 代金(FIX),折扣(DISCOUNT),减至(SPECIAL，即特价券)
        /// </summary>
        /// <value>优惠类型： 代金(FIX),折扣(DISCOUNT),减至(SPECIAL，即特价券)</value>
        [DataMember(Name = "promo_type", EmitDefaultValue = false)]
        public string PromoType { get; set; }

        /// <summary>
        /// 满减金额，单位为元，仅针对代金券
        /// </summary>
        /// <value>满减金额，单位为元，仅针对代金券</value>
        [DataMember(Name = "reduction_amount", EmitDefaultValue = false)]
        public string ReductionAmount { get; set; }

        /// <summary>
        /// 优惠额度，如3折券，返回0.7，仅针对折扣券
        /// </summary>
        /// <value>优惠额度，如3折券，返回0.7，仅针对折扣券</value>
        [DataMember(Name = "reduction_ratio", EmitDefaultValue = false)]
        public string ReductionRatio { get; set; }

        /// <summary>
        /// 减至金额，单位为元，仅针对减至券
        /// </summary>
        /// <value>减至金额，单位为元，仅针对减至券</value>
        [DataMember(Name = "specified_amount", EmitDefaultValue = false)]
        public string SpecifiedAmount { get; set; }

        /// <summary>
        /// 优惠门槛，单位为元（部分券没有门槛金额）
        /// </summary>
        /// <value>优惠门槛，单位为元（部分券没有门槛金额）</value>
        [DataMember(Name = "threshold_amount", EmitDefaultValue = false)]
        public string ThresholdAmount { get; set; }

        /// <summary>
        /// 券id
        /// </summary>
        /// <value>券id</value>
        [DataMember(Name = "voucher_id", EmitDefaultValue = false)]
        public string VoucherId { get; set; }

        /// <summary>
        /// 券名称
        /// </summary>
        /// <value>券名称</value>
        [DataMember(Name = "voucher_name", EmitDefaultValue = false)]
        public string VoucherName { get; set; }

        /// <summary>
        /// 券类型： 1）全场券(ALL) 2）单品券(ITEM)
        /// </summary>
        /// <value>券类型： 1）全场券(ALL) 2）单品券(ITEM)</value>
        [DataMember(Name = "voucher_type", EmitDefaultValue = false)]
        public string VoucherType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherConsultInfo {\n");
            sb.Append("  CeilingAmount: ").Append(CeilingAmount).Append("\n");
            sb.Append("  ItemPromoInfo: ").Append(ItemPromoInfo).Append("\n");
            sb.Append("  Optimal: ").Append(Optimal).Append("\n");
            sb.Append("  PromoAmount: ").Append(PromoAmount).Append("\n");
            sb.Append("  PromoText: ").Append(PromoText).Append("\n");
            sb.Append("  PromoType: ").Append(PromoType).Append("\n");
            sb.Append("  ReductionAmount: ").Append(ReductionAmount).Append("\n");
            sb.Append("  ReductionRatio: ").Append(ReductionRatio).Append("\n");
            sb.Append("  SpecifiedAmount: ").Append(SpecifiedAmount).Append("\n");
            sb.Append("  ThresholdAmount: ").Append(ThresholdAmount).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  VoucherName: ").Append(VoucherName).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoucherConsultInfo);
        }

        /// <summary>
        /// Returns true if VoucherConsultInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VoucherConsultInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoucherConsultInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CeilingAmount == input.CeilingAmount ||
                    (this.CeilingAmount != null &&
                    this.CeilingAmount.Equals(input.CeilingAmount))
                ) && 
                (
                    this.ItemPromoInfo == input.ItemPromoInfo ||
                    (this.ItemPromoInfo != null &&
                    this.ItemPromoInfo.Equals(input.ItemPromoInfo))
                ) && 
                (
                    this.Optimal == input.Optimal ||
                    this.Optimal.Equals(input.Optimal)
                ) && 
                (
                    this.PromoAmount == input.PromoAmount ||
                    (this.PromoAmount != null &&
                    this.PromoAmount.Equals(input.PromoAmount))
                ) && 
                (
                    this.PromoText == input.PromoText ||
                    (this.PromoText != null &&
                    this.PromoText.Equals(input.PromoText))
                ) && 
                (
                    this.PromoType == input.PromoType ||
                    (this.PromoType != null &&
                    this.PromoType.Equals(input.PromoType))
                ) && 
                (
                    this.ReductionAmount == input.ReductionAmount ||
                    (this.ReductionAmount != null &&
                    this.ReductionAmount.Equals(input.ReductionAmount))
                ) && 
                (
                    this.ReductionRatio == input.ReductionRatio ||
                    (this.ReductionRatio != null &&
                    this.ReductionRatio.Equals(input.ReductionRatio))
                ) && 
                (
                    this.SpecifiedAmount == input.SpecifiedAmount ||
                    (this.SpecifiedAmount != null &&
                    this.SpecifiedAmount.Equals(input.SpecifiedAmount))
                ) && 
                (
                    this.ThresholdAmount == input.ThresholdAmount ||
                    (this.ThresholdAmount != null &&
                    this.ThresholdAmount.Equals(input.ThresholdAmount))
                ) && 
                (
                    this.VoucherId == input.VoucherId ||
                    (this.VoucherId != null &&
                    this.VoucherId.Equals(input.VoucherId))
                ) && 
                (
                    this.VoucherName == input.VoucherName ||
                    (this.VoucherName != null &&
                    this.VoucherName.Equals(input.VoucherName))
                ) && 
                (
                    this.VoucherType == input.VoucherType ||
                    (this.VoucherType != null &&
                    this.VoucherType.Equals(input.VoucherType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CeilingAmount != null)
                {
                    hashCode = (hashCode * 59) + this.CeilingAmount.GetHashCode();
                }
                if (this.ItemPromoInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ItemPromoInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optimal.GetHashCode();
                if (this.PromoAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PromoAmount.GetHashCode();
                }
                if (this.PromoText != null)
                {
                    hashCode = (hashCode * 59) + this.PromoText.GetHashCode();
                }
                if (this.PromoType != null)
                {
                    hashCode = (hashCode * 59) + this.PromoType.GetHashCode();
                }
                if (this.ReductionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ReductionAmount.GetHashCode();
                }
                if (this.ReductionRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ReductionRatio.GetHashCode();
                }
                if (this.SpecifiedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SpecifiedAmount.GetHashCode();
                }
                if (this.ThresholdAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ThresholdAmount.GetHashCode();
                }
                if (this.VoucherId != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherId.GetHashCode();
                }
                if (this.VoucherName != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherName.GetHashCode();
                }
                if (this.VoucherType != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
