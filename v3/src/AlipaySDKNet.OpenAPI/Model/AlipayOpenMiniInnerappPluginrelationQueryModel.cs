/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenMiniInnerappPluginrelationQueryModel
    /// </summary>
    [DataContract(Name = "AlipayOpenMiniInnerappPluginrelationQueryModel")]
    public partial class AlipayOpenMiniInnerappPluginrelationQueryModel : IEquatable<AlipayOpenMiniInnerappPluginrelationQueryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenMiniInnerappPluginrelationQueryModel" /> class.
        /// </summary>
        /// <param name="miniAppIdList">应用ID列表.</param>
        /// <param name="pageNum">页码.</param>
        /// <param name="pageSize">页大小.</param>
        /// <param name="pluginId">插件ID.</param>
        /// <param name="pluginRelationStatusList">插件使用关系状态，取值包括WORKING/WAIT_WORKING/STOP_WORKING/EXECUTING.</param>
        /// <param name="runModelType">运行类型，取值包括ONLINE/TRIAL/REVIEW/DEBUG.</param>
        /// <param name="showBetaInfo">是否展示邀测信息.</param>
        public AlipayOpenMiniInnerappPluginrelationQueryModel(List<string> miniAppIdList = default(List<string>), int pageNum = default(int), int pageSize = default(int), string pluginId = default(string), List<string> pluginRelationStatusList = default(List<string>), string runModelType = default(string), bool showBetaInfo = default(bool))
        {
            this.MiniAppIdList = miniAppIdList;
            this.PageNum = pageNum;
            this.PageSize = pageSize;
            this.PluginId = pluginId;
            this.PluginRelationStatusList = pluginRelationStatusList;
            this.RunModelType = runModelType;
            this.ShowBetaInfo = showBetaInfo;
        }

        /// <summary>
        /// 应用ID列表
        /// </summary>
        /// <value>应用ID列表</value>
        [DataMember(Name = "mini_app_id_list", EmitDefaultValue = false)]
        public List<string> MiniAppIdList { get; set; }

        /// <summary>
        /// 页码
        /// </summary>
        /// <value>页码</value>
        [DataMember(Name = "page_num", EmitDefaultValue = false)]
        public int PageNum { get; set; }

        /// <summary>
        /// 页大小
        /// </summary>
        /// <value>页大小</value>
        [DataMember(Name = "page_size", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// 插件ID
        /// </summary>
        /// <value>插件ID</value>
        [DataMember(Name = "plugin_id", EmitDefaultValue = false)]
        public string PluginId { get; set; }

        /// <summary>
        /// 插件使用关系状态，取值包括WORKING/WAIT_WORKING/STOP_WORKING/EXECUTING
        /// </summary>
        /// <value>插件使用关系状态，取值包括WORKING/WAIT_WORKING/STOP_WORKING/EXECUTING</value>
        [DataMember(Name = "plugin_relation_status_list", EmitDefaultValue = false)]
        public List<string> PluginRelationStatusList { get; set; }

        /// <summary>
        /// 运行类型，取值包括ONLINE/TRIAL/REVIEW/DEBUG
        /// </summary>
        /// <value>运行类型，取值包括ONLINE/TRIAL/REVIEW/DEBUG</value>
        [DataMember(Name = "run_model_type", EmitDefaultValue = false)]
        public string RunModelType { get; set; }

        /// <summary>
        /// 是否展示邀测信息
        /// </summary>
        /// <value>是否展示邀测信息</value>
        [DataMember(Name = "show_beta_info", EmitDefaultValue = true)]
        public bool ShowBetaInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenMiniInnerappPluginrelationQueryModel {\n");
            sb.Append("  MiniAppIdList: ").Append(MiniAppIdList).Append("\n");
            sb.Append("  PageNum: ").Append(PageNum).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PluginId: ").Append(PluginId).Append("\n");
            sb.Append("  PluginRelationStatusList: ").Append(PluginRelationStatusList).Append("\n");
            sb.Append("  RunModelType: ").Append(RunModelType).Append("\n");
            sb.Append("  ShowBetaInfo: ").Append(ShowBetaInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenMiniInnerappPluginrelationQueryModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenMiniInnerappPluginrelationQueryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenMiniInnerappPluginrelationQueryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenMiniInnerappPluginrelationQueryModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MiniAppIdList == input.MiniAppIdList ||
                    this.MiniAppIdList != null &&
                    input.MiniAppIdList != null &&
                    this.MiniAppIdList.SequenceEqual(input.MiniAppIdList)
                ) && 
                (
                    this.PageNum == input.PageNum ||
                    this.PageNum.Equals(input.PageNum)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.PluginId == input.PluginId ||
                    (this.PluginId != null &&
                    this.PluginId.Equals(input.PluginId))
                ) && 
                (
                    this.PluginRelationStatusList == input.PluginRelationStatusList ||
                    this.PluginRelationStatusList != null &&
                    input.PluginRelationStatusList != null &&
                    this.PluginRelationStatusList.SequenceEqual(input.PluginRelationStatusList)
                ) && 
                (
                    this.RunModelType == input.RunModelType ||
                    (this.RunModelType != null &&
                    this.RunModelType.Equals(input.RunModelType))
                ) && 
                (
                    this.ShowBetaInfo == input.ShowBetaInfo ||
                    this.ShowBetaInfo.Equals(input.ShowBetaInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MiniAppIdList != null)
                {
                    hashCode = (hashCode * 59) + this.MiniAppIdList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageNum.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                if (this.PluginId != null)
                {
                    hashCode = (hashCode * 59) + this.PluginId.GetHashCode();
                }
                if (this.PluginRelationStatusList != null)
                {
                    hashCode = (hashCode * 59) + this.PluginRelationStatusList.GetHashCode();
                }
                if (this.RunModelType != null)
                {
                    hashCode = (hashCode * 59) + this.RunModelType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowBetaInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
