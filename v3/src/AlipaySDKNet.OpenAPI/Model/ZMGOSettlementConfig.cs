/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ZMGOSettlementConfig
    /// </summary>
    [DataContract(Name = "ZMGOSettlementConfig")]
    public partial class ZMGOSettlementConfig : IEquatable<ZMGOSettlementConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZMGOSettlementConfig" /> class.
        /// </summary>
        /// <param name="customFeeName">会员费扣费名称.</param>
        /// <param name="cycleFlexWithholdConfig">cycleFlexWithholdConfig.</param>
        /// <param name="cycleWithholdConfig">cycleWithholdConfig.</param>
        /// <param name="expStopDelayDays">预计结算延迟天数，当exp_stop_time_mode取值RELATIVE_DATE、ABSOLATE_DATE、ABSOLUTE_PLUS_1_DATE时，必传.</param>
        /// <param name="expStopTime">预期结算时间，当exp_stop_time_mode取值APPOINT_DATE时，必传.</param>
        /// <param name="expStopTimeMode">预计结算时间模式，取值：（1）RELATIVE_DATE(\&quot;RELATIVE_DATE\&quot;, \&quot;相对日期\&quot;), （2）ABSOLATE_DATE(\&quot;ABSOLATE_DATE\&quot;, \&quot;绝对日期(当日开始计算)\&quot;), （3）ABSOLUTE_PLUS_1_DATE(\&quot;ABSOLUTE_PLUS_1_DATE\&quot;, \&quot;绝对日期(次日开始计算)\&quot;), （4）APPOINT_DATE(\&quot;APPOINT_DATE\&quot;, \&quot;指定日期\&quot;).</param>
        /// <param name="fulfilltimesCustomSettlementPlan">按履约次数灵活扣款计划。当settlement_type取值为fulfillTimesCustomSettlement时，此属性必传.</param>
        /// <param name="settlementType">结算类型，取值：     BENEFIT_SETTLEMENT(\&quot;benefitSettlement\&quot;, \&quot;按权益金额结算\&quot;),     FULFILL_TIMES_CUSTOM_SETTLEMENT(\&quot;fulfillTimesCustomSettlement\&quot;,\&quot;按履约次数扣款\&quot;).</param>
        public ZMGOSettlementConfig(string customFeeName = default(string), ZMGOCycleFlexConfig cycleFlexWithholdConfig = default(ZMGOCycleFlexConfig), ZMGOCycleWithholdConfig cycleWithholdConfig = default(ZMGOCycleWithholdConfig), int expStopDelayDays = default(int), string expStopTime = default(string), string expStopTimeMode = default(string), string fulfilltimesCustomSettlementPlan = default(string), string settlementType = default(string))
        {
            this.CustomFeeName = customFeeName;
            this.CycleFlexWithholdConfig = cycleFlexWithholdConfig;
            this.CycleWithholdConfig = cycleWithholdConfig;
            this.ExpStopDelayDays = expStopDelayDays;
            this.ExpStopTime = expStopTime;
            this.ExpStopTimeMode = expStopTimeMode;
            this.FulfilltimesCustomSettlementPlan = fulfilltimesCustomSettlementPlan;
            this.SettlementType = settlementType;
        }

        /// <summary>
        /// 会员费扣费名称
        /// </summary>
        /// <value>会员费扣费名称</value>
        [DataMember(Name = "custom_fee_name", EmitDefaultValue = false)]
        public string CustomFeeName { get; set; }

        /// <summary>
        /// Gets or Sets CycleFlexWithholdConfig
        /// </summary>
        [DataMember(Name = "cycle_flex_withhold_config", EmitDefaultValue = false)]
        public ZMGOCycleFlexConfig CycleFlexWithholdConfig { get; set; }

        /// <summary>
        /// Gets or Sets CycleWithholdConfig
        /// </summary>
        [DataMember(Name = "cycle_withhold_config", EmitDefaultValue = false)]
        public ZMGOCycleWithholdConfig CycleWithholdConfig { get; set; }

        /// <summary>
        /// 预计结算延迟天数，当exp_stop_time_mode取值RELATIVE_DATE、ABSOLATE_DATE、ABSOLUTE_PLUS_1_DATE时，必传
        /// </summary>
        /// <value>预计结算延迟天数，当exp_stop_time_mode取值RELATIVE_DATE、ABSOLATE_DATE、ABSOLUTE_PLUS_1_DATE时，必传</value>
        [DataMember(Name = "exp_stop_delay_days", EmitDefaultValue = false)]
        public int ExpStopDelayDays { get; set; }

        /// <summary>
        /// 预期结算时间，当exp_stop_time_mode取值APPOINT_DATE时，必传
        /// </summary>
        /// <value>预期结算时间，当exp_stop_time_mode取值APPOINT_DATE时，必传</value>
        [DataMember(Name = "exp_stop_time", EmitDefaultValue = false)]
        public string ExpStopTime { get; set; }

        /// <summary>
        /// 预计结算时间模式，取值：（1）RELATIVE_DATE(\&quot;RELATIVE_DATE\&quot;, \&quot;相对日期\&quot;), （2）ABSOLATE_DATE(\&quot;ABSOLATE_DATE\&quot;, \&quot;绝对日期(当日开始计算)\&quot;), （3）ABSOLUTE_PLUS_1_DATE(\&quot;ABSOLUTE_PLUS_1_DATE\&quot;, \&quot;绝对日期(次日开始计算)\&quot;), （4）APPOINT_DATE(\&quot;APPOINT_DATE\&quot;, \&quot;指定日期\&quot;)
        /// </summary>
        /// <value>预计结算时间模式，取值：（1）RELATIVE_DATE(\&quot;RELATIVE_DATE\&quot;, \&quot;相对日期\&quot;), （2）ABSOLATE_DATE(\&quot;ABSOLATE_DATE\&quot;, \&quot;绝对日期(当日开始计算)\&quot;), （3）ABSOLUTE_PLUS_1_DATE(\&quot;ABSOLUTE_PLUS_1_DATE\&quot;, \&quot;绝对日期(次日开始计算)\&quot;), （4）APPOINT_DATE(\&quot;APPOINT_DATE\&quot;, \&quot;指定日期\&quot;)</value>
        [DataMember(Name = "exp_stop_time_mode", EmitDefaultValue = false)]
        public string ExpStopTimeMode { get; set; }

        /// <summary>
        /// 按履约次数灵活扣款计划。当settlement_type取值为fulfillTimesCustomSettlement时，此属性必传
        /// </summary>
        /// <value>按履约次数灵活扣款计划。当settlement_type取值为fulfillTimesCustomSettlement时，此属性必传</value>
        [DataMember(Name = "fulfilltimes_custom_settlement_plan", EmitDefaultValue = false)]
        public string FulfilltimesCustomSettlementPlan { get; set; }

        /// <summary>
        /// 结算类型，取值：     BENEFIT_SETTLEMENT(\&quot;benefitSettlement\&quot;, \&quot;按权益金额结算\&quot;),     FULFILL_TIMES_CUSTOM_SETTLEMENT(\&quot;fulfillTimesCustomSettlement\&quot;,\&quot;按履约次数扣款\&quot;)
        /// </summary>
        /// <value>结算类型，取值：     BENEFIT_SETTLEMENT(\&quot;benefitSettlement\&quot;, \&quot;按权益金额结算\&quot;),     FULFILL_TIMES_CUSTOM_SETTLEMENT(\&quot;fulfillTimesCustomSettlement\&quot;,\&quot;按履约次数扣款\&quot;)</value>
        [DataMember(Name = "settlement_type", EmitDefaultValue = false)]
        public string SettlementType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZMGOSettlementConfig {\n");
            sb.Append("  CustomFeeName: ").Append(CustomFeeName).Append("\n");
            sb.Append("  CycleFlexWithholdConfig: ").Append(CycleFlexWithholdConfig).Append("\n");
            sb.Append("  CycleWithholdConfig: ").Append(CycleWithholdConfig).Append("\n");
            sb.Append("  ExpStopDelayDays: ").Append(ExpStopDelayDays).Append("\n");
            sb.Append("  ExpStopTime: ").Append(ExpStopTime).Append("\n");
            sb.Append("  ExpStopTimeMode: ").Append(ExpStopTimeMode).Append("\n");
            sb.Append("  FulfilltimesCustomSettlementPlan: ").Append(FulfilltimesCustomSettlementPlan).Append("\n");
            sb.Append("  SettlementType: ").Append(SettlementType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZMGOSettlementConfig);
        }

        /// <summary>
        /// Returns true if ZMGOSettlementConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ZMGOSettlementConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZMGOSettlementConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomFeeName == input.CustomFeeName ||
                    (this.CustomFeeName != null &&
                    this.CustomFeeName.Equals(input.CustomFeeName))
                ) && 
                (
                    this.CycleFlexWithholdConfig == input.CycleFlexWithholdConfig ||
                    (this.CycleFlexWithholdConfig != null &&
                    this.CycleFlexWithholdConfig.Equals(input.CycleFlexWithholdConfig))
                ) && 
                (
                    this.CycleWithholdConfig == input.CycleWithholdConfig ||
                    (this.CycleWithholdConfig != null &&
                    this.CycleWithholdConfig.Equals(input.CycleWithholdConfig))
                ) && 
                (
                    this.ExpStopDelayDays == input.ExpStopDelayDays ||
                    this.ExpStopDelayDays.Equals(input.ExpStopDelayDays)
                ) && 
                (
                    this.ExpStopTime == input.ExpStopTime ||
                    (this.ExpStopTime != null &&
                    this.ExpStopTime.Equals(input.ExpStopTime))
                ) && 
                (
                    this.ExpStopTimeMode == input.ExpStopTimeMode ||
                    (this.ExpStopTimeMode != null &&
                    this.ExpStopTimeMode.Equals(input.ExpStopTimeMode))
                ) && 
                (
                    this.FulfilltimesCustomSettlementPlan == input.FulfilltimesCustomSettlementPlan ||
                    (this.FulfilltimesCustomSettlementPlan != null &&
                    this.FulfilltimesCustomSettlementPlan.Equals(input.FulfilltimesCustomSettlementPlan))
                ) && 
                (
                    this.SettlementType == input.SettlementType ||
                    (this.SettlementType != null &&
                    this.SettlementType.Equals(input.SettlementType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomFeeName != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFeeName.GetHashCode();
                }
                if (this.CycleFlexWithholdConfig != null)
                {
                    hashCode = (hashCode * 59) + this.CycleFlexWithholdConfig.GetHashCode();
                }
                if (this.CycleWithholdConfig != null)
                {
                    hashCode = (hashCode * 59) + this.CycleWithholdConfig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpStopDelayDays.GetHashCode();
                if (this.ExpStopTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpStopTime.GetHashCode();
                }
                if (this.ExpStopTimeMode != null)
                {
                    hashCode = (hashCode * 59) + this.ExpStopTimeMode.GetHashCode();
                }
                if (this.FulfilltimesCustomSettlementPlan != null)
                {
                    hashCode = (hashCode * 59) + this.FulfilltimesCustomSettlementPlan.GetHashCode();
                }
                if (this.SettlementType != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
