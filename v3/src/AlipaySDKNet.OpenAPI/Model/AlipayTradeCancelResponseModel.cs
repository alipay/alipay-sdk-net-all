/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradeCancelResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradeCancelResponseModel")]
    public partial class AlipayTradeCancelResponseModel : IEquatable<AlipayTradeCancelResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeCancelResponseModel" /> class.
        /// </summary>
        /// <param name="action">本次撤销触发的交易动作,接口调用成功且交易存在时返回。可能的返回值： close：交易未支付，触发关闭交易动作，无退款； refund：交易已支付，触发交易退款动作； 未返回：未查询到交易，或接口调用失败；.</param>
        /// <param name="gmtRefundPay">当撤销产生了退款时，返回退款时间；  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="outTradeNo">商户订单号.</param>
        /// <param name="refundSettlementId">当撤销产生了退款时，返回的退款清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="retryFlag">是否需要重试.</param>
        /// <param name="tradeNo">支付宝交易号; 当发生交易关闭或交易退款时返回；.</param>
        public AlipayTradeCancelResponseModel(string action = default(string), string gmtRefundPay = default(string), string outTradeNo = default(string), string refundSettlementId = default(string), string retryFlag = default(string), string tradeNo = default(string))
        {
            this.Action = action;
            this.GmtRefundPay = gmtRefundPay;
            this.OutTradeNo = outTradeNo;
            this.RefundSettlementId = refundSettlementId;
            this.RetryFlag = retryFlag;
            this.TradeNo = tradeNo;
        }

        /// <summary>
        /// 本次撤销触发的交易动作,接口调用成功且交易存在时返回。可能的返回值： close：交易未支付，触发关闭交易动作，无退款； refund：交易已支付，触发交易退款动作； 未返回：未查询到交易，或接口调用失败；
        /// </summary>
        /// <value>本次撤销触发的交易动作,接口调用成功且交易存在时返回。可能的返回值： close：交易未支付，触发关闭交易动作，无退款； refund：交易已支付，触发交易退款动作； 未返回：未查询到交易，或接口调用失败；</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// 当撤销产生了退款时，返回退款时间；  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>当撤销产生了退款时，返回退款时间；  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "gmt_refund_pay", EmitDefaultValue = false)]
        public string GmtRefundPay { get; set; }

        /// <summary>
        /// 商户订单号
        /// </summary>
        /// <value>商户订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 当撤销产生了退款时，返回的退款清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>当撤销产生了退款时，返回的退款清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "refund_settlement_id", EmitDefaultValue = false)]
        public string RefundSettlementId { get; set; }

        /// <summary>
        /// 是否需要重试
        /// </summary>
        /// <value>是否需要重试</value>
        [DataMember(Name = "retry_flag", EmitDefaultValue = false)]
        public string RetryFlag { get; set; }

        /// <summary>
        /// 支付宝交易号; 当发生交易关闭或交易退款时返回；
        /// </summary>
        /// <value>支付宝交易号; 当发生交易关闭或交易退款时返回；</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeCancelResponseModel {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  GmtRefundPay: ").Append(GmtRefundPay).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  RefundSettlementId: ").Append(RefundSettlementId).Append("\n");
            sb.Append("  RetryFlag: ").Append(RetryFlag).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradeCancelResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradeCancelResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradeCancelResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradeCancelResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.GmtRefundPay == input.GmtRefundPay ||
                    (this.GmtRefundPay != null &&
                    this.GmtRefundPay.Equals(input.GmtRefundPay))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.RefundSettlementId == input.RefundSettlementId ||
                    (this.RefundSettlementId != null &&
                    this.RefundSettlementId.Equals(input.RefundSettlementId))
                ) && 
                (
                    this.RetryFlag == input.RetryFlag ||
                    (this.RetryFlag != null &&
                    this.RetryFlag.Equals(input.RetryFlag))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.GmtRefundPay != null)
                {
                    hashCode = (hashCode * 59) + this.GmtRefundPay.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.RefundSettlementId != null)
                {
                    hashCode = (hashCode * 59) + this.RefundSettlementId.GetHashCode();
                }
                if (this.RetryFlag != null)
                {
                    hashCode = (hashCode * 59) + this.RetryFlag.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
