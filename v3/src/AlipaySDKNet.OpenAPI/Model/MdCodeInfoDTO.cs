/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MdCodeInfoDTO
    /// </summary>
    [DataContract(Name = "MdCodeInfoDTO")]
    public partial class MdCodeInfoDTO : IEquatable<MdCodeInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MdCodeInfoDTO" /> class.
        /// </summary>
        /// <param name="codeStatus">本次回传动态码的状态：  SUCCESS: 本次发码成功  FAIL_RETRY: 本次发码失败，且需要支付宝重试（重新通知商户发码）  FAIL_NOT_RETRY: 本次发码失败，且无需支付宝重试（无需重新通知商户发码）.</param>
        /// <param name="codeValue">动态码的码值：  code_status为SUCCESS时必填；  基于此码值生成条形码或二维码用于扫码核销。.</param>
        /// <param name="expireTime">当前动态码的过期（失效）时间：   code_status为SUCCESS时必填。.</param>
        /// <param name="timeStamp">商户回传动态码的时间戳 (单位秒)。    即商户调接口回传动态码时刻对应的long类型时间戳，用于区分不同的发码请求。.</param>
        public MdCodeInfoDTO(string codeStatus = default(string), string codeValue = default(string), string expireTime = default(string), int timeStamp = default(int))
        {
            this.CodeStatus = codeStatus;
            this.CodeValue = codeValue;
            this.ExpireTime = expireTime;
            this.TimeStamp = timeStamp;
        }

        /// <summary>
        /// 本次回传动态码的状态：  SUCCESS: 本次发码成功  FAIL_RETRY: 本次发码失败，且需要支付宝重试（重新通知商户发码）  FAIL_NOT_RETRY: 本次发码失败，且无需支付宝重试（无需重新通知商户发码）
        /// </summary>
        /// <value>本次回传动态码的状态：  SUCCESS: 本次发码成功  FAIL_RETRY: 本次发码失败，且需要支付宝重试（重新通知商户发码）  FAIL_NOT_RETRY: 本次发码失败，且无需支付宝重试（无需重新通知商户发码）</value>
        [DataMember(Name = "code_status", EmitDefaultValue = false)]
        public string CodeStatus { get; set; }

        /// <summary>
        /// 动态码的码值：  code_status为SUCCESS时必填；  基于此码值生成条形码或二维码用于扫码核销。
        /// </summary>
        /// <value>动态码的码值：  code_status为SUCCESS时必填；  基于此码值生成条形码或二维码用于扫码核销。</value>
        [DataMember(Name = "code_value", EmitDefaultValue = false)]
        public string CodeValue { get; set; }

        /// <summary>
        /// 当前动态码的过期（失效）时间：   code_status为SUCCESS时必填。
        /// </summary>
        /// <value>当前动态码的过期（失效）时间：   code_status为SUCCESS时必填。</value>
        [DataMember(Name = "expire_time", EmitDefaultValue = false)]
        public string ExpireTime { get; set; }

        /// <summary>
        /// 商户回传动态码的时间戳 (单位秒)。    即商户调接口回传动态码时刻对应的long类型时间戳，用于区分不同的发码请求。
        /// </summary>
        /// <value>商户回传动态码的时间戳 (单位秒)。    即商户调接口回传动态码时刻对应的long类型时间戳，用于区分不同的发码请求。</value>
        [DataMember(Name = "time_stamp", EmitDefaultValue = false)]
        public int TimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MdCodeInfoDTO {\n");
            sb.Append("  CodeStatus: ").Append(CodeStatus).Append("\n");
            sb.Append("  CodeValue: ").Append(CodeValue).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MdCodeInfoDTO);
        }

        /// <summary>
        /// Returns true if MdCodeInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MdCodeInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MdCodeInfoDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CodeStatus == input.CodeStatus ||
                    (this.CodeStatus != null &&
                    this.CodeStatus.Equals(input.CodeStatus))
                ) && 
                (
                    this.CodeValue == input.CodeValue ||
                    (this.CodeValue != null &&
                    this.CodeValue.Equals(input.CodeValue))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    (this.ExpireTime != null &&
                    this.ExpireTime.Equals(input.ExpireTime))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    this.TimeStamp.Equals(input.TimeStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CodeStatus.GetHashCode();
                }
                if (this.CodeValue != null)
                {
                    hashCode = (hashCode * 59) + this.CodeValue.GetHashCode();
                }
                if (this.ExpireTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpireTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeStamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
