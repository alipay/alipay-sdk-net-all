/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAuthAppAesSetResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAuthAppAesSetResponseModel")]
    public partial class AlipayOpenAuthAppAesSetResponseModel : IEquatable<AlipayOpenAuthAppAesSetResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAuthAppAesSetResponseModel" /> class.
        /// </summary>
        /// <param name="aesKey">商家应用AES KEY密文，需要ISV使用三方应用配置的AES密钥内容进行解密。详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/grefvl/getaes\&quot;&gt;应用AES密钥管理&lt;/a&gt;。.</param>
        public AlipayOpenAuthAppAesSetResponseModel(string aesKey = default(string))
        {
            this.AesKey = aesKey;
        }

        /// <summary>
        /// 商家应用AES KEY密文，需要ISV使用三方应用配置的AES密钥内容进行解密。详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/grefvl/getaes\&quot;&gt;应用AES密钥管理&lt;/a&gt;。
        /// </summary>
        /// <value>商家应用AES KEY密文，需要ISV使用三方应用配置的AES密钥内容进行解密。详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/grefvl/getaes\&quot;&gt;应用AES密钥管理&lt;/a&gt;。</value>
        [DataMember(Name = "aes_key", EmitDefaultValue = false)]
        public string AesKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAuthAppAesSetResponseModel {\n");
            sb.Append("  AesKey: ").Append(AesKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAuthAppAesSetResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAuthAppAesSetResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAuthAppAesSetResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAuthAppAesSetResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AesKey == input.AesKey ||
                    (this.AesKey != null &&
                    this.AesKey.Equals(input.AesKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AesKey != null)
                {
                    hashCode = (hashCode * 59) + this.AesKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
