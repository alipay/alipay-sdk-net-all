/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ActivityBaseInfo
    /// </summary>
    [DataContract(Name = "ActivityBaseInfo")]
    public partial class ActivityBaseInfo : IEquatable<ActivityBaseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityBaseInfo" /> class.
        /// </summary>
        /// <param name="activityId">活动id.</param>
        /// <param name="activityName">活动名称。.</param>
        /// <param name="activityOperationStatus">活动操作状态。.</param>
        /// <param name="activityProductType">券活动产品类型.</param>
        /// <param name="activityStatus">活动状态 。 ACTIVE:活动已激活，表示活动已经生效，等到活动开始(publish_start_time)之后用户就可以参与活动。  PAUSE:活动已暂停，表示商户临时暂停该活动，该状态下用户不能参与活动。.</param>
        /// <param name="belongMerchantInfo">belongMerchantInfo.</param>
        /// <param name="codeMode">码模式。   MERCHANT_UPLOAD：商户上传自定义code，发券时系统随机选取上传的券code发放  MERCHANT_API：发奖时指定券码发奖，此模式无须提前上传券码。.</param>
        /// <param name="outActivityId">外部活动ID.</param>
        public ActivityBaseInfo(string activityId = default(string), string activityName = default(string), string activityOperationStatus = default(string), string activityProductType = default(string), string activityStatus = default(string), BelongMerchantInfo belongMerchantInfo = default(BelongMerchantInfo), string codeMode = default(string), string outActivityId = default(string))
        {
            this.ActivityId = activityId;
            this.ActivityName = activityName;
            this.ActivityOperationStatus = activityOperationStatus;
            this.ActivityProductType = activityProductType;
            this.ActivityStatus = activityStatus;
            this.BelongMerchantInfo = belongMerchantInfo;
            this.CodeMode = codeMode;
            this.OutActivityId = outActivityId;
        }

        /// <summary>
        /// 活动id
        /// </summary>
        /// <value>活动id</value>
        [DataMember(Name = "activity_id", EmitDefaultValue = false)]
        public string ActivityId { get; set; }

        /// <summary>
        /// 活动名称。
        /// </summary>
        /// <value>活动名称。</value>
        [DataMember(Name = "activity_name", EmitDefaultValue = false)]
        public string ActivityName { get; set; }

        /// <summary>
        /// 活动操作状态。
        /// </summary>
        /// <value>活动操作状态。</value>
        [DataMember(Name = "activity_operation_status", EmitDefaultValue = false)]
        public string ActivityOperationStatus { get; set; }

        /// <summary>
        /// 券活动产品类型
        /// </summary>
        /// <value>券活动产品类型</value>
        [DataMember(Name = "activity_product_type", EmitDefaultValue = false)]
        public string ActivityProductType { get; set; }

        /// <summary>
        /// 活动状态 。 ACTIVE:活动已激活，表示活动已经生效，等到活动开始(publish_start_time)之后用户就可以参与活动。  PAUSE:活动已暂停，表示商户临时暂停该活动，该状态下用户不能参与活动。
        /// </summary>
        /// <value>活动状态 。 ACTIVE:活动已激活，表示活动已经生效，等到活动开始(publish_start_time)之后用户就可以参与活动。  PAUSE:活动已暂停，表示商户临时暂停该活动，该状态下用户不能参与活动。</value>
        [DataMember(Name = "activity_status", EmitDefaultValue = false)]
        public string ActivityStatus { get; set; }

        /// <summary>
        /// Gets or Sets BelongMerchantInfo
        /// </summary>
        [DataMember(Name = "belong_merchant_info", EmitDefaultValue = false)]
        public BelongMerchantInfo BelongMerchantInfo { get; set; }

        /// <summary>
        /// 码模式。   MERCHANT_UPLOAD：商户上传自定义code，发券时系统随机选取上传的券code发放  MERCHANT_API：发奖时指定券码发奖，此模式无须提前上传券码。
        /// </summary>
        /// <value>码模式。   MERCHANT_UPLOAD：商户上传自定义code，发券时系统随机选取上传的券code发放  MERCHANT_API：发奖时指定券码发奖，此模式无须提前上传券码。</value>
        [DataMember(Name = "code_mode", EmitDefaultValue = false)]
        public string CodeMode { get; set; }

        /// <summary>
        /// 外部活动ID
        /// </summary>
        /// <value>外部活动ID</value>
        [DataMember(Name = "out_activity_id", EmitDefaultValue = false)]
        public string OutActivityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityBaseInfo {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ActivityName: ").Append(ActivityName).Append("\n");
            sb.Append("  ActivityOperationStatus: ").Append(ActivityOperationStatus).Append("\n");
            sb.Append("  ActivityProductType: ").Append(ActivityProductType).Append("\n");
            sb.Append("  ActivityStatus: ").Append(ActivityStatus).Append("\n");
            sb.Append("  BelongMerchantInfo: ").Append(BelongMerchantInfo).Append("\n");
            sb.Append("  CodeMode: ").Append(CodeMode).Append("\n");
            sb.Append("  OutActivityId: ").Append(OutActivityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityBaseInfo);
        }

        /// <summary>
        /// Returns true if ActivityBaseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityBaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityBaseInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.ActivityName == input.ActivityName ||
                    (this.ActivityName != null &&
                    this.ActivityName.Equals(input.ActivityName))
                ) && 
                (
                    this.ActivityOperationStatus == input.ActivityOperationStatus ||
                    (this.ActivityOperationStatus != null &&
                    this.ActivityOperationStatus.Equals(input.ActivityOperationStatus))
                ) && 
                (
                    this.ActivityProductType == input.ActivityProductType ||
                    (this.ActivityProductType != null &&
                    this.ActivityProductType.Equals(input.ActivityProductType))
                ) && 
                (
                    this.ActivityStatus == input.ActivityStatus ||
                    (this.ActivityStatus != null &&
                    this.ActivityStatus.Equals(input.ActivityStatus))
                ) && 
                (
                    this.BelongMerchantInfo == input.BelongMerchantInfo ||
                    (this.BelongMerchantInfo != null &&
                    this.BelongMerchantInfo.Equals(input.BelongMerchantInfo))
                ) && 
                (
                    this.CodeMode == input.CodeMode ||
                    (this.CodeMode != null &&
                    this.CodeMode.Equals(input.CodeMode))
                ) && 
                (
                    this.OutActivityId == input.OutActivityId ||
                    (this.OutActivityId != null &&
                    this.OutActivityId.Equals(input.OutActivityId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityId != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityId.GetHashCode();
                }
                if (this.ActivityName != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityName.GetHashCode();
                }
                if (this.ActivityOperationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityOperationStatus.GetHashCode();
                }
                if (this.ActivityProductType != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityProductType.GetHashCode();
                }
                if (this.ActivityStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityStatus.GetHashCode();
                }
                if (this.BelongMerchantInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BelongMerchantInfo.GetHashCode();
                }
                if (this.CodeMode != null)
                {
                    hashCode = (hashCode * 59) + this.CodeMode.GetHashCode();
                }
                if (this.OutActivityId != null)
                {
                    hashCode = (hashCode * 59) + this.OutActivityId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
