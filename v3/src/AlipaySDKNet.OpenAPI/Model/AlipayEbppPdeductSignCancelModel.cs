/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEbppPdeductSignCancelModel
    /// </summary>
    [DataContract(Name = "AlipayEbppPdeductSignCancelModel")]
    public partial class AlipayEbppPdeductSignCancelModel : IEquatable<AlipayEbppPdeductSignCancelModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEbppPdeductSignCancelModel" /> class.
        /// </summary>
        /// <param name="agentChannel">此值只是供代扣中心做最后的渠道统计用，并不做值是什么的强校验，只要不为空就可以.</param>
        /// <param name="agentCode">标识发起方的ID，从服务窗发起则为appId的值，appId即开放平台分配给接入ISV的id，此处也可以随便真其它值，只要能标识唯一即可.</param>
        /// <param name="agreementId">支付宝代扣协议ID.</param>
        /// <param name="openId">用户UserId在应用AppId下的唯一用户标识.</param>
        /// <param name="payPasswordToken">需要用户首先处于登陆态，然后访问https://ebppprod.alipay.com/deduct/enterMobileicPayPassword.htm?cb&#x3D;自己指定的回跳连接地址,访问页面后会进到独立密码校验页，用户输入密码校验成功后，会生成token回调到指定的回跳地址，如果设置cb&#x3D;www.baidu.com则最后回调的内容是www.baidu.com?token&#x3D;312314ADFDSFAS,然后签约时直接取得地址后token的值即可.</param>
        /// <param name="userId">用户ID.</param>
        public AlipayEbppPdeductSignCancelModel(string agentChannel = default(string), string agentCode = default(string), string agreementId = default(string), string openId = default(string), string payPasswordToken = default(string), string userId = default(string))
        {
            this.AgentChannel = agentChannel;
            this.AgentCode = agentCode;
            this.AgreementId = agreementId;
            this.OpenId = openId;
            this.PayPasswordToken = payPasswordToken;
            this.UserId = userId;
        }

        /// <summary>
        /// 此值只是供代扣中心做最后的渠道统计用，并不做值是什么的强校验，只要不为空就可以
        /// </summary>
        /// <value>此值只是供代扣中心做最后的渠道统计用，并不做值是什么的强校验，只要不为空就可以</value>
        [DataMember(Name = "agent_channel", EmitDefaultValue = false)]
        public string AgentChannel { get; set; }

        /// <summary>
        /// 标识发起方的ID，从服务窗发起则为appId的值，appId即开放平台分配给接入ISV的id，此处也可以随便真其它值，只要能标识唯一即可
        /// </summary>
        /// <value>标识发起方的ID，从服务窗发起则为appId的值，appId即开放平台分配给接入ISV的id，此处也可以随便真其它值，只要能标识唯一即可</value>
        [DataMember(Name = "agent_code", EmitDefaultValue = false)]
        public string AgentCode { get; set; }

        /// <summary>
        /// 支付宝代扣协议ID
        /// </summary>
        /// <value>支付宝代扣协议ID</value>
        [DataMember(Name = "agreement_id", EmitDefaultValue = false)]
        public string AgreementId { get; set; }

        /// <summary>
        /// 用户UserId在应用AppId下的唯一用户标识
        /// </summary>
        /// <value>用户UserId在应用AppId下的唯一用户标识</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 需要用户首先处于登陆态，然后访问https://ebppprod.alipay.com/deduct/enterMobileicPayPassword.htm?cb&#x3D;自己指定的回跳连接地址,访问页面后会进到独立密码校验页，用户输入密码校验成功后，会生成token回调到指定的回跳地址，如果设置cb&#x3D;www.baidu.com则最后回调的内容是www.baidu.com?token&#x3D;312314ADFDSFAS,然后签约时直接取得地址后token的值即可
        /// </summary>
        /// <value>需要用户首先处于登陆态，然后访问https://ebppprod.alipay.com/deduct/enterMobileicPayPassword.htm?cb&#x3D;自己指定的回跳连接地址,访问页面后会进到独立密码校验页，用户输入密码校验成功后，会生成token回调到指定的回跳地址，如果设置cb&#x3D;www.baidu.com则最后回调的内容是www.baidu.com?token&#x3D;312314ADFDSFAS,然后签约时直接取得地址后token的值即可</value>
        [DataMember(Name = "pay_password_token", EmitDefaultValue = false)]
        public string PayPasswordToken { get; set; }

        /// <summary>
        /// 用户ID
        /// </summary>
        /// <value>用户ID</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEbppPdeductSignCancelModel {\n");
            sb.Append("  AgentChannel: ").Append(AgentChannel).Append("\n");
            sb.Append("  AgentCode: ").Append(AgentCode).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  PayPasswordToken: ").Append(PayPasswordToken).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEbppPdeductSignCancelModel);
        }

        /// <summary>
        /// Returns true if AlipayEbppPdeductSignCancelModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEbppPdeductSignCancelModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEbppPdeductSignCancelModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AgentChannel == input.AgentChannel ||
                    (this.AgentChannel != null &&
                    this.AgentChannel.Equals(input.AgentChannel))
                ) && 
                (
                    this.AgentCode == input.AgentCode ||
                    (this.AgentCode != null &&
                    this.AgentCode.Equals(input.AgentCode))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.PayPasswordToken == input.PayPasswordToken ||
                    (this.PayPasswordToken != null &&
                    this.PayPasswordToken.Equals(input.PayPasswordToken))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentChannel != null)
                {
                    hashCode = (hashCode * 59) + this.AgentChannel.GetHashCode();
                }
                if (this.AgentCode != null)
                {
                    hashCode = (hashCode * 59) + this.AgentCode.GetHashCode();
                }
                if (this.AgreementId != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementId.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.PayPasswordToken != null)
                {
                    hashCode = (hashCode * 59) + this.PayPasswordToken.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
