/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MiniappBrandAuditResult
    /// </summary>
    [DataContract(Name = "MiniappBrandAuditResult")]
    public partial class MiniappBrandAuditResult : IEquatable<MiniappBrandAuditResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MiniappBrandAuditResult" /> class.
        /// </summary>
        /// <param name="brandId">小程序提交品牌认证时的品牌id.</param>
        /// <param name="brandName">小程序提交品牌认证时的品牌名称.</param>
        /// <param name="brandStatus">小程序提交品牌认证后的认证状态.</param>
        /// <param name="hasBrand">小程序提交品牌认证是否认证成功.</param>
        /// <param name="invalidReason">失效原因.</param>
        /// <param name="rejectReason">驳回原因.</param>
        public MiniappBrandAuditResult(string brandId = default(string), string brandName = default(string), string brandStatus = default(string), string hasBrand = default(string), string invalidReason = default(string), string rejectReason = default(string))
        {
            this.BrandId = brandId;
            this.BrandName = brandName;
            this.BrandStatus = brandStatus;
            this.HasBrand = hasBrand;
            this.InvalidReason = invalidReason;
            this.RejectReason = rejectReason;
        }

        /// <summary>
        /// 小程序提交品牌认证时的品牌id
        /// </summary>
        /// <value>小程序提交品牌认证时的品牌id</value>
        [DataMember(Name = "brand_id", EmitDefaultValue = false)]
        public string BrandId { get; set; }

        /// <summary>
        /// 小程序提交品牌认证时的品牌名称
        /// </summary>
        /// <value>小程序提交品牌认证时的品牌名称</value>
        [DataMember(Name = "brand_name", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// 小程序提交品牌认证后的认证状态
        /// </summary>
        /// <value>小程序提交品牌认证后的认证状态</value>
        [DataMember(Name = "brand_status", EmitDefaultValue = false)]
        public string BrandStatus { get; set; }

        /// <summary>
        /// 小程序提交品牌认证是否认证成功
        /// </summary>
        /// <value>小程序提交品牌认证是否认证成功</value>
        [DataMember(Name = "has_brand", EmitDefaultValue = false)]
        public string HasBrand { get; set; }

        /// <summary>
        /// 失效原因
        /// </summary>
        /// <value>失效原因</value>
        [DataMember(Name = "invalid_reason", EmitDefaultValue = false)]
        public string InvalidReason { get; set; }

        /// <summary>
        /// 驳回原因
        /// </summary>
        /// <value>驳回原因</value>
        [DataMember(Name = "reject_reason", EmitDefaultValue = false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MiniappBrandAuditResult {\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  BrandStatus: ").Append(BrandStatus).Append("\n");
            sb.Append("  HasBrand: ").Append(HasBrand).Append("\n");
            sb.Append("  InvalidReason: ").Append(InvalidReason).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MiniappBrandAuditResult);
        }

        /// <summary>
        /// Returns true if MiniappBrandAuditResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MiniappBrandAuditResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MiniappBrandAuditResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.BrandStatus == input.BrandStatus ||
                    (this.BrandStatus != null &&
                    this.BrandStatus.Equals(input.BrandStatus))
                ) && 
                (
                    this.HasBrand == input.HasBrand ||
                    (this.HasBrand != null &&
                    this.HasBrand.Equals(input.HasBrand))
                ) && 
                (
                    this.InvalidReason == input.InvalidReason ||
                    (this.InvalidReason != null &&
                    this.InvalidReason.Equals(input.InvalidReason))
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    (this.RejectReason != null &&
                    this.RejectReason.Equals(input.RejectReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrandId != null)
                {
                    hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                }
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                if (this.BrandStatus != null)
                {
                    hashCode = (hashCode * 59) + this.BrandStatus.GetHashCode();
                }
                if (this.HasBrand != null)
                {
                    hashCode = (hashCode * 59) + this.HasBrand.GetHashCode();
                }
                if (this.InvalidReason != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidReason.GetHashCode();
                }
                if (this.RejectReason != null)
                {
                    hashCode = (hashCode * 59) + this.RejectReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
