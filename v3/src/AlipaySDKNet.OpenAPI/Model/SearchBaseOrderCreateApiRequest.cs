/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SearchBaseOrderCreateApiRequest
    /// </summary>
    [DataContract(Name = "SearchBaseOrderCreateApiRequest")]
    public partial class SearchBaseOrderCreateApiRequest : IEquatable<SearchBaseOrderCreateApiRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchBaseOrderCreateApiRequest" /> class.
        /// </summary>
        /// <param name="accessType">搜索直达类型 BASE：基础信息，只支持基础信息工单提报.</param>
        /// <param name="appid">小程序Id.</param>
        /// <param name="baseItems">baseItems.</param>
        /// <param name="descprise">服务描述.</param>
        /// <param name="isDraft">是否为草稿态.</param>
        /// <param name="orderId">申请单id，仅仅驳回或修改是传入.</param>
        /// <param name="specCode">服务的类型 SP_MINI_APP 小程序 SP_PUBLIC_APP 生活号.</param>
        public SearchBaseOrderCreateApiRequest(string accessType = default(string), string appid = default(string), SearchBaseItems baseItems = default(SearchBaseItems), string descprise = default(string), bool isDraft = default(bool), string orderId = default(string), string specCode = default(string))
        {
            this.AccessType = accessType;
            this.Appid = appid;
            this.BaseItems = baseItems;
            this.Descprise = descprise;
            this.IsDraft = isDraft;
            this.OrderId = orderId;
            this.SpecCode = specCode;
        }

        /// <summary>
        /// 搜索直达类型 BASE：基础信息，只支持基础信息工单提报
        /// </summary>
        /// <value>搜索直达类型 BASE：基础信息，只支持基础信息工单提报</value>
        [DataMember(Name = "access_type", EmitDefaultValue = false)]
        public string AccessType { get; set; }

        /// <summary>
        /// 小程序Id
        /// </summary>
        /// <value>小程序Id</value>
        [DataMember(Name = "appid", EmitDefaultValue = false)]
        public string Appid { get; set; }

        /// <summary>
        /// Gets or Sets BaseItems
        /// </summary>
        [DataMember(Name = "base_items", EmitDefaultValue = false)]
        public SearchBaseItems BaseItems { get; set; }

        /// <summary>
        /// 服务描述
        /// </summary>
        /// <value>服务描述</value>
        [DataMember(Name = "descprise", EmitDefaultValue = false)]
        public string Descprise { get; set; }

        /// <summary>
        /// 是否为草稿态
        /// </summary>
        /// <value>是否为草稿态</value>
        [DataMember(Name = "is_draft", EmitDefaultValue = true)]
        public bool IsDraft { get; set; }

        /// <summary>
        /// 申请单id，仅仅驳回或修改是传入
        /// </summary>
        /// <value>申请单id，仅仅驳回或修改是传入</value>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// 服务的类型 SP_MINI_APP 小程序 SP_PUBLIC_APP 生活号
        /// </summary>
        /// <value>服务的类型 SP_MINI_APP 小程序 SP_PUBLIC_APP 生活号</value>
        [DataMember(Name = "spec_code", EmitDefaultValue = false)]
        public string SpecCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchBaseOrderCreateApiRequest {\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  Appid: ").Append(Appid).Append("\n");
            sb.Append("  BaseItems: ").Append(BaseItems).Append("\n");
            sb.Append("  Descprise: ").Append(Descprise).Append("\n");
            sb.Append("  IsDraft: ").Append(IsDraft).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  SpecCode: ").Append(SpecCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchBaseOrderCreateApiRequest);
        }

        /// <summary>
        /// Returns true if SearchBaseOrderCreateApiRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchBaseOrderCreateApiRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchBaseOrderCreateApiRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.Appid == input.Appid ||
                    (this.Appid != null &&
                    this.Appid.Equals(input.Appid))
                ) && 
                (
                    this.BaseItems == input.BaseItems ||
                    (this.BaseItems != null &&
                    this.BaseItems.Equals(input.BaseItems))
                ) && 
                (
                    this.Descprise == input.Descprise ||
                    (this.Descprise != null &&
                    this.Descprise.Equals(input.Descprise))
                ) && 
                (
                    this.IsDraft == input.IsDraft ||
                    this.IsDraft.Equals(input.IsDraft)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.SpecCode == input.SpecCode ||
                    (this.SpecCode != null &&
                    this.SpecCode.Equals(input.SpecCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessType != null)
                {
                    hashCode = (hashCode * 59) + this.AccessType.GetHashCode();
                }
                if (this.Appid != null)
                {
                    hashCode = (hashCode * 59) + this.Appid.GetHashCode();
                }
                if (this.BaseItems != null)
                {
                    hashCode = (hashCode * 59) + this.BaseItems.GetHashCode();
                }
                if (this.Descprise != null)
                {
                    hashCode = (hashCode * 59) + this.Descprise.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDraft.GetHashCode();
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.SpecCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
