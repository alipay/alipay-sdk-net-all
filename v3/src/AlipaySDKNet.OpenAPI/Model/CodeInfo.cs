/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// CodeInfo
    /// </summary>
    [DataContract(Name = "CodeInfo")]
    public partial class CodeInfo : IEquatable<CodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeInfo" /> class.
        /// </summary>
        /// <param name="gotoUrl">跳转URL，扫码关注服务窗后会直接跳转到此URL.</param>
        /// <param name="scene">scene.</param>
        public CodeInfo(string gotoUrl = default(string), Scene scene = default(Scene))
        {
            this.GotoUrl = gotoUrl;
            this.Scene = scene;
        }

        /// <summary>
        /// 跳转URL，扫码关注服务窗后会直接跳转到此URL
        /// </summary>
        /// <value>跳转URL，扫码关注服务窗后会直接跳转到此URL</value>
        [DataMember(Name = "goto_url", EmitDefaultValue = false)]
        public string GotoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Scene
        /// </summary>
        [DataMember(Name = "scene", EmitDefaultValue = false)]
        public Scene Scene { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeInfo {\n");
            sb.Append("  GotoUrl: ").Append(GotoUrl).Append("\n");
            sb.Append("  Scene: ").Append(Scene).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeInfo);
        }

        /// <summary>
        /// Returns true if CodeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GotoUrl == input.GotoUrl ||
                    (this.GotoUrl != null &&
                    this.GotoUrl.Equals(input.GotoUrl))
                ) && 
                (
                    this.Scene == input.Scene ||
                    (this.Scene != null &&
                    this.Scene.Equals(input.Scene))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GotoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.GotoUrl.GetHashCode();
                }
                if (this.Scene != null)
                {
                    hashCode = (hashCode * 59) + this.Scene.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
