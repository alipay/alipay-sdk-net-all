/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradeCustomsQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradeCustomsQueryResponseModel")]
    public partial class AlipayTradeCustomsQueryResponseModel : IEquatable<AlipayTradeCustomsQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeCustomsQueryResponseModel" /> class.
        /// </summary>
        /// <param name="notFound">不存在记录的报关请求号。多个值用逗号分隔，单次最多10个;每个报关请求号String(32).</param>
        /// <param name="records">匹配到的列表。每个记录代表一条报关记录.</param>
        public AlipayTradeCustomsQueryResponseModel(string notFound = default(string), List<CustomsDeclareRecordInfo> records = default(List<CustomsDeclareRecordInfo>))
        {
            this.NotFound = notFound;
            this.Records = records;
        }

        /// <summary>
        /// 不存在记录的报关请求号。多个值用逗号分隔，单次最多10个;每个报关请求号String(32)
        /// </summary>
        /// <value>不存在记录的报关请求号。多个值用逗号分隔，单次最多10个;每个报关请求号String(32)</value>
        [DataMember(Name = "not_found", EmitDefaultValue = false)]
        public string NotFound { get; set; }

        /// <summary>
        /// 匹配到的列表。每个记录代表一条报关记录
        /// </summary>
        /// <value>匹配到的列表。每个记录代表一条报关记录</value>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public List<CustomsDeclareRecordInfo> Records { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeCustomsQueryResponseModel {\n");
            sb.Append("  NotFound: ").Append(NotFound).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradeCustomsQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradeCustomsQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradeCustomsQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradeCustomsQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NotFound == input.NotFound ||
                    (this.NotFound != null &&
                    this.NotFound.Equals(input.NotFound))
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    input.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotFound != null)
                {
                    hashCode = (hashCode * 59) + this.NotFound.GetHashCode();
                }
                if (this.Records != null)
                {
                    hashCode = (hashCode * 59) + this.Records.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
