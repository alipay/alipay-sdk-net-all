/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// EinvTrade
    /// </summary>
    [DataContract(Name = "EinvTrade")]
    public partial class EinvTrade : IEquatable<EinvTrade>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EinvTrade" /> class.
        /// </summary>
        /// <param name="billNo">订单编号.</param>
        /// <param name="billTime">下单时间.</param>
        /// <param name="cityName">商户所在城市(经营地址).</param>
        /// <param name="detailJson">账单明细信息，酒店水单信息，行程单信息，餐饮小票信息.</param>
        /// <param name="downloadUrl">账单明细信息，酒店水单，行程单，餐饮小票等pdf原件链接.</param>
        /// <param name="extendMap">扩展参数  不同组的k-v通过换行符区分.</param>
        /// <param name="merchantName">商家名称（显示名称，非企业名称，餐饮店、酒店、打车平台名称）.</param>
        /// <param name="outJson">透传字段，不做处理，用于isv向后续报销税控方传递特殊信息标记.</param>
        /// <param name="payeeName">销方名称.</param>
        /// <param name="paymentAmount">支付金额，单位（元）， 对应账单中的交易金额.</param>
        /// <param name="paymentTime">支付时间  对应账单中的账单日期.</param>
        /// <param name="souce">交易类型来源 需要按照枚举映射.</param>
        /// <param name="tradeType">交易类型/账单分类.</param>
        public EinvTrade(string billNo = default(string), string billTime = default(string), string cityName = default(string), string detailJson = default(string), string downloadUrl = default(string), string extendMap = default(string), string merchantName = default(string), string outJson = default(string), string payeeName = default(string), string paymentAmount = default(string), string paymentTime = default(string), string souce = default(string), string tradeType = default(string))
        {
            this.BillNo = billNo;
            this.BillTime = billTime;
            this.CityName = cityName;
            this.DetailJson = detailJson;
            this.DownloadUrl = downloadUrl;
            this.ExtendMap = extendMap;
            this.MerchantName = merchantName;
            this.OutJson = outJson;
            this.PayeeName = payeeName;
            this.PaymentAmount = paymentAmount;
            this.PaymentTime = paymentTime;
            this.Souce = souce;
            this.TradeType = tradeType;
        }

        /// <summary>
        /// 订单编号
        /// </summary>
        /// <value>订单编号</value>
        [DataMember(Name = "bill_no", EmitDefaultValue = false)]
        public string BillNo { get; set; }

        /// <summary>
        /// 下单时间
        /// </summary>
        /// <value>下单时间</value>
        [DataMember(Name = "bill_time", EmitDefaultValue = false)]
        public string BillTime { get; set; }

        /// <summary>
        /// 商户所在城市(经营地址)
        /// </summary>
        /// <value>商户所在城市(经营地址)</value>
        [DataMember(Name = "city_name", EmitDefaultValue = false)]
        public string CityName { get; set; }

        /// <summary>
        /// 账单明细信息，酒店水单信息，行程单信息，餐饮小票信息
        /// </summary>
        /// <value>账单明细信息，酒店水单信息，行程单信息，餐饮小票信息</value>
        [DataMember(Name = "detail_json", EmitDefaultValue = false)]
        public string DetailJson { get; set; }

        /// <summary>
        /// 账单明细信息，酒店水单，行程单，餐饮小票等pdf原件链接
        /// </summary>
        /// <value>账单明细信息，酒店水单，行程单，餐饮小票等pdf原件链接</value>
        [DataMember(Name = "download_url", EmitDefaultValue = false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// 扩展参数  不同组的k-v通过换行符区分
        /// </summary>
        /// <value>扩展参数  不同组的k-v通过换行符区分</value>
        [DataMember(Name = "extend_map", EmitDefaultValue = false)]
        public string ExtendMap { get; set; }

        /// <summary>
        /// 商家名称（显示名称，非企业名称，餐饮店、酒店、打车平台名称）
        /// </summary>
        /// <value>商家名称（显示名称，非企业名称，餐饮店、酒店、打车平台名称）</value>
        [DataMember(Name = "merchant_name", EmitDefaultValue = false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// 透传字段，不做处理，用于isv向后续报销税控方传递特殊信息标记
        /// </summary>
        /// <value>透传字段，不做处理，用于isv向后续报销税控方传递特殊信息标记</value>
        [DataMember(Name = "out_json", EmitDefaultValue = false)]
        public string OutJson { get; set; }

        /// <summary>
        /// 销方名称
        /// </summary>
        /// <value>销方名称</value>
        [DataMember(Name = "payee_name", EmitDefaultValue = false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// 支付金额，单位（元）， 对应账单中的交易金额
        /// </summary>
        /// <value>支付金额，单位（元）， 对应账单中的交易金额</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public string PaymentAmount { get; set; }

        /// <summary>
        /// 支付时间  对应账单中的账单日期
        /// </summary>
        /// <value>支付时间  对应账单中的账单日期</value>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string PaymentTime { get; set; }

        /// <summary>
        /// 交易类型来源 需要按照枚举映射
        /// </summary>
        /// <value>交易类型来源 需要按照枚举映射</value>
        [DataMember(Name = "souce", EmitDefaultValue = false)]
        public string Souce { get; set; }

        /// <summary>
        /// 交易类型/账单分类
        /// </summary>
        /// <value>交易类型/账单分类</value>
        [DataMember(Name = "trade_type", EmitDefaultValue = false)]
        public string TradeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EinvTrade {\n");
            sb.Append("  BillNo: ").Append(BillNo).Append("\n");
            sb.Append("  BillTime: ").Append(BillTime).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  DetailJson: ").Append(DetailJson).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  ExtendMap: ").Append(ExtendMap).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  OutJson: ").Append(OutJson).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentTime: ").Append(PaymentTime).Append("\n");
            sb.Append("  Souce: ").Append(Souce).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EinvTrade);
        }

        /// <summary>
        /// Returns true if EinvTrade instances are equal
        /// </summary>
        /// <param name="input">Instance of EinvTrade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EinvTrade input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BillNo == input.BillNo ||
                    (this.BillNo != null &&
                    this.BillNo.Equals(input.BillNo))
                ) && 
                (
                    this.BillTime == input.BillTime ||
                    (this.BillTime != null &&
                    this.BillTime.Equals(input.BillTime))
                ) && 
                (
                    this.CityName == input.CityName ||
                    (this.CityName != null &&
                    this.CityName.Equals(input.CityName))
                ) && 
                (
                    this.DetailJson == input.DetailJson ||
                    (this.DetailJson != null &&
                    this.DetailJson.Equals(input.DetailJson))
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                ) && 
                (
                    this.ExtendMap == input.ExtendMap ||
                    (this.ExtendMap != null &&
                    this.ExtendMap.Equals(input.ExtendMap))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.OutJson == input.OutJson ||
                    (this.OutJson != null &&
                    this.OutJson.Equals(input.OutJson))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    (this.PaymentAmount != null &&
                    this.PaymentAmount.Equals(input.PaymentAmount))
                ) && 
                (
                    this.PaymentTime == input.PaymentTime ||
                    (this.PaymentTime != null &&
                    this.PaymentTime.Equals(input.PaymentTime))
                ) && 
                (
                    this.Souce == input.Souce ||
                    (this.Souce != null &&
                    this.Souce.Equals(input.Souce))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillNo != null)
                {
                    hashCode = (hashCode * 59) + this.BillNo.GetHashCode();
                }
                if (this.BillTime != null)
                {
                    hashCode = (hashCode * 59) + this.BillTime.GetHashCode();
                }
                if (this.CityName != null)
                {
                    hashCode = (hashCode * 59) + this.CityName.GetHashCode();
                }
                if (this.DetailJson != null)
                {
                    hashCode = (hashCode * 59) + this.DetailJson.GetHashCode();
                }
                if (this.DownloadUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadUrl.GetHashCode();
                }
                if (this.ExtendMap != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendMap.GetHashCode();
                }
                if (this.MerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantName.GetHashCode();
                }
                if (this.OutJson != null)
                {
                    hashCode = (hashCode * 59) + this.OutJson.GetHashCode();
                }
                if (this.PayeeName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeName.GetHashCode();
                }
                if (this.PaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAmount.GetHashCode();
                }
                if (this.PaymentTime != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTime.GetHashCode();
                }
                if (this.Souce != null)
                {
                    hashCode = (hashCode * 59) + this.Souce.GetHashCode();
                }
                if (this.TradeType != null)
                {
                    hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
