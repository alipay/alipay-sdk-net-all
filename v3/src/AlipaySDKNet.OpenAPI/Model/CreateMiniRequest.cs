/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// CreateMiniRequest
    /// </summary>
    [DataContract(Name = "CreateMiniRequest")]
    public partial class CreateMiniRequest : IEquatable<CreateMiniRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMiniRequest" /> class.
        /// </summary>
        /// <param name="alipayAccount">商家登录支付宝的邮箱帐号或手机号。（1）默认只支持企业账号类型；（2）将is_individual设置为true，支持个体工商户类型的账号（同时也兼容企业账号）（3）将is_individual设置为true且上传营业执照照片，将同时对具备个体工商户营业执照的商家个人账号认证成为个体工商户账号（同时也兼容企业账号、个体工商户账号）.</param>
        /// <param name="appName">小程序名称.</param>
        /// <param name="certName">营业执照企业名称，如果是“无主体名称个体工商户”则填“个体户+法人姓名”，例如“个体户张三”.</param>
        /// <param name="certNo">营业执照编码.</param>
        /// <param name="contactName">商家联系人名称.</param>
        /// <param name="contactPhone">商家联系人手机电话.</param>
        /// <param name="isIndividual">默认为 false。当设置为 true 时，支持个体工商户的账号类型（同时兼容企业账号）.</param>
        /// <param name="legalPersonalName">商家法人名称.</param>
        /// <param name="licensePic">营业执照图片的Base64编码字符串，图片大小不能超过2M。将is_individual设置为true，当传入该参数后，如果商家账号不是个体工商户类型，将同时为商家升级账号，无需商家额外操作升级（同时支持企业账号、个体工商户账号）.</param>
        /// <param name="outOrderNo">开发者外部订单号，自定义传入，通过开发者账号+outOrderNo做业务幂等。（1）该字段会在商家确认创建后通过应用授权通知出参notify_context以out_biz_no属性返回给ISV，应用授权通知订阅参考：&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/01fejh\&quot;&gt;https://opendocs.alipay.com/isv/01fejh&lt;/a&gt;。（2）该字段也会通过&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/03l3f1?pathHash&#x3D;5c81f4fb&amp;scene&#x3D;common\&quot;&gt;alipay.open.mini.merchant.confirmed&lt;/a&gt;返回给订阅方.</param>
        public CreateMiniRequest(string alipayAccount = default(string), string appName = default(string), string certName = default(string), string certNo = default(string), string contactName = default(string), string contactPhone = default(string), bool isIndividual = default(bool), string legalPersonalName = default(string), string licensePic = default(string), string outOrderNo = default(string))
        {
            this.AlipayAccount = alipayAccount;
            this.AppName = appName;
            this.CertName = certName;
            this.CertNo = certNo;
            this.ContactName = contactName;
            this.ContactPhone = contactPhone;
            this.IsIndividual = isIndividual;
            this.LegalPersonalName = legalPersonalName;
            this.LicensePic = licensePic;
            this.OutOrderNo = outOrderNo;
        }

        /// <summary>
        /// 商家登录支付宝的邮箱帐号或手机号。（1）默认只支持企业账号类型；（2）将is_individual设置为true，支持个体工商户类型的账号（同时也兼容企业账号）（3）将is_individual设置为true且上传营业执照照片，将同时对具备个体工商户营业执照的商家个人账号认证成为个体工商户账号（同时也兼容企业账号、个体工商户账号）
        /// </summary>
        /// <value>商家登录支付宝的邮箱帐号或手机号。（1）默认只支持企业账号类型；（2）将is_individual设置为true，支持个体工商户类型的账号（同时也兼容企业账号）（3）将is_individual设置为true且上传营业执照照片，将同时对具备个体工商户营业执照的商家个人账号认证成为个体工商户账号（同时也兼容企业账号、个体工商户账号）</value>
        [DataMember(Name = "alipay_account", EmitDefaultValue = false)]
        public string AlipayAccount { get; set; }

        /// <summary>
        /// 小程序名称
        /// </summary>
        /// <value>小程序名称</value>
        [DataMember(Name = "app_name", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// 营业执照企业名称，如果是“无主体名称个体工商户”则填“个体户+法人姓名”，例如“个体户张三”
        /// </summary>
        /// <value>营业执照企业名称，如果是“无主体名称个体工商户”则填“个体户+法人姓名”，例如“个体户张三”</value>
        [DataMember(Name = "cert_name", EmitDefaultValue = false)]
        public string CertName { get; set; }

        /// <summary>
        /// 营业执照编码
        /// </summary>
        /// <value>营业执照编码</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 商家联系人名称
        /// </summary>
        /// <value>商家联系人名称</value>
        [DataMember(Name = "contact_name", EmitDefaultValue = false)]
        public string ContactName { get; set; }

        /// <summary>
        /// 商家联系人手机电话
        /// </summary>
        /// <value>商家联系人手机电话</value>
        [DataMember(Name = "contact_phone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// 默认为 false。当设置为 true 时，支持个体工商户的账号类型（同时兼容企业账号）
        /// </summary>
        /// <value>默认为 false。当设置为 true 时，支持个体工商户的账号类型（同时兼容企业账号）</value>
        [DataMember(Name = "is_individual", EmitDefaultValue = true)]
        public bool IsIndividual { get; set; }

        /// <summary>
        /// 商家法人名称
        /// </summary>
        /// <value>商家法人名称</value>
        [DataMember(Name = "legal_personal_name", EmitDefaultValue = false)]
        public string LegalPersonalName { get; set; }

        /// <summary>
        /// 营业执照图片的Base64编码字符串，图片大小不能超过2M。将is_individual设置为true，当传入该参数后，如果商家账号不是个体工商户类型，将同时为商家升级账号，无需商家额外操作升级（同时支持企业账号、个体工商户账号）
        /// </summary>
        /// <value>营业执照图片的Base64编码字符串，图片大小不能超过2M。将is_individual设置为true，当传入该参数后，如果商家账号不是个体工商户类型，将同时为商家升级账号，无需商家额外操作升级（同时支持企业账号、个体工商户账号）</value>
        [DataMember(Name = "license_pic", EmitDefaultValue = false)]
        public string LicensePic { get; set; }

        /// <summary>
        /// 开发者外部订单号，自定义传入，通过开发者账号+outOrderNo做业务幂等。（1）该字段会在商家确认创建后通过应用授权通知出参notify_context以out_biz_no属性返回给ISV，应用授权通知订阅参考：&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/01fejh\&quot;&gt;https://opendocs.alipay.com/isv/01fejh&lt;/a&gt;。（2）该字段也会通过&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/03l3f1?pathHash&#x3D;5c81f4fb&amp;scene&#x3D;common\&quot;&gt;alipay.open.mini.merchant.confirmed&lt;/a&gt;返回给订阅方
        /// </summary>
        /// <value>开发者外部订单号，自定义传入，通过开发者账号+outOrderNo做业务幂等。（1）该字段会在商家确认创建后通过应用授权通知出参notify_context以out_biz_no属性返回给ISV，应用授权通知订阅参考：&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/isv/01fejh\&quot;&gt;https://opendocs.alipay.com/isv/01fejh&lt;/a&gt;。（2）该字段也会通过&lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/03l3f1?pathHash&#x3D;5c81f4fb&amp;scene&#x3D;common\&quot;&gt;alipay.open.mini.merchant.confirmed&lt;/a&gt;返回给订阅方</value>
        [DataMember(Name = "out_order_no", EmitDefaultValue = false)]
        public string OutOrderNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMiniRequest {\n");
            sb.Append("  AlipayAccount: ").Append(AlipayAccount).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  CertName: ").Append(CertName).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  IsIndividual: ").Append(IsIndividual).Append("\n");
            sb.Append("  LegalPersonalName: ").Append(LegalPersonalName).Append("\n");
            sb.Append("  LicensePic: ").Append(LicensePic).Append("\n");
            sb.Append("  OutOrderNo: ").Append(OutOrderNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMiniRequest);
        }

        /// <summary>
        /// Returns true if CreateMiniRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMiniRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMiniRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AlipayAccount == input.AlipayAccount ||
                    (this.AlipayAccount != null &&
                    this.AlipayAccount.Equals(input.AlipayAccount))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.CertName == input.CertName ||
                    (this.CertName != null &&
                    this.CertName.Equals(input.CertName))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.IsIndividual == input.IsIndividual ||
                    this.IsIndividual.Equals(input.IsIndividual)
                ) && 
                (
                    this.LegalPersonalName == input.LegalPersonalName ||
                    (this.LegalPersonalName != null &&
                    this.LegalPersonalName.Equals(input.LegalPersonalName))
                ) && 
                (
                    this.LicensePic == input.LicensePic ||
                    (this.LicensePic != null &&
                    this.LicensePic.Equals(input.LicensePic))
                ) && 
                (
                    this.OutOrderNo == input.OutOrderNo ||
                    (this.OutOrderNo != null &&
                    this.OutOrderNo.Equals(input.OutOrderNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlipayAccount != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayAccount.GetHashCode();
                }
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.CertName != null)
                {
                    hashCode = (hashCode * 59) + this.CertName.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ContactPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsIndividual.GetHashCode();
                if (this.LegalPersonalName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalPersonalName.GetHashCode();
                }
                if (this.LicensePic != null)
                {
                    hashCode = (hashCode * 59) + this.LicensePic.GetHashCode();
                }
                if (this.OutOrderNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutOrderNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
