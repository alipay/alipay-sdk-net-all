/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ZhimaCreditPeZmgoCumulationSyncModel
    /// </summary>
    [DataContract(Name = "ZhimaCreditPeZmgoCumulationSyncModel")]
    public partial class ZhimaCreditPeZmgoCumulationSyncModel : IEquatable<ZhimaCreditPeZmgoCumulationSyncModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZhimaCreditPeZmgoCumulationSyncModel" /> class.
        /// </summary>
        /// <param name="agreementNo">芝麻go协议号，唯一标识一个芝麻go协议。为必传入参。.</param>
        /// <param name="amountTypeData">amountTypeData.</param>
        /// <param name="bizAction">数据回传的动作类型，为枚举值，为必传入参。 可取值： (\&quot;ORDER_PAID\&quot;, \&quot;正向支付\&quot;)，(\&quot;ORDER_REFUND\&quot;, \&quot;逆向退款\&quot;)。 其中ORDER_PAID表示回传为正向的，即订单金额累加，优惠累加，任务次数累加；而ORDER_REFUND表示回传为逆向的，即订单金额退款，优惠退款，任务次数回退。.</param>
        /// <param name="bizTime">交易发生时间，包括：订单交易时间，优惠核销时间，以及任务完成时间。为必传入参。 如：用户在【2019-03-08 00:00:00】核销了一个红包，但是【2019-03-10 00:00:00】才进行数据回传，此时biz_time取值红包核销的时间，也就是【2019-03-08 00:00:00】。.</param>
        /// <param name="cumulateDataType">累计类型。为枚举值，为必传入参。 可取值：(\&quot;AMOUNT\&quot;, \&quot;金额类型\&quot;)，(\&quot;TASK\&quot;, \&quot;任务类型\&quot;)，(\&quot;AMOUNT_TASK\&quot;, \&quot;额度和任务类型\&quot;)。 其中，交易解耦模式仅允许AMOUNT或TASK。而交易绑定模式下，仅允许AMOUNT_TASK。.</param>
        /// <param name="extInfo">扩展字段，格式为Json格式的字符串，非必传。.</param>
        /// <param name="hasAlipayTrade">是否为支付宝交易。仅在累计模式为【交易绑定模式】下被消费。当芝麻Go模板配置的累计模式为交易绑定模式时，此时需传入扩展参数是否为支付宝交易。若是支付宝交易，传值true，否则为false。若不传此字段，默认为false。 若为true，则会对交易号trade_no进行校验，校验是否为支付宝交易，以及用户userId和商户partnerId是否一致，若校验不通过，累计失败。.</param>
        /// <param name="openId">用户userId，蚂蚁统一会员ID，为必传入参。.</param>
        /// <param name="outBizNo">外部业务号。需保证唯一，为必传入参。 若接口调用失败，提示信息为更换幂等号，商户更换此字段重新发起调用。.</param>
        /// <param name="partnerId">商户ID，为必传入参。.</param>
        /// <param name="payOutBizNo">逆向对应的正向外部业务号。逆向场景为必传入参。也就是biz_action为ORDER_REFUND时为必传入参。 逆向时需通过此字段明确对应的正向的外部业务号。.</param>
        /// <param name="requestFrom">取固定值ExternalMerchantSource，为必传入参。表示数据回传来源为外部商户，数据回传内部逻辑需感知。.</param>
        /// <param name="taskTypeData">taskTypeData.</param>
        /// <param name="userId">用户userId，蚂蚁统一会员ID，为必传入参。.</param>
        public ZhimaCreditPeZmgoCumulationSyncModel(string agreementNo = default(string), AmountTypeData amountTypeData = default(AmountTypeData), string bizAction = default(string), string bizTime = default(string), string cumulateDataType = default(string), string extInfo = default(string), bool hasAlipayTrade = default(bool), string openId = default(string), string outBizNo = default(string), string partnerId = default(string), string payOutBizNo = default(string), string requestFrom = default(string), TaskTypeData taskTypeData = default(TaskTypeData), string userId = default(string))
        {
            this.AgreementNo = agreementNo;
            this.AmountTypeData = amountTypeData;
            this.BizAction = bizAction;
            this.BizTime = bizTime;
            this.CumulateDataType = cumulateDataType;
            this.ExtInfo = extInfo;
            this.HasAlipayTrade = hasAlipayTrade;
            this.OpenId = openId;
            this.OutBizNo = outBizNo;
            this.PartnerId = partnerId;
            this.PayOutBizNo = payOutBizNo;
            this.RequestFrom = requestFrom;
            this.TaskTypeData = taskTypeData;
            this.UserId = userId;
        }

        /// <summary>
        /// 芝麻go协议号，唯一标识一个芝麻go协议。为必传入参。
        /// </summary>
        /// <value>芝麻go协议号，唯一标识一个芝麻go协议。为必传入参。</value>
        [DataMember(Name = "agreement_no", EmitDefaultValue = false)]
        public string AgreementNo { get; set; }

        /// <summary>
        /// Gets or Sets AmountTypeData
        /// </summary>
        [DataMember(Name = "amount_type_data", EmitDefaultValue = false)]
        public AmountTypeData AmountTypeData { get; set; }

        /// <summary>
        /// 数据回传的动作类型，为枚举值，为必传入参。 可取值： (\&quot;ORDER_PAID\&quot;, \&quot;正向支付\&quot;)，(\&quot;ORDER_REFUND\&quot;, \&quot;逆向退款\&quot;)。 其中ORDER_PAID表示回传为正向的，即订单金额累加，优惠累加，任务次数累加；而ORDER_REFUND表示回传为逆向的，即订单金额退款，优惠退款，任务次数回退。
        /// </summary>
        /// <value>数据回传的动作类型，为枚举值，为必传入参。 可取值： (\&quot;ORDER_PAID\&quot;, \&quot;正向支付\&quot;)，(\&quot;ORDER_REFUND\&quot;, \&quot;逆向退款\&quot;)。 其中ORDER_PAID表示回传为正向的，即订单金额累加，优惠累加，任务次数累加；而ORDER_REFUND表示回传为逆向的，即订单金额退款，优惠退款，任务次数回退。</value>
        [DataMember(Name = "biz_action", EmitDefaultValue = false)]
        public string BizAction { get; set; }

        /// <summary>
        /// 交易发生时间，包括：订单交易时间，优惠核销时间，以及任务完成时间。为必传入参。 如：用户在【2019-03-08 00:00:00】核销了一个红包，但是【2019-03-10 00:00:00】才进行数据回传，此时biz_time取值红包核销的时间，也就是【2019-03-08 00:00:00】。
        /// </summary>
        /// <value>交易发生时间，包括：订单交易时间，优惠核销时间，以及任务完成时间。为必传入参。 如：用户在【2019-03-08 00:00:00】核销了一个红包，但是【2019-03-10 00:00:00】才进行数据回传，此时biz_time取值红包核销的时间，也就是【2019-03-08 00:00:00】。</value>
        [DataMember(Name = "biz_time", EmitDefaultValue = false)]
        public string BizTime { get; set; }

        /// <summary>
        /// 累计类型。为枚举值，为必传入参。 可取值：(\&quot;AMOUNT\&quot;, \&quot;金额类型\&quot;)，(\&quot;TASK\&quot;, \&quot;任务类型\&quot;)，(\&quot;AMOUNT_TASK\&quot;, \&quot;额度和任务类型\&quot;)。 其中，交易解耦模式仅允许AMOUNT或TASK。而交易绑定模式下，仅允许AMOUNT_TASK。
        /// </summary>
        /// <value>累计类型。为枚举值，为必传入参。 可取值：(\&quot;AMOUNT\&quot;, \&quot;金额类型\&quot;)，(\&quot;TASK\&quot;, \&quot;任务类型\&quot;)，(\&quot;AMOUNT_TASK\&quot;, \&quot;额度和任务类型\&quot;)。 其中，交易解耦模式仅允许AMOUNT或TASK。而交易绑定模式下，仅允许AMOUNT_TASK。</value>
        [DataMember(Name = "cumulate_data_type", EmitDefaultValue = false)]
        public string CumulateDataType { get; set; }

        /// <summary>
        /// 扩展字段，格式为Json格式的字符串，非必传。
        /// </summary>
        /// <value>扩展字段，格式为Json格式的字符串，非必传。</value>
        [DataMember(Name = "ext_info", EmitDefaultValue = false)]
        public string ExtInfo { get; set; }

        /// <summary>
        /// 是否为支付宝交易。仅在累计模式为【交易绑定模式】下被消费。当芝麻Go模板配置的累计模式为交易绑定模式时，此时需传入扩展参数是否为支付宝交易。若是支付宝交易，传值true，否则为false。若不传此字段，默认为false。 若为true，则会对交易号trade_no进行校验，校验是否为支付宝交易，以及用户userId和商户partnerId是否一致，若校验不通过，累计失败。
        /// </summary>
        /// <value>是否为支付宝交易。仅在累计模式为【交易绑定模式】下被消费。当芝麻Go模板配置的累计模式为交易绑定模式时，此时需传入扩展参数是否为支付宝交易。若是支付宝交易，传值true，否则为false。若不传此字段，默认为false。 若为true，则会对交易号trade_no进行校验，校验是否为支付宝交易，以及用户userId和商户partnerId是否一致，若校验不通过，累计失败。</value>
        [DataMember(Name = "has_alipay_trade", EmitDefaultValue = true)]
        public bool HasAlipayTrade { get; set; }

        /// <summary>
        /// 用户userId，蚂蚁统一会员ID，为必传入参。
        /// </summary>
        /// <value>用户userId，蚂蚁统一会员ID，为必传入参。</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 外部业务号。需保证唯一，为必传入参。 若接口调用失败，提示信息为更换幂等号，商户更换此字段重新发起调用。
        /// </summary>
        /// <value>外部业务号。需保证唯一，为必传入参。 若接口调用失败，提示信息为更换幂等号，商户更换此字段重新发起调用。</value>
        [DataMember(Name = "out_biz_no", EmitDefaultValue = false)]
        public string OutBizNo { get; set; }

        /// <summary>
        /// 商户ID，为必传入参。
        /// </summary>
        /// <value>商户ID，为必传入参。</value>
        [DataMember(Name = "partner_id", EmitDefaultValue = false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// 逆向对应的正向外部业务号。逆向场景为必传入参。也就是biz_action为ORDER_REFUND时为必传入参。 逆向时需通过此字段明确对应的正向的外部业务号。
        /// </summary>
        /// <value>逆向对应的正向外部业务号。逆向场景为必传入参。也就是biz_action为ORDER_REFUND时为必传入参。 逆向时需通过此字段明确对应的正向的外部业务号。</value>
        [DataMember(Name = "pay_out_biz_no", EmitDefaultValue = false)]
        public string PayOutBizNo { get; set; }

        /// <summary>
        /// 取固定值ExternalMerchantSource，为必传入参。表示数据回传来源为外部商户，数据回传内部逻辑需感知。
        /// </summary>
        /// <value>取固定值ExternalMerchantSource，为必传入参。表示数据回传来源为外部商户，数据回传内部逻辑需感知。</value>
        [DataMember(Name = "request_from", EmitDefaultValue = false)]
        public string RequestFrom { get; set; }

        /// <summary>
        /// Gets or Sets TaskTypeData
        /// </summary>
        [DataMember(Name = "task_type_data", EmitDefaultValue = false)]
        public TaskTypeData TaskTypeData { get; set; }

        /// <summary>
        /// 用户userId，蚂蚁统一会员ID，为必传入参。
        /// </summary>
        /// <value>用户userId，蚂蚁统一会员ID，为必传入参。</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZhimaCreditPeZmgoCumulationSyncModel {\n");
            sb.Append("  AgreementNo: ").Append(AgreementNo).Append("\n");
            sb.Append("  AmountTypeData: ").Append(AmountTypeData).Append("\n");
            sb.Append("  BizAction: ").Append(BizAction).Append("\n");
            sb.Append("  BizTime: ").Append(BizTime).Append("\n");
            sb.Append("  CumulateDataType: ").Append(CumulateDataType).Append("\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  HasAlipayTrade: ").Append(HasAlipayTrade).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutBizNo: ").Append(OutBizNo).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  PayOutBizNo: ").Append(PayOutBizNo).Append("\n");
            sb.Append("  RequestFrom: ").Append(RequestFrom).Append("\n");
            sb.Append("  TaskTypeData: ").Append(TaskTypeData).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZhimaCreditPeZmgoCumulationSyncModel);
        }

        /// <summary>
        /// Returns true if ZhimaCreditPeZmgoCumulationSyncModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ZhimaCreditPeZmgoCumulationSyncModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZhimaCreditPeZmgoCumulationSyncModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AgreementNo == input.AgreementNo ||
                    (this.AgreementNo != null &&
                    this.AgreementNo.Equals(input.AgreementNo))
                ) && 
                (
                    this.AmountTypeData == input.AmountTypeData ||
                    (this.AmountTypeData != null &&
                    this.AmountTypeData.Equals(input.AmountTypeData))
                ) && 
                (
                    this.BizAction == input.BizAction ||
                    (this.BizAction != null &&
                    this.BizAction.Equals(input.BizAction))
                ) && 
                (
                    this.BizTime == input.BizTime ||
                    (this.BizTime != null &&
                    this.BizTime.Equals(input.BizTime))
                ) && 
                (
                    this.CumulateDataType == input.CumulateDataType ||
                    (this.CumulateDataType != null &&
                    this.CumulateDataType.Equals(input.CumulateDataType))
                ) && 
                (
                    this.ExtInfo == input.ExtInfo ||
                    (this.ExtInfo != null &&
                    this.ExtInfo.Equals(input.ExtInfo))
                ) && 
                (
                    this.HasAlipayTrade == input.HasAlipayTrade ||
                    this.HasAlipayTrade.Equals(input.HasAlipayTrade)
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OutBizNo == input.OutBizNo ||
                    (this.OutBizNo != null &&
                    this.OutBizNo.Equals(input.OutBizNo))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.PayOutBizNo == input.PayOutBizNo ||
                    (this.PayOutBizNo != null &&
                    this.PayOutBizNo.Equals(input.PayOutBizNo))
                ) && 
                (
                    this.RequestFrom == input.RequestFrom ||
                    (this.RequestFrom != null &&
                    this.RequestFrom.Equals(input.RequestFrom))
                ) && 
                (
                    this.TaskTypeData == input.TaskTypeData ||
                    (this.TaskTypeData != null &&
                    this.TaskTypeData.Equals(input.TaskTypeData))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgreementNo != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementNo.GetHashCode();
                }
                if (this.AmountTypeData != null)
                {
                    hashCode = (hashCode * 59) + this.AmountTypeData.GetHashCode();
                }
                if (this.BizAction != null)
                {
                    hashCode = (hashCode * 59) + this.BizAction.GetHashCode();
                }
                if (this.BizTime != null)
                {
                    hashCode = (hashCode * 59) + this.BizTime.GetHashCode();
                }
                if (this.CumulateDataType != null)
                {
                    hashCode = (hashCode * 59) + this.CumulateDataType.GetHashCode();
                }
                if (this.ExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasAlipayTrade.GetHashCode();
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutBizNo.GetHashCode();
                }
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                if (this.PayOutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.PayOutBizNo.GetHashCode();
                }
                if (this.RequestFrom != null)
                {
                    hashCode = (hashCode * 59) + this.RequestFrom.GetHashCode();
                }
                if (this.TaskTypeData != null)
                {
                    hashCode = (hashCode * 59) + this.TaskTypeData.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
