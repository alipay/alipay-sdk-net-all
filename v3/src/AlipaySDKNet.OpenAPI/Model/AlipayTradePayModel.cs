/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradePayModel
    /// </summary>
    [DataContract(Name = "AlipayTradePayModel")]
    public partial class AlipayTradePayModel : IEquatable<AlipayTradePayModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradePayModel" /> class.
        /// </summary>
        /// <param name="advancePaymentType">支付模式类型,若值为ENJOY_PAY_V2表示当前交易允许走先享后付2.0垫资.</param>
        /// <param name="agreementParams">agreementParams.</param>
        /// <param name="alipayStoreId">支付宝店铺编号。 指商户创建门店后支付宝生成的门店ID。.</param>
        /// <param name="authCode">支付授权码。 当面付场景传买家的付款码（25~30开头的长度为16~24位的数字，实际字符串长度以开发者获取的付款码长度为准）或者刷脸标识串（fp开头的35位字符串）； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 注：交易的买家与卖家不能相同。.</param>
        /// <param name="authConfirmMode">预授权确认模式。 适用于支付宝预授权和新当面资金授权场景。枚举值： COMPLETE：转交易完成后解冻剩余冻结金额； NOT_COMPLETE：转交易完成后不解冻剩余冻结金额； 默认值为NOT_COMPLETE。.</param>
        /// <param name="authNo">资金预授权单号。 支付宝预授权和新当面资金授权场景下必填。.</param>
        /// <param name="bkagentReqInfo">bkagentReqInfo.</param>
        /// <param name="body">订单附加信息。 如果请求时传递了该参数，将在异步通知、对账单中原样返回，同时会在商户和用户的pc账单详情中作为交易描述展示.</param>
        /// <param name="businessParams">businessParams.</param>
        /// <param name="buyerId">买家支付宝用户ID。 支付宝预授权和新当面资金授权场景下必填，其它场景不需要传入。.</param>
        /// <param name="buyerOpenId">买家支付宝用户唯一标识.</param>
        /// <param name="disablePayChannels">禁用支付渠道。 多个渠道以逗号分割，如同时禁用信用支付类型和积分，则传入：\&quot;credit_group,point\&quot;。 支持传入的值：&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.open.alipay.com/common/wifww7\&quot;&gt;渠道列表&lt;/a&gt;.</param>
        /// <param name="discountableAmount">可打折金额。 参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。.</param>
        /// <param name="extUserInfo">extUserInfo.</param>
        /// <param name="extendParams">extendParams.</param>
        /// <param name="goodsDetail">订单包含的商品列表信息，json格式。.</param>
        /// <param name="isAsyncPay">是否异步支付，传入true时，表明本次期望走异步支付，会先将支付请求受理下来，再异步推进。商户可以通过交易的异步通知或者轮询交易的状态来确定最终的交易结果。 只在代扣场景下有效，其它场景无需传入。.</param>
        /// <param name="merchantOrderNo">商户的原始订单号.</param>
        /// <param name="notifyUrl">通知地址.</param>
        /// <param name="operatorId">商户操作员编号。.</param>
        /// <param name="outTradeNo">商户订单号。 由商家自定义，64个字符以内，仅支持字母、数字、下划线且需保证在商户端不重复。.</param>
        /// <param name="passbackParams">公用回传参数。 如果请求时传递了该参数，支付宝会在异步通知时将该参数原样返回。.</param>
        /// <param name="payParams">payParams.</param>
        /// <param name="productCode">产品码。 商家和支付宝签约的产品码。 枚举值（点击查看签约情况）： &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/486/487\&quot;&gt;FACE_TO_FACE_PAYMENT&lt;/a&gt;：当面付产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/807/1419\&quot;&gt;CYCLE_PAY_AUTH&lt;/a&gt;：周期扣款产品； GENERAL_WITHHOLDING：代扣产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/712/1471\&quot;&gt;PRE_AUTH_ONLINE&lt;/a&gt;：支付宝预授权产品； PRE_AUTH：新当面资金授权产品； 默认值为FACE_TO_FACE_PAYMENT。 注意：非当面付产品使用本接口时，本参数必填。请传入对应产品码。.</param>
        /// <param name="promoParams">promoParams.</param>
        /// <param name="queryOptions">返回参数选项。 商户通过传递该参数来定制同步需要额外返回的信息字段，数组格式。包括但不限于：[\&quot;fund_bill_list\&quot;,\&quot;voucher_detail_list\&quot;,\&quot;enterprise_pay_info\&quot;,\&quot;discount_goods_detail\&quot;,\&quot;discount_amount\&quot;,\&quot;mdiscount_amount\&quot;].</param>
        /// <param name="requestOrgPid">收单机构(例如银行）的标识，填写该机构在支付宝的pid。只在机构间联场景下传递该值。.</param>
        /// <param name="royaltyInfo">royaltyInfo.</param>
        /// <param name="scene">支付场景。枚举值： bar_code：当面付条码支付场景； security_code：当面付刷脸支付场景，对应的auth_code为fp开头的刷脸标识串； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 默认值为bar_code。.</param>
        /// <param name="sellerId">卖家支付宝用户ID。 当需要指定收款账号时，通过该参数传入，如果该值为空，则默认为商户签约账号对应的支付宝用户ID。 收款账号优先级规则：门店绑定的收款账户&gt;请求传入的seller_id&gt;商户签约账号对应的支付宝用户ID； 注：直付通和机构间联场景下seller_id无需传入或者保持跟pid一致； 如果传入的seller_id与pid不一致，需要联系支付宝小二配置收款关系； 支付宝预授权和新当面资金授权场景下必填。.</param>
        /// <param name="settleCurrency">商户指定的结算币种，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY.</param>
        /// <param name="settleInfo">settleInfo.</param>
        /// <param name="storeId">商户门店编号。 指商户创建门店时输入的门店编号。.</param>
        /// <param name="subMerchant">subMerchant.</param>
        /// <param name="subject">订单标题。 注意：不可使用特殊字符，如 /，&#x3D;，&amp; 等。.</param>
        /// <param name="terminalId">商户机具终端编号。.</param>
        /// <param name="terminalParams">IOT设备信息。 通过集成IOTSDK的机具发起的交易时传入，取值为IOTSDK生成的业务签名值。.</param>
        /// <param name="timeExpire">订单绝对超时时间。 格式为yyyy-MM-dd HH:mm:ss。超时时间范围：1m~15d。 注：time_expire和timeout_express两者只需传入一个或者都不传，如果两者都传，优先使用time_expire。.</param>
        /// <param name="timeoutExpress">订单相对超时时间。从交易创建时间开始计算。  该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1m～15d。m-分钟，h-小时，d-天，1c-当天（1c-当天的情况下，无论交易何时创建，都在0点关闭）。 该参数数值不接受小数点， 如 1.5h，可转换为 90m。  当面付场景默认值为3h；  其它场景默认值为15d;.</param>
        /// <param name="totalAmount">订单总金额。 单位为元，精确到小数点后两位，取值范围：[0.01,100000000] 。.</param>
        /// <param name="transCurrency">标价币种,  total_amount 对应的币种单位。支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY.</param>
        /// <param name="undiscountableAmount">不可打折金额。 不参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。.</param>
        public AlipayTradePayModel(string advancePaymentType = default(string), AgreementParams agreementParams = default(AgreementParams), string alipayStoreId = default(string), string authCode = default(string), string authConfirmMode = default(string), string authNo = default(string), BkAgentReqInfo bkagentReqInfo = default(BkAgentReqInfo), string body = default(string), BusinessParams businessParams = default(BusinessParams), string buyerId = default(string), string buyerOpenId = default(string), string disablePayChannels = default(string), string discountableAmount = default(string), ExtUserInfo extUserInfo = default(ExtUserInfo), ExtendParams extendParams = default(ExtendParams), List<GoodsDetail> goodsDetail = default(List<GoodsDetail>), bool isAsyncPay = default(bool), string merchantOrderNo = default(string), string notifyUrl = default(string), string operatorId = default(string), string outTradeNo = default(string), string passbackParams = default(string), PayParams payParams = default(PayParams), string productCode = default(string), PromoParam promoParams = default(PromoParam), List<string> queryOptions = default(List<string>), string requestOrgPid = default(string), RoyaltyInfo royaltyInfo = default(RoyaltyInfo), string scene = default(string), string sellerId = default(string), string settleCurrency = default(string), SettleInfo settleInfo = default(SettleInfo), string storeId = default(string), SubMerchant subMerchant = default(SubMerchant), string subject = default(string), string terminalId = default(string), string terminalParams = default(string), string timeExpire = default(string), string timeoutExpress = default(string), string totalAmount = default(string), string transCurrency = default(string), string undiscountableAmount = default(string))
        {
            this.AdvancePaymentType = advancePaymentType;
            this.AgreementParams = agreementParams;
            this.AlipayStoreId = alipayStoreId;
            this.AuthCode = authCode;
            this.AuthConfirmMode = authConfirmMode;
            this.AuthNo = authNo;
            this.BkagentReqInfo = bkagentReqInfo;
            this.Body = body;
            this.BusinessParams = businessParams;
            this.BuyerId = buyerId;
            this.BuyerOpenId = buyerOpenId;
            this.DisablePayChannels = disablePayChannels;
            this.DiscountableAmount = discountableAmount;
            this.ExtUserInfo = extUserInfo;
            this.ExtendParams = extendParams;
            this.GoodsDetail = goodsDetail;
            this.IsAsyncPay = isAsyncPay;
            this.MerchantOrderNo = merchantOrderNo;
            this.NotifyUrl = notifyUrl;
            this.OperatorId = operatorId;
            this.OutTradeNo = outTradeNo;
            this.PassbackParams = passbackParams;
            this.PayParams = payParams;
            this.ProductCode = productCode;
            this.PromoParams = promoParams;
            this.QueryOptions = queryOptions;
            this.RequestOrgPid = requestOrgPid;
            this.RoyaltyInfo = royaltyInfo;
            this.Scene = scene;
            this.SellerId = sellerId;
            this.SettleCurrency = settleCurrency;
            this.SettleInfo = settleInfo;
            this.StoreId = storeId;
            this.SubMerchant = subMerchant;
            this.Subject = subject;
            this.TerminalId = terminalId;
            this.TerminalParams = terminalParams;
            this.TimeExpire = timeExpire;
            this.TimeoutExpress = timeoutExpress;
            this.TotalAmount = totalAmount;
            this.TransCurrency = transCurrency;
            this.UndiscountableAmount = undiscountableAmount;
        }

        /// <summary>
        /// 支付模式类型,若值为ENJOY_PAY_V2表示当前交易允许走先享后付2.0垫资
        /// </summary>
        /// <value>支付模式类型,若值为ENJOY_PAY_V2表示当前交易允许走先享后付2.0垫资</value>
        [DataMember(Name = "advance_payment_type", EmitDefaultValue = false)]
        public string AdvancePaymentType { get; set; }

        /// <summary>
        /// Gets or Sets AgreementParams
        /// </summary>
        [DataMember(Name = "agreement_params", EmitDefaultValue = false)]
        public AgreementParams AgreementParams { get; set; }

        /// <summary>
        /// 支付宝店铺编号。 指商户创建门店后支付宝生成的门店ID。
        /// </summary>
        /// <value>支付宝店铺编号。 指商户创建门店后支付宝生成的门店ID。</value>
        [DataMember(Name = "alipay_store_id", EmitDefaultValue = false)]
        public string AlipayStoreId { get; set; }

        /// <summary>
        /// 支付授权码。 当面付场景传买家的付款码（25~30开头的长度为16~24位的数字，实际字符串长度以开发者获取的付款码长度为准）或者刷脸标识串（fp开头的35位字符串）； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 注：交易的买家与卖家不能相同。
        /// </summary>
        /// <value>支付授权码。 当面付场景传买家的付款码（25~30开头的长度为16~24位的数字，实际字符串长度以开发者获取的付款码长度为准）或者刷脸标识串（fp开头的35位字符串）； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 注：交易的买家与卖家不能相同。</value>
        [DataMember(Name = "auth_code", EmitDefaultValue = false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// 预授权确认模式。 适用于支付宝预授权和新当面资金授权场景。枚举值： COMPLETE：转交易完成后解冻剩余冻结金额； NOT_COMPLETE：转交易完成后不解冻剩余冻结金额； 默认值为NOT_COMPLETE。
        /// </summary>
        /// <value>预授权确认模式。 适用于支付宝预授权和新当面资金授权场景。枚举值： COMPLETE：转交易完成后解冻剩余冻结金额； NOT_COMPLETE：转交易完成后不解冻剩余冻结金额； 默认值为NOT_COMPLETE。</value>
        [DataMember(Name = "auth_confirm_mode", EmitDefaultValue = false)]
        public string AuthConfirmMode { get; set; }

        /// <summary>
        /// 资金预授权单号。 支付宝预授权和新当面资金授权场景下必填。
        /// </summary>
        /// <value>资金预授权单号。 支付宝预授权和新当面资金授权场景下必填。</value>
        [DataMember(Name = "auth_no", EmitDefaultValue = false)]
        public string AuthNo { get; set; }

        /// <summary>
        /// Gets or Sets BkagentReqInfo
        /// </summary>
        [DataMember(Name = "bkagent_req_info", EmitDefaultValue = false)]
        public BkAgentReqInfo BkagentReqInfo { get; set; }

        /// <summary>
        /// 订单附加信息。 如果请求时传递了该参数，将在异步通知、对账单中原样返回，同时会在商户和用户的pc账单详情中作为交易描述展示
        /// </summary>
        /// <value>订单附加信息。 如果请求时传递了该参数，将在异步通知、对账单中原样返回，同时会在商户和用户的pc账单详情中作为交易描述展示</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets BusinessParams
        /// </summary>
        [DataMember(Name = "business_params", EmitDefaultValue = false)]
        public BusinessParams BusinessParams { get; set; }

        /// <summary>
        /// 买家支付宝用户ID。 支付宝预授权和新当面资金授权场景下必填，其它场景不需要传入。
        /// </summary>
        /// <value>买家支付宝用户ID。 支付宝预授权和新当面资金授权场景下必填，其它场景不需要传入。</value>
        [DataMember(Name = "buyer_id", EmitDefaultValue = false)]
        public string BuyerId { get; set; }

        /// <summary>
        /// 买家支付宝用户唯一标识
        /// </summary>
        /// <value>买家支付宝用户唯一标识</value>
        [DataMember(Name = "buyer_open_id", EmitDefaultValue = false)]
        public string BuyerOpenId { get; set; }

        /// <summary>
        /// 禁用支付渠道。 多个渠道以逗号分割，如同时禁用信用支付类型和积分，则传入：\&quot;credit_group,point\&quot;。 支持传入的值：&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.open.alipay.com/common/wifww7\&quot;&gt;渠道列表&lt;/a&gt;
        /// </summary>
        /// <value>禁用支付渠道。 多个渠道以逗号分割，如同时禁用信用支付类型和积分，则传入：\&quot;credit_group,point\&quot;。 支持传入的值：&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.open.alipay.com/common/wifww7\&quot;&gt;渠道列表&lt;/a&gt;</value>
        [DataMember(Name = "disable_pay_channels", EmitDefaultValue = false)]
        public string DisablePayChannels { get; set; }

        /// <summary>
        /// 可打折金额。 参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。
        /// </summary>
        /// <value>可打折金额。 参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。</value>
        [DataMember(Name = "discountable_amount", EmitDefaultValue = false)]
        public string DiscountableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExtUserInfo
        /// </summary>
        [DataMember(Name = "ext_user_info", EmitDefaultValue = false)]
        public ExtUserInfo ExtUserInfo { get; set; }

        /// <summary>
        /// Gets or Sets ExtendParams
        /// </summary>
        [DataMember(Name = "extend_params", EmitDefaultValue = false)]
        public ExtendParams ExtendParams { get; set; }

        /// <summary>
        /// 订单包含的商品列表信息，json格式。
        /// </summary>
        /// <value>订单包含的商品列表信息，json格式。</value>
        [DataMember(Name = "goods_detail", EmitDefaultValue = false)]
        public List<GoodsDetail> GoodsDetail { get; set; }

        /// <summary>
        /// 是否异步支付，传入true时，表明本次期望走异步支付，会先将支付请求受理下来，再异步推进。商户可以通过交易的异步通知或者轮询交易的状态来确定最终的交易结果。 只在代扣场景下有效，其它场景无需传入。
        /// </summary>
        /// <value>是否异步支付，传入true时，表明本次期望走异步支付，会先将支付请求受理下来，再异步推进。商户可以通过交易的异步通知或者轮询交易的状态来确定最终的交易结果。 只在代扣场景下有效，其它场景无需传入。</value>
        [DataMember(Name = "is_async_pay", EmitDefaultValue = true)]
        public bool IsAsyncPay { get; set; }

        /// <summary>
        /// 商户的原始订单号
        /// </summary>
        /// <value>商户的原始订单号</value>
        [DataMember(Name = "merchant_order_no", EmitDefaultValue = false)]
        public string MerchantOrderNo { get; set; }

        /// <summary>
        /// 通知地址
        /// </summary>
        /// <value>通知地址</value>
        [DataMember(Name = "notify_url", EmitDefaultValue = false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        /// 商户操作员编号。
        /// </summary>
        /// <value>商户操作员编号。</value>
        [DataMember(Name = "operator_id", EmitDefaultValue = false)]
        public string OperatorId { get; set; }

        /// <summary>
        /// 商户订单号。 由商家自定义，64个字符以内，仅支持字母、数字、下划线且需保证在商户端不重复。
        /// </summary>
        /// <value>商户订单号。 由商家自定义，64个字符以内，仅支持字母、数字、下划线且需保证在商户端不重复。</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 公用回传参数。 如果请求时传递了该参数，支付宝会在异步通知时将该参数原样返回。
        /// </summary>
        /// <value>公用回传参数。 如果请求时传递了该参数，支付宝会在异步通知时将该参数原样返回。</value>
        [DataMember(Name = "passback_params", EmitDefaultValue = false)]
        public string PassbackParams { get; set; }

        /// <summary>
        /// Gets or Sets PayParams
        /// </summary>
        [DataMember(Name = "pay_params", EmitDefaultValue = false)]
        public PayParams PayParams { get; set; }

        /// <summary>
        /// 产品码。 商家和支付宝签约的产品码。 枚举值（点击查看签约情况）： &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/486/487\&quot;&gt;FACE_TO_FACE_PAYMENT&lt;/a&gt;：当面付产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/807/1419\&quot;&gt;CYCLE_PAY_AUTH&lt;/a&gt;：周期扣款产品； GENERAL_WITHHOLDING：代扣产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/712/1471\&quot;&gt;PRE_AUTH_ONLINE&lt;/a&gt;：支付宝预授权产品； PRE_AUTH：新当面资金授权产品； 默认值为FACE_TO_FACE_PAYMENT。 注意：非当面付产品使用本接口时，本参数必填。请传入对应产品码。
        /// </summary>
        /// <value>产品码。 商家和支付宝签约的产品码。 枚举值（点击查看签约情况）： &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/486/487\&quot;&gt;FACE_TO_FACE_PAYMENT&lt;/a&gt;：当面付产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/807/1419\&quot;&gt;CYCLE_PAY_AUTH&lt;/a&gt;：周期扣款产品； GENERAL_WITHHOLDING：代扣产品； &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://opensupport.alipay.com/support/codelab/detail/712/1471\&quot;&gt;PRE_AUTH_ONLINE&lt;/a&gt;：支付宝预授权产品； PRE_AUTH：新当面资金授权产品； 默认值为FACE_TO_FACE_PAYMENT。 注意：非当面付产品使用本接口时，本参数必填。请传入对应产品码。</value>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets PromoParams
        /// </summary>
        [DataMember(Name = "promo_params", EmitDefaultValue = false)]
        public PromoParam PromoParams { get; set; }

        /// <summary>
        /// 返回参数选项。 商户通过传递该参数来定制同步需要额外返回的信息字段，数组格式。包括但不限于：[\&quot;fund_bill_list\&quot;,\&quot;voucher_detail_list\&quot;,\&quot;enterprise_pay_info\&quot;,\&quot;discount_goods_detail\&quot;,\&quot;discount_amount\&quot;,\&quot;mdiscount_amount\&quot;]
        /// </summary>
        /// <value>返回参数选项。 商户通过传递该参数来定制同步需要额外返回的信息字段，数组格式。包括但不限于：[\&quot;fund_bill_list\&quot;,\&quot;voucher_detail_list\&quot;,\&quot;enterprise_pay_info\&quot;,\&quot;discount_goods_detail\&quot;,\&quot;discount_amount\&quot;,\&quot;mdiscount_amount\&quot;]</value>
        [DataMember(Name = "query_options", EmitDefaultValue = false)]
        public List<string> QueryOptions { get; set; }

        /// <summary>
        /// 收单机构(例如银行）的标识，填写该机构在支付宝的pid。只在机构间联场景下传递该值。
        /// </summary>
        /// <value>收单机构(例如银行）的标识，填写该机构在支付宝的pid。只在机构间联场景下传递该值。</value>
        [DataMember(Name = "request_org_pid", EmitDefaultValue = false)]
        public string RequestOrgPid { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyInfo
        /// </summary>
        [DataMember(Name = "royalty_info", EmitDefaultValue = false)]
        public RoyaltyInfo RoyaltyInfo { get; set; }

        /// <summary>
        /// 支付场景。枚举值： bar_code：当面付条码支付场景； security_code：当面付刷脸支付场景，对应的auth_code为fp开头的刷脸标识串； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 默认值为bar_code。
        /// </summary>
        /// <value>支付场景。枚举值： bar_code：当面付条码支付场景； security_code：当面付刷脸支付场景，对应的auth_code为fp开头的刷脸标识串； 周期扣款或代扣场景无需传入，协议号通过agreement_params参数传递；  支付宝预授权和新当面资金授权场景无需传入，授权订单号通过 auth_no字段传入。 默认值为bar_code。</value>
        [DataMember(Name = "scene", EmitDefaultValue = false)]
        public string Scene { get; set; }

        /// <summary>
        /// 卖家支付宝用户ID。 当需要指定收款账号时，通过该参数传入，如果该值为空，则默认为商户签约账号对应的支付宝用户ID。 收款账号优先级规则：门店绑定的收款账户&gt;请求传入的seller_id&gt;商户签约账号对应的支付宝用户ID； 注：直付通和机构间联场景下seller_id无需传入或者保持跟pid一致； 如果传入的seller_id与pid不一致，需要联系支付宝小二配置收款关系； 支付宝预授权和新当面资金授权场景下必填。
        /// </summary>
        /// <value>卖家支付宝用户ID。 当需要指定收款账号时，通过该参数传入，如果该值为空，则默认为商户签约账号对应的支付宝用户ID。 收款账号优先级规则：门店绑定的收款账户&gt;请求传入的seller_id&gt;商户签约账号对应的支付宝用户ID； 注：直付通和机构间联场景下seller_id无需传入或者保持跟pid一致； 如果传入的seller_id与pid不一致，需要联系支付宝小二配置收款关系； 支付宝预授权和新当面资金授权场景下必填。</value>
        [DataMember(Name = "seller_id", EmitDefaultValue = false)]
        public string SellerId { get; set; }

        /// <summary>
        /// 商户指定的结算币种，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY
        /// </summary>
        /// <value>商户指定的结算币种，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY</value>
        [DataMember(Name = "settle_currency", EmitDefaultValue = false)]
        public string SettleCurrency { get; set; }

        /// <summary>
        /// Gets or Sets SettleInfo
        /// </summary>
        [DataMember(Name = "settle_info", EmitDefaultValue = false)]
        public SettleInfo SettleInfo { get; set; }

        /// <summary>
        /// 商户门店编号。 指商户创建门店时输入的门店编号。
        /// </summary>
        /// <value>商户门店编号。 指商户创建门店时输入的门店编号。</value>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets SubMerchant
        /// </summary>
        [DataMember(Name = "sub_merchant", EmitDefaultValue = false)]
        public SubMerchant SubMerchant { get; set; }

        /// <summary>
        /// 订单标题。 注意：不可使用特殊字符，如 /，&#x3D;，&amp; 等。
        /// </summary>
        /// <value>订单标题。 注意：不可使用特殊字符，如 /，&#x3D;，&amp; 等。</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// 商户机具终端编号。
        /// </summary>
        /// <value>商户机具终端编号。</value>
        [DataMember(Name = "terminal_id", EmitDefaultValue = false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// IOT设备信息。 通过集成IOTSDK的机具发起的交易时传入，取值为IOTSDK生成的业务签名值。
        /// </summary>
        /// <value>IOT设备信息。 通过集成IOTSDK的机具发起的交易时传入，取值为IOTSDK生成的业务签名值。</value>
        [DataMember(Name = "terminal_params", EmitDefaultValue = false)]
        public string TerminalParams { get; set; }

        /// <summary>
        /// 订单绝对超时时间。 格式为yyyy-MM-dd HH:mm:ss。超时时间范围：1m~15d。 注：time_expire和timeout_express两者只需传入一个或者都不传，如果两者都传，优先使用time_expire。
        /// </summary>
        /// <value>订单绝对超时时间。 格式为yyyy-MM-dd HH:mm:ss。超时时间范围：1m~15d。 注：time_expire和timeout_express两者只需传入一个或者都不传，如果两者都传，优先使用time_expire。</value>
        [DataMember(Name = "time_expire", EmitDefaultValue = false)]
        public string TimeExpire { get; set; }

        /// <summary>
        /// 订单相对超时时间。从交易创建时间开始计算。  该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1m～15d。m-分钟，h-小时，d-天，1c-当天（1c-当天的情况下，无论交易何时创建，都在0点关闭）。 该参数数值不接受小数点， 如 1.5h，可转换为 90m。  当面付场景默认值为3h；  其它场景默认值为15d;
        /// </summary>
        /// <value>订单相对超时时间。从交易创建时间开始计算。  该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1m～15d。m-分钟，h-小时，d-天，1c-当天（1c-当天的情况下，无论交易何时创建，都在0点关闭）。 该参数数值不接受小数点， 如 1.5h，可转换为 90m。  当面付场景默认值为3h；  其它场景默认值为15d;</value>
        [DataMember(Name = "timeout_express", EmitDefaultValue = false)]
        public string TimeoutExpress { get; set; }

        /// <summary>
        /// 订单总金额。 单位为元，精确到小数点后两位，取值范围：[0.01,100000000] 。
        /// </summary>
        /// <value>订单总金额。 单位为元，精确到小数点后两位，取值范围：[0.01,100000000] 。</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 标价币种,  total_amount 对应的币种单位。支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY
        /// </summary>
        /// <value>标价币种,  total_amount 对应的币种单位。支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY</value>
        [DataMember(Name = "trans_currency", EmitDefaultValue = false)]
        public string TransCurrency { get; set; }

        /// <summary>
        /// 不可打折金额。 不参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。
        /// </summary>
        /// <value>不可打折金额。 不参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]。  如果同时传入了【可打折金额】、【不可打折金额】和【订单总金额】，则必须满足如下条件：【订单总金额】&#x3D;【可打折金额】+【不可打折金额】。 如果订单金额全部参与优惠计算，则【可打折金额】和【不可打折金额】都无需传入。</value>
        [DataMember(Name = "undiscountable_amount", EmitDefaultValue = false)]
        public string UndiscountableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradePayModel {\n");
            sb.Append("  AdvancePaymentType: ").Append(AdvancePaymentType).Append("\n");
            sb.Append("  AgreementParams: ").Append(AgreementParams).Append("\n");
            sb.Append("  AlipayStoreId: ").Append(AlipayStoreId).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  AuthConfirmMode: ").Append(AuthConfirmMode).Append("\n");
            sb.Append("  AuthNo: ").Append(AuthNo).Append("\n");
            sb.Append("  BkagentReqInfo: ").Append(BkagentReqInfo).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BusinessParams: ").Append(BusinessParams).Append("\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  DisablePayChannels: ").Append(DisablePayChannels).Append("\n");
            sb.Append("  DiscountableAmount: ").Append(DiscountableAmount).Append("\n");
            sb.Append("  ExtUserInfo: ").Append(ExtUserInfo).Append("\n");
            sb.Append("  ExtendParams: ").Append(ExtendParams).Append("\n");
            sb.Append("  GoodsDetail: ").Append(GoodsDetail).Append("\n");
            sb.Append("  IsAsyncPay: ").Append(IsAsyncPay).Append("\n");
            sb.Append("  MerchantOrderNo: ").Append(MerchantOrderNo).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  OperatorId: ").Append(OperatorId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PassbackParams: ").Append(PassbackParams).Append("\n");
            sb.Append("  PayParams: ").Append(PayParams).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PromoParams: ").Append(PromoParams).Append("\n");
            sb.Append("  QueryOptions: ").Append(QueryOptions).Append("\n");
            sb.Append("  RequestOrgPid: ").Append(RequestOrgPid).Append("\n");
            sb.Append("  RoyaltyInfo: ").Append(RoyaltyInfo).Append("\n");
            sb.Append("  Scene: ").Append(Scene).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  SettleCurrency: ").Append(SettleCurrency).Append("\n");
            sb.Append("  SettleInfo: ").Append(SettleInfo).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  SubMerchant: ").Append(SubMerchant).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  TerminalParams: ").Append(TerminalParams).Append("\n");
            sb.Append("  TimeExpire: ").Append(TimeExpire).Append("\n");
            sb.Append("  TimeoutExpress: ").Append(TimeoutExpress).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TransCurrency: ").Append(TransCurrency).Append("\n");
            sb.Append("  UndiscountableAmount: ").Append(UndiscountableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradePayModel);
        }

        /// <summary>
        /// Returns true if AlipayTradePayModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradePayModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradePayModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdvancePaymentType == input.AdvancePaymentType ||
                    (this.AdvancePaymentType != null &&
                    this.AdvancePaymentType.Equals(input.AdvancePaymentType))
                ) && 
                (
                    this.AgreementParams == input.AgreementParams ||
                    (this.AgreementParams != null &&
                    this.AgreementParams.Equals(input.AgreementParams))
                ) && 
                (
                    this.AlipayStoreId == input.AlipayStoreId ||
                    (this.AlipayStoreId != null &&
                    this.AlipayStoreId.Equals(input.AlipayStoreId))
                ) && 
                (
                    this.AuthCode == input.AuthCode ||
                    (this.AuthCode != null &&
                    this.AuthCode.Equals(input.AuthCode))
                ) && 
                (
                    this.AuthConfirmMode == input.AuthConfirmMode ||
                    (this.AuthConfirmMode != null &&
                    this.AuthConfirmMode.Equals(input.AuthConfirmMode))
                ) && 
                (
                    this.AuthNo == input.AuthNo ||
                    (this.AuthNo != null &&
                    this.AuthNo.Equals(input.AuthNo))
                ) && 
                (
                    this.BkagentReqInfo == input.BkagentReqInfo ||
                    (this.BkagentReqInfo != null &&
                    this.BkagentReqInfo.Equals(input.BkagentReqInfo))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.BusinessParams == input.BusinessParams ||
                    (this.BusinessParams != null &&
                    this.BusinessParams.Equals(input.BusinessParams))
                ) && 
                (
                    this.BuyerId == input.BuyerId ||
                    (this.BuyerId != null &&
                    this.BuyerId.Equals(input.BuyerId))
                ) && 
                (
                    this.BuyerOpenId == input.BuyerOpenId ||
                    (this.BuyerOpenId != null &&
                    this.BuyerOpenId.Equals(input.BuyerOpenId))
                ) && 
                (
                    this.DisablePayChannels == input.DisablePayChannels ||
                    (this.DisablePayChannels != null &&
                    this.DisablePayChannels.Equals(input.DisablePayChannels))
                ) && 
                (
                    this.DiscountableAmount == input.DiscountableAmount ||
                    (this.DiscountableAmount != null &&
                    this.DiscountableAmount.Equals(input.DiscountableAmount))
                ) && 
                (
                    this.ExtUserInfo == input.ExtUserInfo ||
                    (this.ExtUserInfo != null &&
                    this.ExtUserInfo.Equals(input.ExtUserInfo))
                ) && 
                (
                    this.ExtendParams == input.ExtendParams ||
                    (this.ExtendParams != null &&
                    this.ExtendParams.Equals(input.ExtendParams))
                ) && 
                (
                    this.GoodsDetail == input.GoodsDetail ||
                    this.GoodsDetail != null &&
                    input.GoodsDetail != null &&
                    this.GoodsDetail.SequenceEqual(input.GoodsDetail)
                ) && 
                (
                    this.IsAsyncPay == input.IsAsyncPay ||
                    this.IsAsyncPay.Equals(input.IsAsyncPay)
                ) && 
                (
                    this.MerchantOrderNo == input.MerchantOrderNo ||
                    (this.MerchantOrderNo != null &&
                    this.MerchantOrderNo.Equals(input.MerchantOrderNo))
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                ) && 
                (
                    this.OperatorId == input.OperatorId ||
                    (this.OperatorId != null &&
                    this.OperatorId.Equals(input.OperatorId))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.PassbackParams == input.PassbackParams ||
                    (this.PassbackParams != null &&
                    this.PassbackParams.Equals(input.PassbackParams))
                ) && 
                (
                    this.PayParams == input.PayParams ||
                    (this.PayParams != null &&
                    this.PayParams.Equals(input.PayParams))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.PromoParams == input.PromoParams ||
                    (this.PromoParams != null &&
                    this.PromoParams.Equals(input.PromoParams))
                ) && 
                (
                    this.QueryOptions == input.QueryOptions ||
                    this.QueryOptions != null &&
                    input.QueryOptions != null &&
                    this.QueryOptions.SequenceEqual(input.QueryOptions)
                ) && 
                (
                    this.RequestOrgPid == input.RequestOrgPid ||
                    (this.RequestOrgPid != null &&
                    this.RequestOrgPid.Equals(input.RequestOrgPid))
                ) && 
                (
                    this.RoyaltyInfo == input.RoyaltyInfo ||
                    (this.RoyaltyInfo != null &&
                    this.RoyaltyInfo.Equals(input.RoyaltyInfo))
                ) && 
                (
                    this.Scene == input.Scene ||
                    (this.Scene != null &&
                    this.Scene.Equals(input.Scene))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.SettleCurrency == input.SettleCurrency ||
                    (this.SettleCurrency != null &&
                    this.SettleCurrency.Equals(input.SettleCurrency))
                ) && 
                (
                    this.SettleInfo == input.SettleInfo ||
                    (this.SettleInfo != null &&
                    this.SettleInfo.Equals(input.SettleInfo))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.SubMerchant == input.SubMerchant ||
                    (this.SubMerchant != null &&
                    this.SubMerchant.Equals(input.SubMerchant))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.TerminalParams == input.TerminalParams ||
                    (this.TerminalParams != null &&
                    this.TerminalParams.Equals(input.TerminalParams))
                ) && 
                (
                    this.TimeExpire == input.TimeExpire ||
                    (this.TimeExpire != null &&
                    this.TimeExpire.Equals(input.TimeExpire))
                ) && 
                (
                    this.TimeoutExpress == input.TimeoutExpress ||
                    (this.TimeoutExpress != null &&
                    this.TimeoutExpress.Equals(input.TimeoutExpress))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TransCurrency == input.TransCurrency ||
                    (this.TransCurrency != null &&
                    this.TransCurrency.Equals(input.TransCurrency))
                ) && 
                (
                    this.UndiscountableAmount == input.UndiscountableAmount ||
                    (this.UndiscountableAmount != null &&
                    this.UndiscountableAmount.Equals(input.UndiscountableAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvancePaymentType != null)
                {
                    hashCode = (hashCode * 59) + this.AdvancePaymentType.GetHashCode();
                }
                if (this.AgreementParams != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementParams.GetHashCode();
                }
                if (this.AlipayStoreId != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayStoreId.GetHashCode();
                }
                if (this.AuthCode != null)
                {
                    hashCode = (hashCode * 59) + this.AuthCode.GetHashCode();
                }
                if (this.AuthConfirmMode != null)
                {
                    hashCode = (hashCode * 59) + this.AuthConfirmMode.GetHashCode();
                }
                if (this.AuthNo != null)
                {
                    hashCode = (hashCode * 59) + this.AuthNo.GetHashCode();
                }
                if (this.BkagentReqInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BkagentReqInfo.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.BusinessParams != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessParams.GetHashCode();
                }
                if (this.BuyerId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerId.GetHashCode();
                }
                if (this.BuyerOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerOpenId.GetHashCode();
                }
                if (this.DisablePayChannels != null)
                {
                    hashCode = (hashCode * 59) + this.DisablePayChannels.GetHashCode();
                }
                if (this.DiscountableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountableAmount.GetHashCode();
                }
                if (this.ExtUserInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtUserInfo.GetHashCode();
                }
                if (this.ExtendParams != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendParams.GetHashCode();
                }
                if (this.GoodsDetail != null)
                {
                    hashCode = (hashCode * 59) + this.GoodsDetail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAsyncPay.GetHashCode();
                if (this.MerchantOrderNo != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantOrderNo.GetHashCode();
                }
                if (this.NotifyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NotifyUrl.GetHashCode();
                }
                if (this.OperatorId != null)
                {
                    hashCode = (hashCode * 59) + this.OperatorId.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.PassbackParams != null)
                {
                    hashCode = (hashCode * 59) + this.PassbackParams.GetHashCode();
                }
                if (this.PayParams != null)
                {
                    hashCode = (hashCode * 59) + this.PayParams.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.PromoParams != null)
                {
                    hashCode = (hashCode * 59) + this.PromoParams.GetHashCode();
                }
                if (this.QueryOptions != null)
                {
                    hashCode = (hashCode * 59) + this.QueryOptions.GetHashCode();
                }
                if (this.RequestOrgPid != null)
                {
                    hashCode = (hashCode * 59) + this.RequestOrgPid.GetHashCode();
                }
                if (this.RoyaltyInfo != null)
                {
                    hashCode = (hashCode * 59) + this.RoyaltyInfo.GetHashCode();
                }
                if (this.Scene != null)
                {
                    hashCode = (hashCode * 59) + this.Scene.GetHashCode();
                }
                if (this.SellerId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerId.GetHashCode();
                }
                if (this.SettleCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettleCurrency.GetHashCode();
                }
                if (this.SettleInfo != null)
                {
                    hashCode = (hashCode * 59) + this.SettleInfo.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.SubMerchant != null)
                {
                    hashCode = (hashCode * 59) + this.SubMerchant.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.TerminalId != null)
                {
                    hashCode = (hashCode * 59) + this.TerminalId.GetHashCode();
                }
                if (this.TerminalParams != null)
                {
                    hashCode = (hashCode * 59) + this.TerminalParams.GetHashCode();
                }
                if (this.TimeExpire != null)
                {
                    hashCode = (hashCode * 59) + this.TimeExpire.GetHashCode();
                }
                if (this.TimeoutExpress != null)
                {
                    hashCode = (hashCode * 59) + this.TimeoutExpress.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TransCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.TransCurrency.GetHashCode();
                }
                if (this.UndiscountableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.UndiscountableAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
