/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradeCustomsDeclareResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradeCustomsDeclareResponseModel")]
    public partial class AlipayTradeCustomsDeclareResponseModel : IEquatable<AlipayTradeCustomsDeclareResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeCustomsDeclareResponseModel" /> class.
        /// </summary>
        /// <param name="alipayDeclareNo">支付宝报关流水号。.</param>
        /// <param name="currency">币种.</param>
        /// <param name="identityCheck">订购人身份信息和支付人的身份信息验证结果。T表示商户传入的订购人姓名和身份证号和支付人的姓名和身份证号一致。F代表商户传入的订购人姓名和身份证号和支付人的姓名和身份证号不一致。对于同一笔报关单支付宝只会校验一次，如果多次重推不会返回此参数。.</param>
        /// <param name="outTradeNo">国际站外部订单号.</param>
        /// <param name="payCode">支付机构注册号.</param>
        /// <param name="payTransactionId">清算流水号.</param>
        /// <param name="totalAmount">交易总金额(单位:分).</param>
        /// <param name="tradeNo">支付宝推送到海关的支付单据号。.</param>
        /// <param name="verDept">清算机构标志（1-cup,2-null,3-other）.</param>
        public AlipayTradeCustomsDeclareResponseModel(string alipayDeclareNo = default(string), string currency = default(string), string identityCheck = default(string), string outTradeNo = default(string), string payCode = default(string), string payTransactionId = default(string), string totalAmount = default(string), string tradeNo = default(string), string verDept = default(string))
        {
            this.AlipayDeclareNo = alipayDeclareNo;
            this.Currency = currency;
            this.IdentityCheck = identityCheck;
            this.OutTradeNo = outTradeNo;
            this.PayCode = payCode;
            this.PayTransactionId = payTransactionId;
            this.TotalAmount = totalAmount;
            this.TradeNo = tradeNo;
            this.VerDept = verDept;
        }

        /// <summary>
        /// 支付宝报关流水号。
        /// </summary>
        /// <value>支付宝报关流水号。</value>
        [DataMember(Name = "alipay_declare_no", EmitDefaultValue = false)]
        public string AlipayDeclareNo { get; set; }

        /// <summary>
        /// 币种
        /// </summary>
        /// <value>币种</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// 订购人身份信息和支付人的身份信息验证结果。T表示商户传入的订购人姓名和身份证号和支付人的姓名和身份证号一致。F代表商户传入的订购人姓名和身份证号和支付人的姓名和身份证号不一致。对于同一笔报关单支付宝只会校验一次，如果多次重推不会返回此参数。
        /// </summary>
        /// <value>订购人身份信息和支付人的身份信息验证结果。T表示商户传入的订购人姓名和身份证号和支付人的姓名和身份证号一致。F代表商户传入的订购人姓名和身份证号和支付人的姓名和身份证号不一致。对于同一笔报关单支付宝只会校验一次，如果多次重推不会返回此参数。</value>
        [DataMember(Name = "identity_check", EmitDefaultValue = false)]
        public string IdentityCheck { get; set; }

        /// <summary>
        /// 国际站外部订单号
        /// </summary>
        /// <value>国际站外部订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 支付机构注册号
        /// </summary>
        /// <value>支付机构注册号</value>
        [DataMember(Name = "pay_code", EmitDefaultValue = false)]
        public string PayCode { get; set; }

        /// <summary>
        /// 清算流水号
        /// </summary>
        /// <value>清算流水号</value>
        [DataMember(Name = "pay_transaction_id", EmitDefaultValue = false)]
        public string PayTransactionId { get; set; }

        /// <summary>
        /// 交易总金额(单位:分)
        /// </summary>
        /// <value>交易总金额(单位:分)</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 支付宝推送到海关的支付单据号。
        /// </summary>
        /// <value>支付宝推送到海关的支付单据号。</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// 清算机构标志（1-cup,2-null,3-other）
        /// </summary>
        /// <value>清算机构标志（1-cup,2-null,3-other）</value>
        [DataMember(Name = "ver_dept", EmitDefaultValue = false)]
        public string VerDept { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeCustomsDeclareResponseModel {\n");
            sb.Append("  AlipayDeclareNo: ").Append(AlipayDeclareNo).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IdentityCheck: ").Append(IdentityCheck).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PayCode: ").Append(PayCode).Append("\n");
            sb.Append("  PayTransactionId: ").Append(PayTransactionId).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  VerDept: ").Append(VerDept).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradeCustomsDeclareResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradeCustomsDeclareResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradeCustomsDeclareResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradeCustomsDeclareResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AlipayDeclareNo == input.AlipayDeclareNo ||
                    (this.AlipayDeclareNo != null &&
                    this.AlipayDeclareNo.Equals(input.AlipayDeclareNo))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IdentityCheck == input.IdentityCheck ||
                    (this.IdentityCheck != null &&
                    this.IdentityCheck.Equals(input.IdentityCheck))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.PayCode == input.PayCode ||
                    (this.PayCode != null &&
                    this.PayCode.Equals(input.PayCode))
                ) && 
                (
                    this.PayTransactionId == input.PayTransactionId ||
                    (this.PayTransactionId != null &&
                    this.PayTransactionId.Equals(input.PayTransactionId))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                ) && 
                (
                    this.VerDept == input.VerDept ||
                    (this.VerDept != null &&
                    this.VerDept.Equals(input.VerDept))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlipayDeclareNo != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayDeclareNo.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.IdentityCheck != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityCheck.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.PayCode != null)
                {
                    hashCode = (hashCode * 59) + this.PayCode.GetHashCode();
                }
                if (this.PayTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.PayTransactionId.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                if (this.VerDept != null)
                {
                    hashCode = (hashCode * 59) + this.VerDept.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
