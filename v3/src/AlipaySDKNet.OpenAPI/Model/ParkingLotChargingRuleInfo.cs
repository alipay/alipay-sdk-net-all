/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ParkingLotChargingRuleInfo
    /// </summary>
    [DataContract(Name = "ParkingLotChargingRuleInfo")]
    public partial class ParkingLotChargingRuleInfo : IEquatable<ParkingLotChargingRuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParkingLotChargingRuleInfo" /> class.
        /// </summary>
        /// <param name="chargingPeriod">停车收费时间段，输入24小时制的小时时间段格式:  开始时间-结束时间, 结束时间必须大于开始时间 时间取值范围：0到24.</param>
        /// <param name="chargingStrategy">计费策略； UP：向上取整 DOMN：向下取整.</param>
        /// <param name="chargingUnitFee">跳费金额 单位元.</param>
        /// <param name="chargingUnitMinutes">跳费间隔分钟数.</param>
        /// <param name="enableRolloverChargePeriod">超时是否顺延到下个计费区间.</param>
        /// <param name="firstChargingSpanMinutes">首段计费周期分钟数.</param>
        /// <param name="firstChargingUnitFee">首段计费周期跳费金额 单位: 元.</param>
        /// <param name="firstChargingUnitMinutes">首段计费周期跳费间隔 单位分钟.</param>
        /// <param name="freeEnterMinutes">入场免费时间 单位:分钟.</param>
        /// <param name="freeExitMinutes">离场免费时间 单位:分钟.</param>
        /// <param name="maxFeePerDay">日封顶金额 单位: 元.</param>
        public ParkingLotChargingRuleInfo(string chargingPeriod = default(string), string chargingStrategy = default(string), string chargingUnitFee = default(string), string chargingUnitMinutes = default(string), bool enableRolloverChargePeriod = default(bool), string firstChargingSpanMinutes = default(string), string firstChargingUnitFee = default(string), string firstChargingUnitMinutes = default(string), string freeEnterMinutes = default(string), string freeExitMinutes = default(string), string maxFeePerDay = default(string))
        {
            this.ChargingPeriod = chargingPeriod;
            this.ChargingStrategy = chargingStrategy;
            this.ChargingUnitFee = chargingUnitFee;
            this.ChargingUnitMinutes = chargingUnitMinutes;
            this.EnableRolloverChargePeriod = enableRolloverChargePeriod;
            this.FirstChargingSpanMinutes = firstChargingSpanMinutes;
            this.FirstChargingUnitFee = firstChargingUnitFee;
            this.FirstChargingUnitMinutes = firstChargingUnitMinutes;
            this.FreeEnterMinutes = freeEnterMinutes;
            this.FreeExitMinutes = freeExitMinutes;
            this.MaxFeePerDay = maxFeePerDay;
        }

        /// <summary>
        /// 停车收费时间段，输入24小时制的小时时间段格式:  开始时间-结束时间, 结束时间必须大于开始时间 时间取值范围：0到24
        /// </summary>
        /// <value>停车收费时间段，输入24小时制的小时时间段格式:  开始时间-结束时间, 结束时间必须大于开始时间 时间取值范围：0到24</value>
        [DataMember(Name = "charging_period", EmitDefaultValue = false)]
        public string ChargingPeriod { get; set; }

        /// <summary>
        /// 计费策略； UP：向上取整 DOMN：向下取整
        /// </summary>
        /// <value>计费策略； UP：向上取整 DOMN：向下取整</value>
        [DataMember(Name = "charging_strategy", EmitDefaultValue = false)]
        public string ChargingStrategy { get; set; }

        /// <summary>
        /// 跳费金额 单位元
        /// </summary>
        /// <value>跳费金额 单位元</value>
        [DataMember(Name = "charging_unit_fee", EmitDefaultValue = false)]
        public string ChargingUnitFee { get; set; }

        /// <summary>
        /// 跳费间隔分钟数
        /// </summary>
        /// <value>跳费间隔分钟数</value>
        [DataMember(Name = "charging_unit_minutes", EmitDefaultValue = false)]
        public string ChargingUnitMinutes { get; set; }

        /// <summary>
        /// 超时是否顺延到下个计费区间
        /// </summary>
        /// <value>超时是否顺延到下个计费区间</value>
        [DataMember(Name = "enable_rollover_charge_period", EmitDefaultValue = true)]
        public bool EnableRolloverChargePeriod { get; set; }

        /// <summary>
        /// 首段计费周期分钟数
        /// </summary>
        /// <value>首段计费周期分钟数</value>
        [DataMember(Name = "first_charging_span_minutes", EmitDefaultValue = false)]
        public string FirstChargingSpanMinutes { get; set; }

        /// <summary>
        /// 首段计费周期跳费金额 单位: 元
        /// </summary>
        /// <value>首段计费周期跳费金额 单位: 元</value>
        [DataMember(Name = "first_charging_unit_fee", EmitDefaultValue = false)]
        public string FirstChargingUnitFee { get; set; }

        /// <summary>
        /// 首段计费周期跳费间隔 单位分钟
        /// </summary>
        /// <value>首段计费周期跳费间隔 单位分钟</value>
        [DataMember(Name = "first_charging_unit_minutes", EmitDefaultValue = false)]
        public string FirstChargingUnitMinutes { get; set; }

        /// <summary>
        /// 入场免费时间 单位:分钟
        /// </summary>
        /// <value>入场免费时间 单位:分钟</value>
        [DataMember(Name = "free_enter_minutes", EmitDefaultValue = false)]
        public string FreeEnterMinutes { get; set; }

        /// <summary>
        /// 离场免费时间 单位:分钟
        /// </summary>
        /// <value>离场免费时间 单位:分钟</value>
        [DataMember(Name = "free_exit_minutes", EmitDefaultValue = false)]
        public string FreeExitMinutes { get; set; }

        /// <summary>
        /// 日封顶金额 单位: 元
        /// </summary>
        /// <value>日封顶金额 单位: 元</value>
        [DataMember(Name = "max_fee_per_day", EmitDefaultValue = false)]
        public string MaxFeePerDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParkingLotChargingRuleInfo {\n");
            sb.Append("  ChargingPeriod: ").Append(ChargingPeriod).Append("\n");
            sb.Append("  ChargingStrategy: ").Append(ChargingStrategy).Append("\n");
            sb.Append("  ChargingUnitFee: ").Append(ChargingUnitFee).Append("\n");
            sb.Append("  ChargingUnitMinutes: ").Append(ChargingUnitMinutes).Append("\n");
            sb.Append("  EnableRolloverChargePeriod: ").Append(EnableRolloverChargePeriod).Append("\n");
            sb.Append("  FirstChargingSpanMinutes: ").Append(FirstChargingSpanMinutes).Append("\n");
            sb.Append("  FirstChargingUnitFee: ").Append(FirstChargingUnitFee).Append("\n");
            sb.Append("  FirstChargingUnitMinutes: ").Append(FirstChargingUnitMinutes).Append("\n");
            sb.Append("  FreeEnterMinutes: ").Append(FreeEnterMinutes).Append("\n");
            sb.Append("  FreeExitMinutes: ").Append(FreeExitMinutes).Append("\n");
            sb.Append("  MaxFeePerDay: ").Append(MaxFeePerDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParkingLotChargingRuleInfo);
        }

        /// <summary>
        /// Returns true if ParkingLotChargingRuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ParkingLotChargingRuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParkingLotChargingRuleInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChargingPeriod == input.ChargingPeriod ||
                    (this.ChargingPeriod != null &&
                    this.ChargingPeriod.Equals(input.ChargingPeriod))
                ) && 
                (
                    this.ChargingStrategy == input.ChargingStrategy ||
                    (this.ChargingStrategy != null &&
                    this.ChargingStrategy.Equals(input.ChargingStrategy))
                ) && 
                (
                    this.ChargingUnitFee == input.ChargingUnitFee ||
                    (this.ChargingUnitFee != null &&
                    this.ChargingUnitFee.Equals(input.ChargingUnitFee))
                ) && 
                (
                    this.ChargingUnitMinutes == input.ChargingUnitMinutes ||
                    (this.ChargingUnitMinutes != null &&
                    this.ChargingUnitMinutes.Equals(input.ChargingUnitMinutes))
                ) && 
                (
                    this.EnableRolloverChargePeriod == input.EnableRolloverChargePeriod ||
                    this.EnableRolloverChargePeriod.Equals(input.EnableRolloverChargePeriod)
                ) && 
                (
                    this.FirstChargingSpanMinutes == input.FirstChargingSpanMinutes ||
                    (this.FirstChargingSpanMinutes != null &&
                    this.FirstChargingSpanMinutes.Equals(input.FirstChargingSpanMinutes))
                ) && 
                (
                    this.FirstChargingUnitFee == input.FirstChargingUnitFee ||
                    (this.FirstChargingUnitFee != null &&
                    this.FirstChargingUnitFee.Equals(input.FirstChargingUnitFee))
                ) && 
                (
                    this.FirstChargingUnitMinutes == input.FirstChargingUnitMinutes ||
                    (this.FirstChargingUnitMinutes != null &&
                    this.FirstChargingUnitMinutes.Equals(input.FirstChargingUnitMinutes))
                ) && 
                (
                    this.FreeEnterMinutes == input.FreeEnterMinutes ||
                    (this.FreeEnterMinutes != null &&
                    this.FreeEnterMinutes.Equals(input.FreeEnterMinutes))
                ) && 
                (
                    this.FreeExitMinutes == input.FreeExitMinutes ||
                    (this.FreeExitMinutes != null &&
                    this.FreeExitMinutes.Equals(input.FreeExitMinutes))
                ) && 
                (
                    this.MaxFeePerDay == input.MaxFeePerDay ||
                    (this.MaxFeePerDay != null &&
                    this.MaxFeePerDay.Equals(input.MaxFeePerDay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChargingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingPeriod.GetHashCode();
                }
                if (this.ChargingStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingStrategy.GetHashCode();
                }
                if (this.ChargingUnitFee != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingUnitFee.GetHashCode();
                }
                if (this.ChargingUnitMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingUnitMinutes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableRolloverChargePeriod.GetHashCode();
                if (this.FirstChargingSpanMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.FirstChargingSpanMinutes.GetHashCode();
                }
                if (this.FirstChargingUnitFee != null)
                {
                    hashCode = (hashCode * 59) + this.FirstChargingUnitFee.GetHashCode();
                }
                if (this.FirstChargingUnitMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.FirstChargingUnitMinutes.GetHashCode();
                }
                if (this.FreeEnterMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.FreeEnterMinutes.GetHashCode();
                }
                if (this.FreeExitMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.FreeExitMinutes.GetHashCode();
                }
                if (this.MaxFeePerDay != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerDay.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
