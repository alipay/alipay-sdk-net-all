/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SubServiceKeyWordInfo
    /// </summary>
    [DataContract(Name = "SubServiceKeyWordInfo")]
    public partial class SubServiceKeyWordInfo : IEquatable<SubServiceKeyWordInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubServiceKeyWordInfo" /> class.
        /// </summary>
        /// <param name="appName">小程序名称.</param>
        /// <param name="keywordInfo">此服务下的关键词.</param>
        /// <param name="miniAppId">小程序ID.</param>
        /// <param name="subServiceCode">子服务code.</param>
        /// <param name="subServiceDesc">子服务简单描述.</param>
        /// <param name="subServiceName">子服务名.</param>
        /// <param name="subServiceStatus">子服务状态， INITIAL：初始化：VALID:已生效；INVALID：已失效.</param>
        public SubServiceKeyWordInfo(string appName = default(string), List<KeyWordInfo> keywordInfo = default(List<KeyWordInfo>), string miniAppId = default(string), string subServiceCode = default(string), string subServiceDesc = default(string), string subServiceName = default(string), string subServiceStatus = default(string))
        {
            this.AppName = appName;
            this.KeywordInfo = keywordInfo;
            this.MiniAppId = miniAppId;
            this.SubServiceCode = subServiceCode;
            this.SubServiceDesc = subServiceDesc;
            this.SubServiceName = subServiceName;
            this.SubServiceStatus = subServiceStatus;
        }

        /// <summary>
        /// 小程序名称
        /// </summary>
        /// <value>小程序名称</value>
        [DataMember(Name = "app_name", EmitDefaultValue = false)]
        public string AppName { get; set; }

        /// <summary>
        /// 此服务下的关键词
        /// </summary>
        /// <value>此服务下的关键词</value>
        [DataMember(Name = "keyword_info", EmitDefaultValue = false)]
        public List<KeyWordInfo> KeywordInfo { get; set; }

        /// <summary>
        /// 小程序ID
        /// </summary>
        /// <value>小程序ID</value>
        [DataMember(Name = "mini_app_id", EmitDefaultValue = false)]
        public string MiniAppId { get; set; }

        /// <summary>
        /// 子服务code
        /// </summary>
        /// <value>子服务code</value>
        [DataMember(Name = "sub_service_code", EmitDefaultValue = false)]
        public string SubServiceCode { get; set; }

        /// <summary>
        /// 子服务简单描述
        /// </summary>
        /// <value>子服务简单描述</value>
        [DataMember(Name = "sub_service_desc", EmitDefaultValue = false)]
        public string SubServiceDesc { get; set; }

        /// <summary>
        /// 子服务名
        /// </summary>
        /// <value>子服务名</value>
        [DataMember(Name = "sub_service_name", EmitDefaultValue = false)]
        public string SubServiceName { get; set; }

        /// <summary>
        /// 子服务状态， INITIAL：初始化：VALID:已生效；INVALID：已失效
        /// </summary>
        /// <value>子服务状态， INITIAL：初始化：VALID:已生效；INVALID：已失效</value>
        [DataMember(Name = "sub_service_status", EmitDefaultValue = false)]
        public string SubServiceStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubServiceKeyWordInfo {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  KeywordInfo: ").Append(KeywordInfo).Append("\n");
            sb.Append("  MiniAppId: ").Append(MiniAppId).Append("\n");
            sb.Append("  SubServiceCode: ").Append(SubServiceCode).Append("\n");
            sb.Append("  SubServiceDesc: ").Append(SubServiceDesc).Append("\n");
            sb.Append("  SubServiceName: ").Append(SubServiceName).Append("\n");
            sb.Append("  SubServiceStatus: ").Append(SubServiceStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubServiceKeyWordInfo);
        }

        /// <summary>
        /// Returns true if SubServiceKeyWordInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubServiceKeyWordInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubServiceKeyWordInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.KeywordInfo == input.KeywordInfo ||
                    this.KeywordInfo != null &&
                    input.KeywordInfo != null &&
                    this.KeywordInfo.SequenceEqual(input.KeywordInfo)
                ) && 
                (
                    this.MiniAppId == input.MiniAppId ||
                    (this.MiniAppId != null &&
                    this.MiniAppId.Equals(input.MiniAppId))
                ) && 
                (
                    this.SubServiceCode == input.SubServiceCode ||
                    (this.SubServiceCode != null &&
                    this.SubServiceCode.Equals(input.SubServiceCode))
                ) && 
                (
                    this.SubServiceDesc == input.SubServiceDesc ||
                    (this.SubServiceDesc != null &&
                    this.SubServiceDesc.Equals(input.SubServiceDesc))
                ) && 
                (
                    this.SubServiceName == input.SubServiceName ||
                    (this.SubServiceName != null &&
                    this.SubServiceName.Equals(input.SubServiceName))
                ) && 
                (
                    this.SubServiceStatus == input.SubServiceStatus ||
                    (this.SubServiceStatus != null &&
                    this.SubServiceStatus.Equals(input.SubServiceStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                {
                    hashCode = (hashCode * 59) + this.AppName.GetHashCode();
                }
                if (this.KeywordInfo != null)
                {
                    hashCode = (hashCode * 59) + this.KeywordInfo.GetHashCode();
                }
                if (this.MiniAppId != null)
                {
                    hashCode = (hashCode * 59) + this.MiniAppId.GetHashCode();
                }
                if (this.SubServiceCode != null)
                {
                    hashCode = (hashCode * 59) + this.SubServiceCode.GetHashCode();
                }
                if (this.SubServiceDesc != null)
                {
                    hashCode = (hashCode * 59) + this.SubServiceDesc.GetHashCode();
                }
                if (this.SubServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.SubServiceName.GetHashCode();
                }
                if (this.SubServiceStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SubServiceStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
