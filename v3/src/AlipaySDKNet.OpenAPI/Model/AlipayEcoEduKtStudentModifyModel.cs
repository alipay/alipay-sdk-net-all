/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEcoEduKtStudentModifyModel
    /// </summary>
    [DataContract(Name = "AlipayEcoEduKtStudentModifyModel")]
    public partial class AlipayEcoEduKtStudentModifyModel : IEquatable<AlipayEcoEduKtStudentModifyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEcoEduKtStudentModifyModel" /> class.
        /// </summary>
        /// <param name="childName">修改后的学生姓名  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空.</param>
        /// <param name="isvPid">已经签约教育缴费的isv的支付宝PID.</param>
        /// <param name="schoolNo">学校编号，调用alipay.eco.edu.kt.schoolinfo.modify接口录入学校信息时，接口返回的编号.</param>
        /// <param name="schoolPid">学校用来签约支付宝教育缴费的支付宝PID.</param>
        /// <param name="status">区分ISV操作，“D”表示删除，“U”表示更新，区分大小写。  如果为U，则学生名字，学号，身份证至少填写一项.</param>
        /// <param name="studentCode">修改后的学号  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空.</param>
        /// <param name="studentIdentify">修改后的身份证号码  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空.</param>
        /// <param name="studentNo">支付宝-中小学-教育缴费生成的学生唯一编号.</param>
        /// <param name="users">孩子的家长信息，最多一次输入20个家长。如果输入的家长信息不存在，则该改学生增加家长信息  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空.</param>
        public AlipayEcoEduKtStudentModifyModel(string childName = default(string), string isvPid = default(string), string schoolNo = default(string), string schoolPid = default(string), string status = default(string), string studentCode = default(string), string studentIdentify = default(string), string studentNo = default(string), List<UserDetails> users = default(List<UserDetails>))
        {
            this.ChildName = childName;
            this.IsvPid = isvPid;
            this.SchoolNo = schoolNo;
            this.SchoolPid = schoolPid;
            this.Status = status;
            this.StudentCode = studentCode;
            this.StudentIdentify = studentIdentify;
            this.StudentNo = studentNo;
            this.Users = users;
        }

        /// <summary>
        /// 修改后的学生姓名  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空
        /// </summary>
        /// <value>修改后的学生姓名  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空</value>
        [DataMember(Name = "child_name", EmitDefaultValue = false)]
        public string ChildName { get; set; }

        /// <summary>
        /// 已经签约教育缴费的isv的支付宝PID
        /// </summary>
        /// <value>已经签约教育缴费的isv的支付宝PID</value>
        [DataMember(Name = "isv_pid", EmitDefaultValue = false)]
        public string IsvPid { get; set; }

        /// <summary>
        /// 学校编号，调用alipay.eco.edu.kt.schoolinfo.modify接口录入学校信息时，接口返回的编号
        /// </summary>
        /// <value>学校编号，调用alipay.eco.edu.kt.schoolinfo.modify接口录入学校信息时，接口返回的编号</value>
        [DataMember(Name = "school_no", EmitDefaultValue = false)]
        public string SchoolNo { get; set; }

        /// <summary>
        /// 学校用来签约支付宝教育缴费的支付宝PID
        /// </summary>
        /// <value>学校用来签约支付宝教育缴费的支付宝PID</value>
        [DataMember(Name = "school_pid", EmitDefaultValue = false)]
        public string SchoolPid { get; set; }

        /// <summary>
        /// 区分ISV操作，“D”表示删除，“U”表示更新，区分大小写。  如果为U，则学生名字，学号，身份证至少填写一项
        /// </summary>
        /// <value>区分ISV操作，“D”表示删除，“U”表示更新，区分大小写。  如果为U，则学生名字，学号，身份证至少填写一项</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 修改后的学号  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空
        /// </summary>
        /// <value>修改后的学号  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空</value>
        [DataMember(Name = "student_code", EmitDefaultValue = false)]
        public string StudentCode { get; set; }

        /// <summary>
        /// 修改后的身份证号码  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空
        /// </summary>
        /// <value>修改后的身份证号码  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空</value>
        [DataMember(Name = "student_identify", EmitDefaultValue = false)]
        public string StudentIdentify { get; set; }

        /// <summary>
        /// 支付宝-中小学-教育缴费生成的学生唯一编号
        /// </summary>
        /// <value>支付宝-中小学-教育缴费生成的学生唯一编号</value>
        [DataMember(Name = "student_no", EmitDefaultValue = false)]
        public string StudentNo { get; set; }

        /// <summary>
        /// 孩子的家长信息，最多一次输入20个家长。如果输入的家长信息不存在，则该改学生增加家长信息  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空
        /// </summary>
        /// <value>孩子的家长信息，最多一次输入20个家长。如果输入的家长信息不存在，则该改学生增加家长信息  本接口调用时，child_name、student_code、student_identify、users这几个参数至少需要填写其中一个，不能同时为空</value>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<UserDetails> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEcoEduKtStudentModifyModel {\n");
            sb.Append("  ChildName: ").Append(ChildName).Append("\n");
            sb.Append("  IsvPid: ").Append(IsvPid).Append("\n");
            sb.Append("  SchoolNo: ").Append(SchoolNo).Append("\n");
            sb.Append("  SchoolPid: ").Append(SchoolPid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StudentCode: ").Append(StudentCode).Append("\n");
            sb.Append("  StudentIdentify: ").Append(StudentIdentify).Append("\n");
            sb.Append("  StudentNo: ").Append(StudentNo).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEcoEduKtStudentModifyModel);
        }

        /// <summary>
        /// Returns true if AlipayEcoEduKtStudentModifyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEcoEduKtStudentModifyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEcoEduKtStudentModifyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChildName == input.ChildName ||
                    (this.ChildName != null &&
                    this.ChildName.Equals(input.ChildName))
                ) && 
                (
                    this.IsvPid == input.IsvPid ||
                    (this.IsvPid != null &&
                    this.IsvPid.Equals(input.IsvPid))
                ) && 
                (
                    this.SchoolNo == input.SchoolNo ||
                    (this.SchoolNo != null &&
                    this.SchoolNo.Equals(input.SchoolNo))
                ) && 
                (
                    this.SchoolPid == input.SchoolPid ||
                    (this.SchoolPid != null &&
                    this.SchoolPid.Equals(input.SchoolPid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StudentCode == input.StudentCode ||
                    (this.StudentCode != null &&
                    this.StudentCode.Equals(input.StudentCode))
                ) && 
                (
                    this.StudentIdentify == input.StudentIdentify ||
                    (this.StudentIdentify != null &&
                    this.StudentIdentify.Equals(input.StudentIdentify))
                ) && 
                (
                    this.StudentNo == input.StudentNo ||
                    (this.StudentNo != null &&
                    this.StudentNo.Equals(input.StudentNo))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChildName != null)
                {
                    hashCode = (hashCode * 59) + this.ChildName.GetHashCode();
                }
                if (this.IsvPid != null)
                {
                    hashCode = (hashCode * 59) + this.IsvPid.GetHashCode();
                }
                if (this.SchoolNo != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolNo.GetHashCode();
                }
                if (this.SchoolPid != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolPid.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StudentCode != null)
                {
                    hashCode = (hashCode * 59) + this.StudentCode.GetHashCode();
                }
                if (this.StudentIdentify != null)
                {
                    hashCode = (hashCode * 59) + this.StudentIdentify.GetHashCode();
                }
                if (this.StudentNo != null)
                {
                    hashCode = (hashCode * 59) + this.StudentNo.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
