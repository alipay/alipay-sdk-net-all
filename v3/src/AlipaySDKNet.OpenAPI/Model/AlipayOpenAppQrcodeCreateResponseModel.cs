/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAppQrcodeCreateResponseModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAppQrcodeCreateResponseModel")]
    public partial class AlipayOpenAppQrcodeCreateResponseModel : IEquatable<AlipayOpenAppQrcodeCreateResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAppQrcodeCreateResponseModel" /> class.
        /// </summary>
        /// <param name="qrCodeUrl">方形二维码图片链接地址.</param>
        /// <param name="qrCodeUrlCircleBlue">圆形二维码地址，蓝色slogan.</param>
        /// <param name="qrCodeUrlCircleWhite">圆形二维码地址，白色slogan.</param>
        public AlipayOpenAppQrcodeCreateResponseModel(string qrCodeUrl = default(string), string qrCodeUrlCircleBlue = default(string), string qrCodeUrlCircleWhite = default(string))
        {
            this.QrCodeUrl = qrCodeUrl;
            this.QrCodeUrlCircleBlue = qrCodeUrlCircleBlue;
            this.QrCodeUrlCircleWhite = qrCodeUrlCircleWhite;
        }

        /// <summary>
        /// 方形二维码图片链接地址
        /// </summary>
        /// <value>方形二维码图片链接地址</value>
        [DataMember(Name = "qr_code_url", EmitDefaultValue = false)]
        public string QrCodeUrl { get; set; }

        /// <summary>
        /// 圆形二维码地址，蓝色slogan
        /// </summary>
        /// <value>圆形二维码地址，蓝色slogan</value>
        [DataMember(Name = "qr_code_url_circle_blue", EmitDefaultValue = false)]
        public string QrCodeUrlCircleBlue { get; set; }

        /// <summary>
        /// 圆形二维码地址，白色slogan
        /// </summary>
        /// <value>圆形二维码地址，白色slogan</value>
        [DataMember(Name = "qr_code_url_circle_white", EmitDefaultValue = false)]
        public string QrCodeUrlCircleWhite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAppQrcodeCreateResponseModel {\n");
            sb.Append("  QrCodeUrl: ").Append(QrCodeUrl).Append("\n");
            sb.Append("  QrCodeUrlCircleBlue: ").Append(QrCodeUrlCircleBlue).Append("\n");
            sb.Append("  QrCodeUrlCircleWhite: ").Append(QrCodeUrlCircleWhite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAppQrcodeCreateResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAppQrcodeCreateResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAppQrcodeCreateResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAppQrcodeCreateResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QrCodeUrl == input.QrCodeUrl ||
                    (this.QrCodeUrl != null &&
                    this.QrCodeUrl.Equals(input.QrCodeUrl))
                ) && 
                (
                    this.QrCodeUrlCircleBlue == input.QrCodeUrlCircleBlue ||
                    (this.QrCodeUrlCircleBlue != null &&
                    this.QrCodeUrlCircleBlue.Equals(input.QrCodeUrlCircleBlue))
                ) && 
                (
                    this.QrCodeUrlCircleWhite == input.QrCodeUrlCircleWhite ||
                    (this.QrCodeUrlCircleWhite != null &&
                    this.QrCodeUrlCircleWhite.Equals(input.QrCodeUrlCircleWhite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QrCodeUrl != null)
                {
                    hashCode = (hashCode * 59) + this.QrCodeUrl.GetHashCode();
                }
                if (this.QrCodeUrlCircleBlue != null)
                {
                    hashCode = (hashCode * 59) + this.QrCodeUrlCircleBlue.GetHashCode();
                }
                if (this.QrCodeUrlCircleWhite != null)
                {
                    hashCode = (hashCode * 59) + this.QrCodeUrlCircleWhite.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
