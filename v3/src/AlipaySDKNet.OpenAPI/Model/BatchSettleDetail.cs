/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// BatchSettleDetail
    /// </summary>
    [DataContract(Name = "BatchSettleDetail")]
    public partial class BatchSettleDetail : IEquatable<BatchSettleDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchSettleDetail" /> class.
        /// </summary>
        /// <param name="amount">结算金额，单位为元.</param>
        /// <param name="currency">结算币种.</param>
        /// <param name="errorCode">错误编码，SETTLE_ACCOUNT_ERROR：结算账户信息有误；BANK_DISHONOR：银行提现退票；UNKNOWN_ERROR：未知错误.</param>
        /// <param name="errorDesc">错误描述.</param>
        /// <param name="settleAccountId">结算账户id。当结算账户id类型是cardSerialNo时，本参数为用户在支付宝绑定的卡编号；当结算账户id类型是userId时，本参数为用户的支付宝账号对应的支付宝唯一用户号；当结算账户id类型是loginName时，本参数为用户的支付宝登录号.</param>
        /// <param name="settleAccountIdType">结算账户id类型。  当settle_account_type 为bankCard时，本参数为cardSerialNo，表示结算账户id是银行卡编号;  当settle_account_type 为alipayBalance时，本参数为userId或者loginName，其中userId表示结算账户id是支付宝唯一用户号，loginName表示结算账户id是支付宝登录号.</param>
        /// <param name="settleAccountOpenId">结算账户的OpenId，本参数是用户在该应用（AppId）下的唯一用户标识。.</param>
        /// <param name="settleAccountType">结算账户类型。 bankCard: 结算账户为银行卡； alipayBalance: 结算账户为支付宝余额户.</param>
        /// <param name="settleEntityId">结算主体账号。 当结算主体类型为SecondMerchant，本参数为二级商户的SecondMerchantID.</param>
        /// <param name="settleEntityType">结算主体类型。 SecondMerchant：结算主体为二级商户; Store：结算主体为门店；.</param>
        /// <param name="status">ACCEPT_SUCCESS：受理成功； SUCCESS：结算成功； FAIL：结算失败；FAIL_RETRY：失败重试。.</param>
        /// <param name="subMerchant">subMerchant.</param>
        public BatchSettleDetail(string amount = default(string), string currency = default(string), string errorCode = default(string), string errorDesc = default(string), string settleAccountId = default(string), string settleAccountIdType = default(string), string settleAccountOpenId = default(string), string settleAccountType = default(string), string settleEntityId = default(string), string settleEntityType = default(string), string status = default(string), SubMerchant subMerchant = default(SubMerchant))
        {
            this.Amount = amount;
            this.Currency = currency;
            this.ErrorCode = errorCode;
            this.ErrorDesc = errorDesc;
            this.SettleAccountId = settleAccountId;
            this.SettleAccountIdType = settleAccountIdType;
            this.SettleAccountOpenId = settleAccountOpenId;
            this.SettleAccountType = settleAccountType;
            this.SettleEntityId = settleEntityId;
            this.SettleEntityType = settleEntityType;
            this.Status = status;
            this.SubMerchant = subMerchant;
        }

        /// <summary>
        /// 结算金额，单位为元
        /// </summary>
        /// <value>结算金额，单位为元</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// 结算币种
        /// </summary>
        /// <value>结算币种</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// 错误编码，SETTLE_ACCOUNT_ERROR：结算账户信息有误；BANK_DISHONOR：银行提现退票；UNKNOWN_ERROR：未知错误
        /// </summary>
        /// <value>错误编码，SETTLE_ACCOUNT_ERROR：结算账户信息有误；BANK_DISHONOR：银行提现退票；UNKNOWN_ERROR：未知错误</value>
        [DataMember(Name = "error_code", EmitDefaultValue = false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// 错误描述
        /// </summary>
        /// <value>错误描述</value>
        [DataMember(Name = "error_desc", EmitDefaultValue = false)]
        public string ErrorDesc { get; set; }

        /// <summary>
        /// 结算账户id。当结算账户id类型是cardSerialNo时，本参数为用户在支付宝绑定的卡编号；当结算账户id类型是userId时，本参数为用户的支付宝账号对应的支付宝唯一用户号；当结算账户id类型是loginName时，本参数为用户的支付宝登录号
        /// </summary>
        /// <value>结算账户id。当结算账户id类型是cardSerialNo时，本参数为用户在支付宝绑定的卡编号；当结算账户id类型是userId时，本参数为用户的支付宝账号对应的支付宝唯一用户号；当结算账户id类型是loginName时，本参数为用户的支付宝登录号</value>
        [DataMember(Name = "settle_account_id", EmitDefaultValue = false)]
        public string SettleAccountId { get; set; }

        /// <summary>
        /// 结算账户id类型。  当settle_account_type 为bankCard时，本参数为cardSerialNo，表示结算账户id是银行卡编号;  当settle_account_type 为alipayBalance时，本参数为userId或者loginName，其中userId表示结算账户id是支付宝唯一用户号，loginName表示结算账户id是支付宝登录号
        /// </summary>
        /// <value>结算账户id类型。  当settle_account_type 为bankCard时，本参数为cardSerialNo，表示结算账户id是银行卡编号;  当settle_account_type 为alipayBalance时，本参数为userId或者loginName，其中userId表示结算账户id是支付宝唯一用户号，loginName表示结算账户id是支付宝登录号</value>
        [DataMember(Name = "settle_account_id_type", EmitDefaultValue = false)]
        public string SettleAccountIdType { get; set; }

        /// <summary>
        /// 结算账户的OpenId，本参数是用户在该应用（AppId）下的唯一用户标识。
        /// </summary>
        /// <value>结算账户的OpenId，本参数是用户在该应用（AppId）下的唯一用户标识。</value>
        [DataMember(Name = "settle_account_open_id", EmitDefaultValue = false)]
        public string SettleAccountOpenId { get; set; }

        /// <summary>
        /// 结算账户类型。 bankCard: 结算账户为银行卡； alipayBalance: 结算账户为支付宝余额户
        /// </summary>
        /// <value>结算账户类型。 bankCard: 结算账户为银行卡； alipayBalance: 结算账户为支付宝余额户</value>
        [DataMember(Name = "settle_account_type", EmitDefaultValue = false)]
        public string SettleAccountType { get; set; }

        /// <summary>
        /// 结算主体账号。 当结算主体类型为SecondMerchant，本参数为二级商户的SecondMerchantID
        /// </summary>
        /// <value>结算主体账号。 当结算主体类型为SecondMerchant，本参数为二级商户的SecondMerchantID</value>
        [DataMember(Name = "settle_entity_id", EmitDefaultValue = false)]
        public string SettleEntityId { get; set; }

        /// <summary>
        /// 结算主体类型。 SecondMerchant：结算主体为二级商户; Store：结算主体为门店；
        /// </summary>
        /// <value>结算主体类型。 SecondMerchant：结算主体为二级商户; Store：结算主体为门店；</value>
        [DataMember(Name = "settle_entity_type", EmitDefaultValue = false)]
        public string SettleEntityType { get; set; }

        /// <summary>
        /// ACCEPT_SUCCESS：受理成功； SUCCESS：结算成功； FAIL：结算失败；FAIL_RETRY：失败重试。
        /// </summary>
        /// <value>ACCEPT_SUCCESS：受理成功； SUCCESS：结算成功； FAIL：结算失败；FAIL_RETRY：失败重试。</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SubMerchant
        /// </summary>
        [DataMember(Name = "sub_merchant", EmitDefaultValue = false)]
        public SubMerchant SubMerchant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchSettleDetail {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorDesc: ").Append(ErrorDesc).Append("\n");
            sb.Append("  SettleAccountId: ").Append(SettleAccountId).Append("\n");
            sb.Append("  SettleAccountIdType: ").Append(SettleAccountIdType).Append("\n");
            sb.Append("  SettleAccountOpenId: ").Append(SettleAccountOpenId).Append("\n");
            sb.Append("  SettleAccountType: ").Append(SettleAccountType).Append("\n");
            sb.Append("  SettleEntityId: ").Append(SettleEntityId).Append("\n");
            sb.Append("  SettleEntityType: ").Append(SettleEntityType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubMerchant: ").Append(SubMerchant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchSettleDetail);
        }

        /// <summary>
        /// Returns true if BatchSettleDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchSettleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchSettleDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorDesc == input.ErrorDesc ||
                    (this.ErrorDesc != null &&
                    this.ErrorDesc.Equals(input.ErrorDesc))
                ) && 
                (
                    this.SettleAccountId == input.SettleAccountId ||
                    (this.SettleAccountId != null &&
                    this.SettleAccountId.Equals(input.SettleAccountId))
                ) && 
                (
                    this.SettleAccountIdType == input.SettleAccountIdType ||
                    (this.SettleAccountIdType != null &&
                    this.SettleAccountIdType.Equals(input.SettleAccountIdType))
                ) && 
                (
                    this.SettleAccountOpenId == input.SettleAccountOpenId ||
                    (this.SettleAccountOpenId != null &&
                    this.SettleAccountOpenId.Equals(input.SettleAccountOpenId))
                ) && 
                (
                    this.SettleAccountType == input.SettleAccountType ||
                    (this.SettleAccountType != null &&
                    this.SettleAccountType.Equals(input.SettleAccountType))
                ) && 
                (
                    this.SettleEntityId == input.SettleEntityId ||
                    (this.SettleEntityId != null &&
                    this.SettleEntityId.Equals(input.SettleEntityId))
                ) && 
                (
                    this.SettleEntityType == input.SettleEntityType ||
                    (this.SettleEntityType != null &&
                    this.SettleEntityType.Equals(input.SettleEntityType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubMerchant == input.SubMerchant ||
                    (this.SubMerchant != null &&
                    this.SubMerchant.Equals(input.SubMerchant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.ErrorDesc != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDesc.GetHashCode();
                }
                if (this.SettleAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAccountId.GetHashCode();
                }
                if (this.SettleAccountIdType != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAccountIdType.GetHashCode();
                }
                if (this.SettleAccountOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAccountOpenId.GetHashCode();
                }
                if (this.SettleAccountType != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAccountType.GetHashCode();
                }
                if (this.SettleEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.SettleEntityId.GetHashCode();
                }
                if (this.SettleEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.SettleEntityType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SubMerchant != null)
                {
                    hashCode = (hashCode * 59) + this.SubMerchant.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
