/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradePayResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradePayResponseModel")]
    public partial class AlipayTradePayResponseModel : IEquatable<AlipayTradePayResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradePayResponseModel" /> class.
        /// </summary>
        /// <param name="advanceAmount">先享后付2.0垫资金额,不返回表示没有走垫资，非空表示垫资支付的金额.</param>
        /// <param name="asyncPayApplyStatus">异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可通过查询接口获取交易状态。.</param>
        /// <param name="asyncPaymentMode">异步支付模式，目前有五种值： ASYNC_DELAY_PAY(异步延时付款); ASYNC_REALTIME_PAY(异步准实时付款); SYNC_DIRECT_PAY(同步直接扣款); NORMAL_ASYNC_PAY(纯异步付款); QUOTA_OCCUPYIED_ASYNC_PAY(异步支付并且预占了先享后付额度);.</param>
        /// <param name="authTradePayMode">预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY.</param>
        /// <param name="bkagentRespInfo">bkagentRespInfo.</param>
        /// <param name="businessParams">商户传入业务信息，具体值要和支付宝约定  将商户传入信息分发给相应系统，应用于安全，营销等参数直传场景  格式为json格式.</param>
        /// <param name="buyerLogonId">买家支付宝账号.</param>
        /// <param name="buyerOpenId">买家支付宝用户唯一标识.</param>
        /// <param name="buyerPayAmount">买家付款的金额.</param>
        /// <param name="buyerUserId">买家在支付宝的用户id.</param>
        /// <param name="buyerUserName">买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；.</param>
        /// <param name="buyerUserType">买家用户类型。.</param>
        /// <param name="canTurnToAppPay">是否可以转为app支付，仅当商户代扣失败场景才会返回该字段信息.</param>
        /// <param name="cardBalance">支付宝卡余额.</param>
        /// <param name="chargeAmount">该笔交易针对收款方的收费金额； 只在机构间联模式下返回，其它场景下不返回该字段；.</param>
        /// <param name="chargeFlags">费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段；.</param>
        /// <param name="chargeInfoList">chargeInfoList.</param>
        /// <param name="creditBizOrderId">信用业务单号。信用支付场景才有值。先用后付产品里是芝麻订单号。.</param>
        /// <param name="creditPayMode">信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。.</param>
        /// <param name="discountAmount">平台优惠金额.</param>
        /// <param name="discountGoodsDetail">本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。.</param>
        /// <param name="enterprisePayInfo">enterprisePayInfo.</param>
        /// <param name="fundBillList">交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。.</param>
        /// <param name="gmtPayment">交易支付时间.</param>
        /// <param name="hybAmount">惠营宝回票金额.</param>
        /// <param name="invoiceAmount">交易中可给用户开具发票的金额.</param>
        /// <param name="mdiscountAmount">商家优惠金额.</param>
        /// <param name="openId">买家支付宝用户号,该参数已废弃，请不要使用.</param>
        /// <param name="outTradeNo">商户订单号.</param>
        /// <param name="payAmount">支付币种订单金额.</param>
        /// <param name="payCurrency">支付币种.</param>
        /// <param name="pointAmount">使用集分宝付款的金额.</param>
        /// <param name="preAuthPayAmount">当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。.</param>
        /// <param name="receiptAmount">实收金额.</param>
        /// <param name="receiptCurrencyType">收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。.</param>
        /// <param name="settleAmount">结算币种订单金额.</param>
        /// <param name="settleCurrency">商户指定的结算币种，目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY.</param>
        /// <param name="settleTransRate">结算币种兑换标价币种汇率.</param>
        /// <param name="settlementId">支付清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；.</param>
        /// <param name="storeName">发生支付交易的商户门店名称.</param>
        /// <param name="tapPayInfo">tapPayInfo.</param>
        /// <param name="totalAmount">交易金额.</param>
        /// <param name="tradeNo">支付宝交易号.</param>
        /// <param name="transCurrency">标价币种, total_amount对应的币种单位。目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY.</param>
        /// <param name="transPayRate">标价币种兑换支付币种汇率.</param>
        /// <param name="voucherDetailList">本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。.</param>
        public AlipayTradePayResponseModel(string advanceAmount = default(string), string asyncPayApplyStatus = default(string), string asyncPaymentMode = default(string), string authTradePayMode = default(string), BkAgentRespInfo bkagentRespInfo = default(BkAgentRespInfo), string businessParams = default(string), string buyerLogonId = default(string), string buyerOpenId = default(string), string buyerPayAmount = default(string), string buyerUserId = default(string), string buyerUserName = default(string), string buyerUserType = default(string), string canTurnToAppPay = default(string), string cardBalance = default(string), string chargeAmount = default(string), string chargeFlags = default(string), ChargeInfo chargeInfoList = default(ChargeInfo), string creditBizOrderId = default(string), string creditPayMode = default(string), string discountAmount = default(string), string discountGoodsDetail = default(string), EnterprisePayInfo enterprisePayInfo = default(EnterprisePayInfo), List<TradeFundBill> fundBillList = default(List<TradeFundBill>), string gmtPayment = default(string), string hybAmount = default(string), string invoiceAmount = default(string), string mdiscountAmount = default(string), string openId = default(string), string outTradeNo = default(string), string payAmount = default(string), string payCurrency = default(string), string pointAmount = default(string), string preAuthPayAmount = default(string), string receiptAmount = default(string), string receiptCurrencyType = default(string), string settleAmount = default(string), string settleCurrency = default(string), string settleTransRate = default(string), string settlementId = default(string), string storeName = default(string), TapPayInfo tapPayInfo = default(TapPayInfo), string totalAmount = default(string), string tradeNo = default(string), string transCurrency = default(string), string transPayRate = default(string), List<VoucherDetail> voucherDetailList = default(List<VoucherDetail>))
        {
            this.AdvanceAmount = advanceAmount;
            this.AsyncPayApplyStatus = asyncPayApplyStatus;
            this.AsyncPaymentMode = asyncPaymentMode;
            this.AuthTradePayMode = authTradePayMode;
            this.BkagentRespInfo = bkagentRespInfo;
            this.BusinessParams = businessParams;
            this.BuyerLogonId = buyerLogonId;
            this.BuyerOpenId = buyerOpenId;
            this.BuyerPayAmount = buyerPayAmount;
            this.BuyerUserId = buyerUserId;
            this.BuyerUserName = buyerUserName;
            this.BuyerUserType = buyerUserType;
            this.CanTurnToAppPay = canTurnToAppPay;
            this.CardBalance = cardBalance;
            this.ChargeAmount = chargeAmount;
            this.ChargeFlags = chargeFlags;
            this.ChargeInfoList = chargeInfoList;
            this.CreditBizOrderId = creditBizOrderId;
            this.CreditPayMode = creditPayMode;
            this.DiscountAmount = discountAmount;
            this.DiscountGoodsDetail = discountGoodsDetail;
            this.EnterprisePayInfo = enterprisePayInfo;
            this.FundBillList = fundBillList;
            this.GmtPayment = gmtPayment;
            this.HybAmount = hybAmount;
            this.InvoiceAmount = invoiceAmount;
            this.MdiscountAmount = mdiscountAmount;
            this.OpenId = openId;
            this.OutTradeNo = outTradeNo;
            this.PayAmount = payAmount;
            this.PayCurrency = payCurrency;
            this.PointAmount = pointAmount;
            this.PreAuthPayAmount = preAuthPayAmount;
            this.ReceiptAmount = receiptAmount;
            this.ReceiptCurrencyType = receiptCurrencyType;
            this.SettleAmount = settleAmount;
            this.SettleCurrency = settleCurrency;
            this.SettleTransRate = settleTransRate;
            this.SettlementId = settlementId;
            this.StoreName = storeName;
            this.TapPayInfo = tapPayInfo;
            this.TotalAmount = totalAmount;
            this.TradeNo = tradeNo;
            this.TransCurrency = transCurrency;
            this.TransPayRate = transPayRate;
            this.VoucherDetailList = voucherDetailList;
        }

        /// <summary>
        /// 先享后付2.0垫资金额,不返回表示没有走垫资，非空表示垫资支付的金额
        /// </summary>
        /// <value>先享后付2.0垫资金额,不返回表示没有走垫资，非空表示垫资支付的金额</value>
        [DataMember(Name = "advance_amount", EmitDefaultValue = false)]
        public string AdvanceAmount { get; set; }

        /// <summary>
        /// 异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可通过查询接口获取交易状态。
        /// </summary>
        /// <value>异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可通过查询接口获取交易状态。</value>
        [DataMember(Name = "async_pay_apply_status", EmitDefaultValue = false)]
        public string AsyncPayApplyStatus { get; set; }

        /// <summary>
        /// 异步支付模式，目前有五种值： ASYNC_DELAY_PAY(异步延时付款); ASYNC_REALTIME_PAY(异步准实时付款); SYNC_DIRECT_PAY(同步直接扣款); NORMAL_ASYNC_PAY(纯异步付款); QUOTA_OCCUPYIED_ASYNC_PAY(异步支付并且预占了先享后付额度);
        /// </summary>
        /// <value>异步支付模式，目前有五种值： ASYNC_DELAY_PAY(异步延时付款); ASYNC_REALTIME_PAY(异步准实时付款); SYNC_DIRECT_PAY(同步直接扣款); NORMAL_ASYNC_PAY(纯异步付款); QUOTA_OCCUPYIED_ASYNC_PAY(异步支付并且预占了先享后付额度);</value>
        [DataMember(Name = "async_payment_mode", EmitDefaultValue = false)]
        public string AsyncPaymentMode { get; set; }

        /// <summary>
        /// 预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY
        /// </summary>
        /// <value>预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY</value>
        [DataMember(Name = "auth_trade_pay_mode", EmitDefaultValue = false)]
        public string AuthTradePayMode { get; set; }

        /// <summary>
        /// Gets or Sets BkagentRespInfo
        /// </summary>
        [DataMember(Name = "bkagent_resp_info", EmitDefaultValue = false)]
        public BkAgentRespInfo BkagentRespInfo { get; set; }

        /// <summary>
        /// 商户传入业务信息，具体值要和支付宝约定  将商户传入信息分发给相应系统，应用于安全，营销等参数直传场景  格式为json格式
        /// </summary>
        /// <value>商户传入业务信息，具体值要和支付宝约定  将商户传入信息分发给相应系统，应用于安全，营销等参数直传场景  格式为json格式</value>
        [DataMember(Name = "business_params", EmitDefaultValue = false)]
        public string BusinessParams { get; set; }

        /// <summary>
        /// 买家支付宝账号
        /// </summary>
        /// <value>买家支付宝账号</value>
        [DataMember(Name = "buyer_logon_id", EmitDefaultValue = false)]
        public string BuyerLogonId { get; set; }

        /// <summary>
        /// 买家支付宝用户唯一标识
        /// </summary>
        /// <value>买家支付宝用户唯一标识</value>
        [DataMember(Name = "buyer_open_id", EmitDefaultValue = false)]
        public string BuyerOpenId { get; set; }

        /// <summary>
        /// 买家付款的金额
        /// </summary>
        /// <value>买家付款的金额</value>
        [DataMember(Name = "buyer_pay_amount", EmitDefaultValue = false)]
        public string BuyerPayAmount { get; set; }

        /// <summary>
        /// 买家在支付宝的用户id
        /// </summary>
        /// <value>买家在支付宝的用户id</value>
        [DataMember(Name = "buyer_user_id", EmitDefaultValue = false)]
        public string BuyerUserId { get; set; }

        /// <summary>
        /// 买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；
        /// </summary>
        /// <value>买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；</value>
        [DataMember(Name = "buyer_user_name", EmitDefaultValue = false)]
        public string BuyerUserName { get; set; }

        /// <summary>
        /// 买家用户类型。
        /// </summary>
        /// <value>买家用户类型。</value>
        [DataMember(Name = "buyer_user_type", EmitDefaultValue = false)]
        public string BuyerUserType { get; set; }

        /// <summary>
        /// 是否可以转为app支付，仅当商户代扣失败场景才会返回该字段信息
        /// </summary>
        /// <value>是否可以转为app支付，仅当商户代扣失败场景才会返回该字段信息</value>
        [DataMember(Name = "can_turn_to_app_pay", EmitDefaultValue = false)]
        public string CanTurnToAppPay { get; set; }

        /// <summary>
        /// 支付宝卡余额
        /// </summary>
        /// <value>支付宝卡余额</value>
        [DataMember(Name = "card_balance", EmitDefaultValue = false)]
        public string CardBalance { get; set; }

        /// <summary>
        /// 该笔交易针对收款方的收费金额； 只在机构间联模式下返回，其它场景下不返回该字段；
        /// </summary>
        /// <value>该笔交易针对收款方的收费金额； 只在机构间联模式下返回，其它场景下不返回该字段；</value>
        [DataMember(Name = "charge_amount", EmitDefaultValue = false)]
        public string ChargeAmount { get; set; }

        /// <summary>
        /// 费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段；
        /// </summary>
        /// <value>费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段；</value>
        [DataMember(Name = "charge_flags", EmitDefaultValue = false)]
        public string ChargeFlags { get; set; }

        /// <summary>
        /// Gets or Sets ChargeInfoList
        /// </summary>
        [DataMember(Name = "charge_info_list", EmitDefaultValue = false)]
        public ChargeInfo ChargeInfoList { get; set; }

        /// <summary>
        /// 信用业务单号。信用支付场景才有值。先用后付产品里是芝麻订单号。
        /// </summary>
        /// <value>信用业务单号。信用支付场景才有值。先用后付产品里是芝麻订单号。</value>
        [DataMember(Name = "credit_biz_order_id", EmitDefaultValue = false)]
        public string CreditBizOrderId { get; set; }

        /// <summary>
        /// 信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。
        /// </summary>
        /// <value>信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。</value>
        [DataMember(Name = "credit_pay_mode", EmitDefaultValue = false)]
        public string CreditPayMode { get; set; }

        /// <summary>
        /// 平台优惠金额
        /// </summary>
        /// <value>平台优惠金额</value>
        [DataMember(Name = "discount_amount", EmitDefaultValue = false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// 本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "discount_goods_detail", EmitDefaultValue = false)]
        public string DiscountGoodsDetail { get; set; }

        /// <summary>
        /// Gets or Sets EnterprisePayInfo
        /// </summary>
        [DataMember(Name = "enterprise_pay_info", EmitDefaultValue = false)]
        public EnterprisePayInfo EnterprisePayInfo { get; set; }

        /// <summary>
        /// 交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "fund_bill_list", EmitDefaultValue = false)]
        public List<TradeFundBill> FundBillList { get; set; }

        /// <summary>
        /// 交易支付时间
        /// </summary>
        /// <value>交易支付时间</value>
        [DataMember(Name = "gmt_payment", EmitDefaultValue = false)]
        public string GmtPayment { get; set; }

        /// <summary>
        /// 惠营宝回票金额
        /// </summary>
        /// <value>惠营宝回票金额</value>
        [DataMember(Name = "hyb_amount", EmitDefaultValue = false)]
        public string HybAmount { get; set; }

        /// <summary>
        /// 交易中可给用户开具发票的金额
        /// </summary>
        /// <value>交易中可给用户开具发票的金额</value>
        [DataMember(Name = "invoice_amount", EmitDefaultValue = false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// 商家优惠金额
        /// </summary>
        /// <value>商家优惠金额</value>
        [DataMember(Name = "mdiscount_amount", EmitDefaultValue = false)]
        public string MdiscountAmount { get; set; }

        /// <summary>
        /// 买家支付宝用户号,该参数已废弃，请不要使用
        /// </summary>
        /// <value>买家支付宝用户号,该参数已废弃，请不要使用</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 商户订单号
        /// </summary>
        /// <value>商户订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 支付币种订单金额
        /// </summary>
        /// <value>支付币种订单金额</value>
        [DataMember(Name = "pay_amount", EmitDefaultValue = false)]
        public string PayAmount { get; set; }

        /// <summary>
        /// 支付币种
        /// </summary>
        /// <value>支付币种</value>
        [DataMember(Name = "pay_currency", EmitDefaultValue = false)]
        public string PayCurrency { get; set; }

        /// <summary>
        /// 使用集分宝付款的金额
        /// </summary>
        /// <value>使用集分宝付款的金额</value>
        [DataMember(Name = "point_amount", EmitDefaultValue = false)]
        public string PointAmount { get; set; }

        /// <summary>
        /// 当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。
        /// </summary>
        /// <value>当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。</value>
        [DataMember(Name = "pre_auth_pay_amount", EmitDefaultValue = false)]
        public string PreAuthPayAmount { get; set; }

        /// <summary>
        /// 实收金额
        /// </summary>
        /// <value>实收金额</value>
        [DataMember(Name = "receipt_amount", EmitDefaultValue = false)]
        public string ReceiptAmount { get; set; }

        /// <summary>
        /// 收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。
        /// </summary>
        /// <value>收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。</value>
        [DataMember(Name = "receipt_currency_type", EmitDefaultValue = false)]
        public string ReceiptCurrencyType { get; set; }

        /// <summary>
        /// 结算币种订单金额
        /// </summary>
        /// <value>结算币种订单金额</value>
        [DataMember(Name = "settle_amount", EmitDefaultValue = false)]
        public string SettleAmount { get; set; }

        /// <summary>
        /// 商户指定的结算币种，目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY
        /// </summary>
        /// <value>商户指定的结算币种，目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY</value>
        [DataMember(Name = "settle_currency", EmitDefaultValue = false)]
        public string SettleCurrency { get; set; }

        /// <summary>
        /// 结算币种兑换标价币种汇率
        /// </summary>
        /// <value>结算币种兑换标价币种汇率</value>
        [DataMember(Name = "settle_trans_rate", EmitDefaultValue = false)]
        public string SettleTransRate { get; set; }

        /// <summary>
        /// 支付清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；
        /// </summary>
        /// <value>支付清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；</value>
        [DataMember(Name = "settlement_id", EmitDefaultValue = false)]
        public string SettlementId { get; set; }

        /// <summary>
        /// 发生支付交易的商户门店名称
        /// </summary>
        /// <value>发生支付交易的商户门店名称</value>
        [DataMember(Name = "store_name", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Gets or Sets TapPayInfo
        /// </summary>
        [DataMember(Name = "tap_pay_info", EmitDefaultValue = false)]
        public TapPayInfo TapPayInfo { get; set; }

        /// <summary>
        /// 交易金额
        /// </summary>
        /// <value>交易金额</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 支付宝交易号
        /// </summary>
        /// <value>支付宝交易号</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// 标价币种, total_amount对应的币种单位。目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY
        /// </summary>
        /// <value>标价币种, total_amount对应的币种单位。目前支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY</value>
        [DataMember(Name = "trans_currency", EmitDefaultValue = false)]
        public string TransCurrency { get; set; }

        /// <summary>
        /// 标价币种兑换支付币种汇率
        /// </summary>
        /// <value>标价币种兑换支付币种汇率</value>
        [DataMember(Name = "trans_pay_rate", EmitDefaultValue = false)]
        public string TransPayRate { get; set; }

        /// <summary>
        /// 本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "voucher_detail_list", EmitDefaultValue = false)]
        public List<VoucherDetail> VoucherDetailList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradePayResponseModel {\n");
            sb.Append("  AdvanceAmount: ").Append(AdvanceAmount).Append("\n");
            sb.Append("  AsyncPayApplyStatus: ").Append(AsyncPayApplyStatus).Append("\n");
            sb.Append("  AsyncPaymentMode: ").Append(AsyncPaymentMode).Append("\n");
            sb.Append("  AuthTradePayMode: ").Append(AuthTradePayMode).Append("\n");
            sb.Append("  BkagentRespInfo: ").Append(BkagentRespInfo).Append("\n");
            sb.Append("  BusinessParams: ").Append(BusinessParams).Append("\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  BuyerPayAmount: ").Append(BuyerPayAmount).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  BuyerUserName: ").Append(BuyerUserName).Append("\n");
            sb.Append("  BuyerUserType: ").Append(BuyerUserType).Append("\n");
            sb.Append("  CanTurnToAppPay: ").Append(CanTurnToAppPay).Append("\n");
            sb.Append("  CardBalance: ").Append(CardBalance).Append("\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  ChargeFlags: ").Append(ChargeFlags).Append("\n");
            sb.Append("  ChargeInfoList: ").Append(ChargeInfoList).Append("\n");
            sb.Append("  CreditBizOrderId: ").Append(CreditBizOrderId).Append("\n");
            sb.Append("  CreditPayMode: ").Append(CreditPayMode).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountGoodsDetail: ").Append(DiscountGoodsDetail).Append("\n");
            sb.Append("  EnterprisePayInfo: ").Append(EnterprisePayInfo).Append("\n");
            sb.Append("  FundBillList: ").Append(FundBillList).Append("\n");
            sb.Append("  GmtPayment: ").Append(GmtPayment).Append("\n");
            sb.Append("  HybAmount: ").Append(HybAmount).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  MdiscountAmount: ").Append(MdiscountAmount).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PayAmount: ").Append(PayAmount).Append("\n");
            sb.Append("  PayCurrency: ").Append(PayCurrency).Append("\n");
            sb.Append("  PointAmount: ").Append(PointAmount).Append("\n");
            sb.Append("  PreAuthPayAmount: ").Append(PreAuthPayAmount).Append("\n");
            sb.Append("  ReceiptAmount: ").Append(ReceiptAmount).Append("\n");
            sb.Append("  ReceiptCurrencyType: ").Append(ReceiptCurrencyType).Append("\n");
            sb.Append("  SettleAmount: ").Append(SettleAmount).Append("\n");
            sb.Append("  SettleCurrency: ").Append(SettleCurrency).Append("\n");
            sb.Append("  SettleTransRate: ").Append(SettleTransRate).Append("\n");
            sb.Append("  SettlementId: ").Append(SettlementId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  TapPayInfo: ").Append(TapPayInfo).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  TransCurrency: ").Append(TransCurrency).Append("\n");
            sb.Append("  TransPayRate: ").Append(TransPayRate).Append("\n");
            sb.Append("  VoucherDetailList: ").Append(VoucherDetailList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradePayResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradePayResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradePayResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradePayResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdvanceAmount == input.AdvanceAmount ||
                    (this.AdvanceAmount != null &&
                    this.AdvanceAmount.Equals(input.AdvanceAmount))
                ) && 
                (
                    this.AsyncPayApplyStatus == input.AsyncPayApplyStatus ||
                    (this.AsyncPayApplyStatus != null &&
                    this.AsyncPayApplyStatus.Equals(input.AsyncPayApplyStatus))
                ) && 
                (
                    this.AsyncPaymentMode == input.AsyncPaymentMode ||
                    (this.AsyncPaymentMode != null &&
                    this.AsyncPaymentMode.Equals(input.AsyncPaymentMode))
                ) && 
                (
                    this.AuthTradePayMode == input.AuthTradePayMode ||
                    (this.AuthTradePayMode != null &&
                    this.AuthTradePayMode.Equals(input.AuthTradePayMode))
                ) && 
                (
                    this.BkagentRespInfo == input.BkagentRespInfo ||
                    (this.BkagentRespInfo != null &&
                    this.BkagentRespInfo.Equals(input.BkagentRespInfo))
                ) && 
                (
                    this.BusinessParams == input.BusinessParams ||
                    (this.BusinessParams != null &&
                    this.BusinessParams.Equals(input.BusinessParams))
                ) && 
                (
                    this.BuyerLogonId == input.BuyerLogonId ||
                    (this.BuyerLogonId != null &&
                    this.BuyerLogonId.Equals(input.BuyerLogonId))
                ) && 
                (
                    this.BuyerOpenId == input.BuyerOpenId ||
                    (this.BuyerOpenId != null &&
                    this.BuyerOpenId.Equals(input.BuyerOpenId))
                ) && 
                (
                    this.BuyerPayAmount == input.BuyerPayAmount ||
                    (this.BuyerPayAmount != null &&
                    this.BuyerPayAmount.Equals(input.BuyerPayAmount))
                ) && 
                (
                    this.BuyerUserId == input.BuyerUserId ||
                    (this.BuyerUserId != null &&
                    this.BuyerUserId.Equals(input.BuyerUserId))
                ) && 
                (
                    this.BuyerUserName == input.BuyerUserName ||
                    (this.BuyerUserName != null &&
                    this.BuyerUserName.Equals(input.BuyerUserName))
                ) && 
                (
                    this.BuyerUserType == input.BuyerUserType ||
                    (this.BuyerUserType != null &&
                    this.BuyerUserType.Equals(input.BuyerUserType))
                ) && 
                (
                    this.CanTurnToAppPay == input.CanTurnToAppPay ||
                    (this.CanTurnToAppPay != null &&
                    this.CanTurnToAppPay.Equals(input.CanTurnToAppPay))
                ) && 
                (
                    this.CardBalance == input.CardBalance ||
                    (this.CardBalance != null &&
                    this.CardBalance.Equals(input.CardBalance))
                ) && 
                (
                    this.ChargeAmount == input.ChargeAmount ||
                    (this.ChargeAmount != null &&
                    this.ChargeAmount.Equals(input.ChargeAmount))
                ) && 
                (
                    this.ChargeFlags == input.ChargeFlags ||
                    (this.ChargeFlags != null &&
                    this.ChargeFlags.Equals(input.ChargeFlags))
                ) && 
                (
                    this.ChargeInfoList == input.ChargeInfoList ||
                    (this.ChargeInfoList != null &&
                    this.ChargeInfoList.Equals(input.ChargeInfoList))
                ) && 
                (
                    this.CreditBizOrderId == input.CreditBizOrderId ||
                    (this.CreditBizOrderId != null &&
                    this.CreditBizOrderId.Equals(input.CreditBizOrderId))
                ) && 
                (
                    this.CreditPayMode == input.CreditPayMode ||
                    (this.CreditPayMode != null &&
                    this.CreditPayMode.Equals(input.CreditPayMode))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.DiscountGoodsDetail == input.DiscountGoodsDetail ||
                    (this.DiscountGoodsDetail != null &&
                    this.DiscountGoodsDetail.Equals(input.DiscountGoodsDetail))
                ) && 
                (
                    this.EnterprisePayInfo == input.EnterprisePayInfo ||
                    (this.EnterprisePayInfo != null &&
                    this.EnterprisePayInfo.Equals(input.EnterprisePayInfo))
                ) && 
                (
                    this.FundBillList == input.FundBillList ||
                    this.FundBillList != null &&
                    input.FundBillList != null &&
                    this.FundBillList.SequenceEqual(input.FundBillList)
                ) && 
                (
                    this.GmtPayment == input.GmtPayment ||
                    (this.GmtPayment != null &&
                    this.GmtPayment.Equals(input.GmtPayment))
                ) && 
                (
                    this.HybAmount == input.HybAmount ||
                    (this.HybAmount != null &&
                    this.HybAmount.Equals(input.HybAmount))
                ) && 
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) && 
                (
                    this.MdiscountAmount == input.MdiscountAmount ||
                    (this.MdiscountAmount != null &&
                    this.MdiscountAmount.Equals(input.MdiscountAmount))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.PayAmount == input.PayAmount ||
                    (this.PayAmount != null &&
                    this.PayAmount.Equals(input.PayAmount))
                ) && 
                (
                    this.PayCurrency == input.PayCurrency ||
                    (this.PayCurrency != null &&
                    this.PayCurrency.Equals(input.PayCurrency))
                ) && 
                (
                    this.PointAmount == input.PointAmount ||
                    (this.PointAmount != null &&
                    this.PointAmount.Equals(input.PointAmount))
                ) && 
                (
                    this.PreAuthPayAmount == input.PreAuthPayAmount ||
                    (this.PreAuthPayAmount != null &&
                    this.PreAuthPayAmount.Equals(input.PreAuthPayAmount))
                ) && 
                (
                    this.ReceiptAmount == input.ReceiptAmount ||
                    (this.ReceiptAmount != null &&
                    this.ReceiptAmount.Equals(input.ReceiptAmount))
                ) && 
                (
                    this.ReceiptCurrencyType == input.ReceiptCurrencyType ||
                    (this.ReceiptCurrencyType != null &&
                    this.ReceiptCurrencyType.Equals(input.ReceiptCurrencyType))
                ) && 
                (
                    this.SettleAmount == input.SettleAmount ||
                    (this.SettleAmount != null &&
                    this.SettleAmount.Equals(input.SettleAmount))
                ) && 
                (
                    this.SettleCurrency == input.SettleCurrency ||
                    (this.SettleCurrency != null &&
                    this.SettleCurrency.Equals(input.SettleCurrency))
                ) && 
                (
                    this.SettleTransRate == input.SettleTransRate ||
                    (this.SettleTransRate != null &&
                    this.SettleTransRate.Equals(input.SettleTransRate))
                ) && 
                (
                    this.SettlementId == input.SettlementId ||
                    (this.SettlementId != null &&
                    this.SettlementId.Equals(input.SettlementId))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.TapPayInfo == input.TapPayInfo ||
                    (this.TapPayInfo != null &&
                    this.TapPayInfo.Equals(input.TapPayInfo))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                ) && 
                (
                    this.TransCurrency == input.TransCurrency ||
                    (this.TransCurrency != null &&
                    this.TransCurrency.Equals(input.TransCurrency))
                ) && 
                (
                    this.TransPayRate == input.TransPayRate ||
                    (this.TransPayRate != null &&
                    this.TransPayRate.Equals(input.TransPayRate))
                ) && 
                (
                    this.VoucherDetailList == input.VoucherDetailList ||
                    this.VoucherDetailList != null &&
                    input.VoucherDetailList != null &&
                    this.VoucherDetailList.SequenceEqual(input.VoucherDetailList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvanceAmount != null)
                {
                    hashCode = (hashCode * 59) + this.AdvanceAmount.GetHashCode();
                }
                if (this.AsyncPayApplyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AsyncPayApplyStatus.GetHashCode();
                }
                if (this.AsyncPaymentMode != null)
                {
                    hashCode = (hashCode * 59) + this.AsyncPaymentMode.GetHashCode();
                }
                if (this.AuthTradePayMode != null)
                {
                    hashCode = (hashCode * 59) + this.AuthTradePayMode.GetHashCode();
                }
                if (this.BkagentRespInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BkagentRespInfo.GetHashCode();
                }
                if (this.BusinessParams != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessParams.GetHashCode();
                }
                if (this.BuyerLogonId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerLogonId.GetHashCode();
                }
                if (this.BuyerOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerOpenId.GetHashCode();
                }
                if (this.BuyerPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerPayAmount.GetHashCode();
                }
                if (this.BuyerUserId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserId.GetHashCode();
                }
                if (this.BuyerUserName != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserName.GetHashCode();
                }
                if (this.BuyerUserType != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserType.GetHashCode();
                }
                if (this.CanTurnToAppPay != null)
                {
                    hashCode = (hashCode * 59) + this.CanTurnToAppPay.GetHashCode();
                }
                if (this.CardBalance != null)
                {
                    hashCode = (hashCode * 59) + this.CardBalance.GetHashCode();
                }
                if (this.ChargeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeAmount.GetHashCode();
                }
                if (this.ChargeFlags != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeFlags.GetHashCode();
                }
                if (this.ChargeInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeInfoList.GetHashCode();
                }
                if (this.CreditBizOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditBizOrderId.GetHashCode();
                }
                if (this.CreditPayMode != null)
                {
                    hashCode = (hashCode * 59) + this.CreditPayMode.GetHashCode();
                }
                if (this.DiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountAmount.GetHashCode();
                }
                if (this.DiscountGoodsDetail != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountGoodsDetail.GetHashCode();
                }
                if (this.EnterprisePayInfo != null)
                {
                    hashCode = (hashCode * 59) + this.EnterprisePayInfo.GetHashCode();
                }
                if (this.FundBillList != null)
                {
                    hashCode = (hashCode * 59) + this.FundBillList.GetHashCode();
                }
                if (this.GmtPayment != null)
                {
                    hashCode = (hashCode * 59) + this.GmtPayment.GetHashCode();
                }
                if (this.HybAmount != null)
                {
                    hashCode = (hashCode * 59) + this.HybAmount.GetHashCode();
                }
                if (this.InvoiceAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceAmount.GetHashCode();
                }
                if (this.MdiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MdiscountAmount.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.PayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PayAmount.GetHashCode();
                }
                if (this.PayCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayCurrency.GetHashCode();
                }
                if (this.PointAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PointAmount.GetHashCode();
                }
                if (this.PreAuthPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PreAuthPayAmount.GetHashCode();
                }
                if (this.ReceiptAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptAmount.GetHashCode();
                }
                if (this.ReceiptCurrencyType != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptCurrencyType.GetHashCode();
                }
                if (this.SettleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAmount.GetHashCode();
                }
                if (this.SettleCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettleCurrency.GetHashCode();
                }
                if (this.SettleTransRate != null)
                {
                    hashCode = (hashCode * 59) + this.SettleTransRate.GetHashCode();
                }
                if (this.SettlementId != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementId.GetHashCode();
                }
                if (this.StoreName != null)
                {
                    hashCode = (hashCode * 59) + this.StoreName.GetHashCode();
                }
                if (this.TapPayInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TapPayInfo.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                if (this.TransCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.TransCurrency.GetHashCode();
                }
                if (this.TransPayRate != null)
                {
                    hashCode = (hashCode * 59) + this.TransPayRate.GetHashCode();
                }
                if (this.VoucherDetailList != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherDetailList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
