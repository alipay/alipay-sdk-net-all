/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-09-04
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// EmployeeAccountingEntityDTO
    /// </summary>
    [DataContract(Name = "EmployeeAccountingEntityDTO")]
    public partial class EmployeeAccountingEntityDTO : IEquatable<EmployeeAccountingEntityDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeAccountingEntityDTO" /> class.
        /// </summary>
        /// <param name="accountingEntityCode">核算主体编码.</param>
        /// <param name="accountingEntityId">核算主体id.</param>
        /// <param name="accountingEntityName">核算主体名称.</param>
        public EmployeeAccountingEntityDTO(string accountingEntityCode = default(string), string accountingEntityId = default(string), string accountingEntityName = default(string))
        {
            this.AccountingEntityCode = accountingEntityCode;
            this.AccountingEntityId = accountingEntityId;
            this.AccountingEntityName = accountingEntityName;
        }

        /// <summary>
        /// 核算主体编码
        /// </summary>
        /// <value>核算主体编码</value>
        [DataMember(Name = "accounting_entity_code", EmitDefaultValue = false)]
        public string AccountingEntityCode { get; set; }

        /// <summary>
        /// 核算主体id
        /// </summary>
        /// <value>核算主体id</value>
        [DataMember(Name = "accounting_entity_id", EmitDefaultValue = false)]
        public string AccountingEntityId { get; set; }

        /// <summary>
        /// 核算主体名称
        /// </summary>
        /// <value>核算主体名称</value>
        [DataMember(Name = "accounting_entity_name", EmitDefaultValue = false)]
        public string AccountingEntityName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmployeeAccountingEntityDTO {\n");
            sb.Append("  AccountingEntityCode: ").Append(AccountingEntityCode).Append("\n");
            sb.Append("  AccountingEntityId: ").Append(AccountingEntityId).Append("\n");
            sb.Append("  AccountingEntityName: ").Append(AccountingEntityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeAccountingEntityDTO);
        }

        /// <summary>
        /// Returns true if EmployeeAccountingEntityDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeAccountingEntityDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeAccountingEntityDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountingEntityCode == input.AccountingEntityCode ||
                    (this.AccountingEntityCode != null &&
                    this.AccountingEntityCode.Equals(input.AccountingEntityCode))
                ) && 
                (
                    this.AccountingEntityId == input.AccountingEntityId ||
                    (this.AccountingEntityId != null &&
                    this.AccountingEntityId.Equals(input.AccountingEntityId))
                ) && 
                (
                    this.AccountingEntityName == input.AccountingEntityName ||
                    (this.AccountingEntityName != null &&
                    this.AccountingEntityName.Equals(input.AccountingEntityName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingEntityCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingEntityCode.GetHashCode();
                }
                if (this.AccountingEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingEntityId.GetHashCode();
                }
                if (this.AccountingEntityName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingEntityName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
