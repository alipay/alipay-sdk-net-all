/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SpecifyAttachmentInfo
    /// </summary>
    [DataContract(Name = "SpecifyAttachmentInfo")]
    public partial class SpecifyAttachmentInfo : IEquatable<SpecifyAttachmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecifyAttachmentInfo" /> class.
        /// </summary>
        /// <param name="allowMoreUploads">是否允许上传更多附件，默认值为false。开启后，除了“collect_common_codes”中指定的附件，签署人可自由上传至多10张图片。.</param>
        /// <param name="allowMoreUploadsMaxCount">允许上传更多附件时，可上传的最大附件数，一次流程中累计的上传附件数至多30（含“附件列表”数量）.</param>
        /// <param name="collectCertTypes">需要签署人上传的证件照片，可进行ORC识别，目前仅支持IDCARD.</param>
        /// <param name="collectCommonCodes">需要签署人上传的其他附件列表，即attachment_explain.details中定义的code列表.</param>
        /// <param name="thirdPartyUserId">个人唯一标识，对应签署区中指定的签署人.</param>
        public SpecifyAttachmentInfo(bool allowMoreUploads = default(bool), int allowMoreUploadsMaxCount = default(int), List<string> collectCertTypes = default(List<string>), List<string> collectCommonCodes = default(List<string>), string thirdPartyUserId = default(string))
        {
            this.AllowMoreUploads = allowMoreUploads;
            this.AllowMoreUploadsMaxCount = allowMoreUploadsMaxCount;
            this.CollectCertTypes = collectCertTypes;
            this.CollectCommonCodes = collectCommonCodes;
            this.ThirdPartyUserId = thirdPartyUserId;
        }

        /// <summary>
        /// 是否允许上传更多附件，默认值为false。开启后，除了“collect_common_codes”中指定的附件，签署人可自由上传至多10张图片。
        /// </summary>
        /// <value>是否允许上传更多附件，默认值为false。开启后，除了“collect_common_codes”中指定的附件，签署人可自由上传至多10张图片。</value>
        [DataMember(Name = "allow_more_uploads", EmitDefaultValue = true)]
        public bool AllowMoreUploads { get; set; }

        /// <summary>
        /// 允许上传更多附件时，可上传的最大附件数，一次流程中累计的上传附件数至多30（含“附件列表”数量）
        /// </summary>
        /// <value>允许上传更多附件时，可上传的最大附件数，一次流程中累计的上传附件数至多30（含“附件列表”数量）</value>
        [DataMember(Name = "allow_more_uploads_max_count", EmitDefaultValue = false)]
        public int AllowMoreUploadsMaxCount { get; set; }

        /// <summary>
        /// 需要签署人上传的证件照片，可进行ORC识别，目前仅支持IDCARD
        /// </summary>
        /// <value>需要签署人上传的证件照片，可进行ORC识别，目前仅支持IDCARD</value>
        [DataMember(Name = "collect_cert_types", EmitDefaultValue = false)]
        public List<string> CollectCertTypes { get; set; }

        /// <summary>
        /// 需要签署人上传的其他附件列表，即attachment_explain.details中定义的code列表
        /// </summary>
        /// <value>需要签署人上传的其他附件列表，即attachment_explain.details中定义的code列表</value>
        [DataMember(Name = "collect_common_codes", EmitDefaultValue = false)]
        public List<string> CollectCommonCodes { get; set; }

        /// <summary>
        /// 个人唯一标识，对应签署区中指定的签署人
        /// </summary>
        /// <value>个人唯一标识，对应签署区中指定的签署人</value>
        [DataMember(Name = "third_party_user_id", EmitDefaultValue = false)]
        public string ThirdPartyUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecifyAttachmentInfo {\n");
            sb.Append("  AllowMoreUploads: ").Append(AllowMoreUploads).Append("\n");
            sb.Append("  AllowMoreUploadsMaxCount: ").Append(AllowMoreUploadsMaxCount).Append("\n");
            sb.Append("  CollectCertTypes: ").Append(CollectCertTypes).Append("\n");
            sb.Append("  CollectCommonCodes: ").Append(CollectCommonCodes).Append("\n");
            sb.Append("  ThirdPartyUserId: ").Append(ThirdPartyUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecifyAttachmentInfo);
        }

        /// <summary>
        /// Returns true if SpecifyAttachmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecifyAttachmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecifyAttachmentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowMoreUploads == input.AllowMoreUploads ||
                    this.AllowMoreUploads.Equals(input.AllowMoreUploads)
                ) && 
                (
                    this.AllowMoreUploadsMaxCount == input.AllowMoreUploadsMaxCount ||
                    this.AllowMoreUploadsMaxCount.Equals(input.AllowMoreUploadsMaxCount)
                ) && 
                (
                    this.CollectCertTypes == input.CollectCertTypes ||
                    this.CollectCertTypes != null &&
                    input.CollectCertTypes != null &&
                    this.CollectCertTypes.SequenceEqual(input.CollectCertTypes)
                ) && 
                (
                    this.CollectCommonCodes == input.CollectCommonCodes ||
                    this.CollectCommonCodes != null &&
                    input.CollectCommonCodes != null &&
                    this.CollectCommonCodes.SequenceEqual(input.CollectCommonCodes)
                ) && 
                (
                    this.ThirdPartyUserId == input.ThirdPartyUserId ||
                    (this.ThirdPartyUserId != null &&
                    this.ThirdPartyUserId.Equals(input.ThirdPartyUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowMoreUploads.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowMoreUploadsMaxCount.GetHashCode();
                if (this.CollectCertTypes != null)
                {
                    hashCode = (hashCode * 59) + this.CollectCertTypes.GetHashCode();
                }
                if (this.CollectCommonCodes != null)
                {
                    hashCode = (hashCode * 59) + this.CollectCommonCodes.GetHashCode();
                }
                if (this.ThirdPartyUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdPartyUserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
