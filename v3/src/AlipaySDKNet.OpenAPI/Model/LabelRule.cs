/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// LabelRule
    /// </summary>
    [DataContract(Name = "LabelRule")]
    public partial class LabelRule : IEquatable<LabelRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelRule" /> class.
        /// </summary>
        /// <param name="labelId">标签id.</param>
        /// <param name="labelValue">标签值，当有多个取值时用英文\&quot;,\&quot;分隔，不允许传入下划线\&quot;_\&quot;、竖线\&quot;|\&quot;或者空格\&quot; \&quot;和方括号\&quot;[\&quot;、\&quot;]\&quot;.</param>
        /// <param name="_operator">目前支持EQ（等于）、BETWEEN（范围）、IN（包含）三种操作符；每个标签支持的运算符可以通过&lt;a href&#x3D;\&quot;https://docs.open.alipay.com/api_6/alipay.open.public.life.label.batchquery#sintq\&quot;&gt;标签列表查询接口&lt;/a&gt;获得。该字段允许为空，默认运算符为IN.</param>
        public LabelRule(string labelId = default(string), string labelValue = default(string), string _operator = default(string))
        {
            this.LabelId = labelId;
            this.LabelValue = labelValue;
            this.Operator = _operator;
        }

        /// <summary>
        /// 标签id
        /// </summary>
        /// <value>标签id</value>
        [DataMember(Name = "label_id", EmitDefaultValue = false)]
        public string LabelId { get; set; }

        /// <summary>
        /// 标签值，当有多个取值时用英文\&quot;,\&quot;分隔，不允许传入下划线\&quot;_\&quot;、竖线\&quot;|\&quot;或者空格\&quot; \&quot;和方括号\&quot;[\&quot;、\&quot;]\&quot;
        /// </summary>
        /// <value>标签值，当有多个取值时用英文\&quot;,\&quot;分隔，不允许传入下划线\&quot;_\&quot;、竖线\&quot;|\&quot;或者空格\&quot; \&quot;和方括号\&quot;[\&quot;、\&quot;]\&quot;</value>
        [DataMember(Name = "label_value", EmitDefaultValue = false)]
        public string LabelValue { get; set; }

        /// <summary>
        /// 目前支持EQ（等于）、BETWEEN（范围）、IN（包含）三种操作符；每个标签支持的运算符可以通过&lt;a href&#x3D;\&quot;https://docs.open.alipay.com/api_6/alipay.open.public.life.label.batchquery#sintq\&quot;&gt;标签列表查询接口&lt;/a&gt;获得。该字段允许为空，默认运算符为IN
        /// </summary>
        /// <value>目前支持EQ（等于）、BETWEEN（范围）、IN（包含）三种操作符；每个标签支持的运算符可以通过&lt;a href&#x3D;\&quot;https://docs.open.alipay.com/api_6/alipay.open.public.life.label.batchquery#sintq\&quot;&gt;标签列表查询接口&lt;/a&gt;获得。该字段允许为空，默认运算符为IN</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LabelRule {\n");
            sb.Append("  LabelId: ").Append(LabelId).Append("\n");
            sb.Append("  LabelValue: ").Append(LabelValue).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabelRule);
        }

        /// <summary>
        /// Returns true if LabelRule instances are equal
        /// </summary>
        /// <param name="input">Instance of LabelRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LabelId == input.LabelId ||
                    (this.LabelId != null &&
                    this.LabelId.Equals(input.LabelId))
                ) && 
                (
                    this.LabelValue == input.LabelValue ||
                    (this.LabelValue != null &&
                    this.LabelValue.Equals(input.LabelValue))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LabelId != null)
                {
                    hashCode = (hashCode * 59) + this.LabelId.GetHashCode();
                }
                if (this.LabelValue != null)
                {
                    hashCode = (hashCode * 59) + this.LabelValue.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
