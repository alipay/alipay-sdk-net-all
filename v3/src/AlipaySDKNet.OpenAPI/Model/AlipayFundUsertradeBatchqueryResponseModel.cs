/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayFundUsertradeBatchqueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayFundUsertradeBatchqueryResponseModel")]
    public partial class AlipayFundUsertradeBatchqueryResponseModel : IEquatable<AlipayFundUsertradeBatchqueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayFundUsertradeBatchqueryResponseModel" /> class.
        /// </summary>
        /// <param name="endTime">拉取的结束时间，格式yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="hasNext">是否有下一页.</param>
        /// <param name="pageIndex">入参中的分页页码.</param>
        /// <param name="pageSize">入参中的分页大小.</param>
        /// <param name="startTime">拉取的起始时间，格式yyyy-MM-dd HH:mm:ss.</param>
        /// <param name="totalCount">交易时间区间内的总交易数.</param>
        /// <param name="tradeInfoList">用户交易数据.</param>
        public AlipayFundUsertradeBatchqueryResponseModel(string endTime = default(string), bool hasNext = default(bool), string pageIndex = default(string), string pageSize = default(string), string startTime = default(string), int totalCount = default(int), List<UserTradeInfoDTO> tradeInfoList = default(List<UserTradeInfoDTO>))
        {
            this.EndTime = endTime;
            this.HasNext = hasNext;
            this.PageIndex = pageIndex;
            this.PageSize = pageSize;
            this.StartTime = startTime;
            this.TotalCount = totalCount;
            this.TradeInfoList = tradeInfoList;
        }

        /// <summary>
        /// 拉取的结束时间，格式yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>拉取的结束时间，格式yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// 是否有下一页
        /// </summary>
        /// <value>是否有下一页</value>
        [DataMember(Name = "has_next", EmitDefaultValue = true)]
        public bool HasNext { get; set; }

        /// <summary>
        /// 入参中的分页页码
        /// </summary>
        /// <value>入参中的分页页码</value>
        [DataMember(Name = "page_index", EmitDefaultValue = false)]
        public string PageIndex { get; set; }

        /// <summary>
        /// 入参中的分页大小
        /// </summary>
        /// <value>入参中的分页大小</value>
        [DataMember(Name = "page_size", EmitDefaultValue = false)]
        public string PageSize { get; set; }

        /// <summary>
        /// 拉取的起始时间，格式yyyy-MM-dd HH:mm:ss
        /// </summary>
        /// <value>拉取的起始时间，格式yyyy-MM-dd HH:mm:ss</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// 交易时间区间内的总交易数
        /// </summary>
        /// <value>交易时间区间内的总交易数</value>
        [DataMember(Name = "total_count", EmitDefaultValue = false)]
        public int TotalCount { get; set; }

        /// <summary>
        /// 用户交易数据
        /// </summary>
        /// <value>用户交易数据</value>
        [DataMember(Name = "trade_info_list", EmitDefaultValue = false)]
        public List<UserTradeInfoDTO> TradeInfoList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayFundUsertradeBatchqueryResponseModel {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HasNext: ").Append(HasNext).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  TradeInfoList: ").Append(TradeInfoList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayFundUsertradeBatchqueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayFundUsertradeBatchqueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayFundUsertradeBatchqueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayFundUsertradeBatchqueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.HasNext == input.HasNext ||
                    this.HasNext.Equals(input.HasNext)
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    (this.PageIndex != null &&
                    this.PageIndex.Equals(input.PageIndex))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.TradeInfoList == input.TradeInfoList ||
                    this.TradeInfoList != null &&
                    input.TradeInfoList != null &&
                    this.TradeInfoList.SequenceEqual(input.TradeInfoList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasNext.GetHashCode();
                if (this.PageIndex != null)
                {
                    hashCode = (hashCode * 59) + this.PageIndex.GetHashCode();
                }
                if (this.PageSize != null)
                {
                    hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                if (this.TradeInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.TradeInfoList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
