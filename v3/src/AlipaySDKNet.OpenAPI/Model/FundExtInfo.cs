/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// FundExtInfo
    /// </summary>
    [DataContract(Name = "FundExtInfo")]
    public partial class FundExtInfo : IEquatable<FundExtInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundExtInfo" /> class.
        /// </summary>
        /// <param name="fundIdentity">出资主体账号，fund_identity_type是ALIPAY_USER_ID填支付宝会员ID（2088开头）； 是ALIPAY_LOGON_ID 填支付宝登录号.</param>
        /// <param name="fundIdentityType">出资主体账号类型，目前支持如下类型： 1、ALIPAY_USER_ID 支付宝的会员ID 2、ALIPAY_LOGON_ID：支付宝登录号，支持邮箱和手机号格式.</param>
        public FundExtInfo(string fundIdentity = default(string), string fundIdentityType = default(string))
        {
            this.FundIdentity = fundIdentity;
            this.FundIdentityType = fundIdentityType;
        }

        /// <summary>
        /// 出资主体账号，fund_identity_type是ALIPAY_USER_ID填支付宝会员ID（2088开头）； 是ALIPAY_LOGON_ID 填支付宝登录号
        /// </summary>
        /// <value>出资主体账号，fund_identity_type是ALIPAY_USER_ID填支付宝会员ID（2088开头）； 是ALIPAY_LOGON_ID 填支付宝登录号</value>
        [DataMember(Name = "fund_identity", EmitDefaultValue = false)]
        public string FundIdentity { get; set; }

        /// <summary>
        /// 出资主体账号类型，目前支持如下类型： 1、ALIPAY_USER_ID 支付宝的会员ID 2、ALIPAY_LOGON_ID：支付宝登录号，支持邮箱和手机号格式
        /// </summary>
        /// <value>出资主体账号类型，目前支持如下类型： 1、ALIPAY_USER_ID 支付宝的会员ID 2、ALIPAY_LOGON_ID：支付宝登录号，支持邮箱和手机号格式</value>
        [DataMember(Name = "fund_identity_type", EmitDefaultValue = false)]
        public string FundIdentityType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundExtInfo {\n");
            sb.Append("  FundIdentity: ").Append(FundIdentity).Append("\n");
            sb.Append("  FundIdentityType: ").Append(FundIdentityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundExtInfo);
        }

        /// <summary>
        /// Returns true if FundExtInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FundExtInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundExtInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FundIdentity == input.FundIdentity ||
                    (this.FundIdentity != null &&
                    this.FundIdentity.Equals(input.FundIdentity))
                ) && 
                (
                    this.FundIdentityType == input.FundIdentityType ||
                    (this.FundIdentityType != null &&
                    this.FundIdentityType.Equals(input.FundIdentityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FundIdentity != null)
                {
                    hashCode = (hashCode * 59) + this.FundIdentity.GetHashCode();
                }
                if (this.FundIdentityType != null)
                {
                    hashCode = (hashCode * 59) + this.FundIdentityType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
