/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ExtUserInfo
    /// </summary>
    [DataContract(Name = "ExtUserInfo")]
    public partial class ExtUserInfo : IEquatable<ExtUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtUserInfo" /> class.
        /// </summary>
        /// <param name="certNo">买家证件号。 注：need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件号码与该参数传入的值是否匹配。.</param>
        /// <param name="certType">指定买家证件类型。 枚举值： IDENTITY_CARD：身份证； PASSPORT：护照； OFFICER_CARD：军官证； SOLDIER_CARD：士兵证； HOKOU：户口本； PERMANENT_RESIDENCE_FOREIGNER：外国人永久居留身份证。 如有其它类型需要支持，请与蚂蚁金服工作人员联系。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件类型与该参数传入的值是否匹配。.</param>
        /// <param name="fixBuyer">是否强制校验买家身份。 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，接口上必须指定cert_type、cert_no和name信息且支付宝会校验传入的信息跟支付买家的信息都匹配，否则报错。 默认为不校验。.</param>
        /// <param name="identityHash">买家加密身份信息。当指定了此参数且指定need_check_info&#x3D;T时，支付宝会对买家身份进行校验，校验逻辑为买家姓名、买家证件号拼接后的字符串，以sha256算法utf-8编码计算hash，若与传入的值不匹配则会拦截本次支付。注意：如果同时指定了用户明文身份信息（name，cert_type，cert_no中任意一个），则忽略identity_hash以明文参数校验。.</param>
        /// <param name="minAge">允许的最小买家年龄。 买家年龄必须大于等于所传数值  注： 1. need_check_info&#x3D;T时该参数才有效 2. min_age为整数，必须大于等于0.</param>
        /// <param name="mobile">指定买家手机号。 注：该参数暂不校验.</param>
        /// <param name="name">指定买家姓名。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效.</param>
        /// <param name="needCheckInfo">是否强制校验买家信息； 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，支付宝会校验支付买家的信息与接口上传递的cert_type、cert_no、name或age是否匹配，只有接口传递了信息才会进行对应项的校验；只要有任何一项信息校验不匹配交易都会失败。如果传递了need_check_info，但是没有传任何校验项，则不进行任何校验。 默认为不校验。.</param>
        public ExtUserInfo(string certNo = default(string), string certType = default(string), string fixBuyer = default(string), string identityHash = default(string), string minAge = default(string), string mobile = default(string), string name = default(string), string needCheckInfo = default(string))
        {
            this.CertNo = certNo;
            this.CertType = certType;
            this.FixBuyer = fixBuyer;
            this.IdentityHash = identityHash;
            this.MinAge = minAge;
            this.Mobile = mobile;
            this.Name = name;
            this.NeedCheckInfo = needCheckInfo;
        }

        /// <summary>
        /// 买家证件号。 注：need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件号码与该参数传入的值是否匹配。
        /// </summary>
        /// <value>买家证件号。 注：need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件号码与该参数传入的值是否匹配。</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 指定买家证件类型。 枚举值： IDENTITY_CARD：身份证； PASSPORT：护照； OFFICER_CARD：军官证； SOLDIER_CARD：士兵证； HOKOU：户口本； PERMANENT_RESIDENCE_FOREIGNER：外国人永久居留身份证。 如有其它类型需要支持，请与蚂蚁金服工作人员联系。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件类型与该参数传入的值是否匹配。
        /// </summary>
        /// <value>指定买家证件类型。 枚举值： IDENTITY_CARD：身份证； PASSPORT：护照； OFFICER_CARD：军官证； SOLDIER_CARD：士兵证； HOKOU：户口本； PERMANENT_RESIDENCE_FOREIGNER：外国人永久居留身份证。 如有其它类型需要支持，请与蚂蚁金服工作人员联系。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效，支付宝会比较买家在支付宝留存的证件类型与该参数传入的值是否匹配。</value>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public string CertType { get; set; }

        /// <summary>
        /// 是否强制校验买家身份。 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，接口上必须指定cert_type、cert_no和name信息且支付宝会校验传入的信息跟支付买家的信息都匹配，否则报错。 默认为不校验。
        /// </summary>
        /// <value>是否强制校验买家身份。 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，接口上必须指定cert_type、cert_no和name信息且支付宝会校验传入的信息跟支付买家的信息都匹配，否则报错。 默认为不校验。</value>
        [DataMember(Name = "fix_buyer", EmitDefaultValue = false)]
        public string FixBuyer { get; set; }

        /// <summary>
        /// 买家加密身份信息。当指定了此参数且指定need_check_info&#x3D;T时，支付宝会对买家身份进行校验，校验逻辑为买家姓名、买家证件号拼接后的字符串，以sha256算法utf-8编码计算hash，若与传入的值不匹配则会拦截本次支付。注意：如果同时指定了用户明文身份信息（name，cert_type，cert_no中任意一个），则忽略identity_hash以明文参数校验。
        /// </summary>
        /// <value>买家加密身份信息。当指定了此参数且指定need_check_info&#x3D;T时，支付宝会对买家身份进行校验，校验逻辑为买家姓名、买家证件号拼接后的字符串，以sha256算法utf-8编码计算hash，若与传入的值不匹配则会拦截本次支付。注意：如果同时指定了用户明文身份信息（name，cert_type，cert_no中任意一个），则忽略identity_hash以明文参数校验。</value>
        [DataMember(Name = "identity_hash", EmitDefaultValue = false)]
        public string IdentityHash { get; set; }

        /// <summary>
        /// 允许的最小买家年龄。 买家年龄必须大于等于所传数值  注： 1. need_check_info&#x3D;T时该参数才有效 2. min_age为整数，必须大于等于0
        /// </summary>
        /// <value>允许的最小买家年龄。 买家年龄必须大于等于所传数值  注： 1. need_check_info&#x3D;T时该参数才有效 2. min_age为整数，必须大于等于0</value>
        [DataMember(Name = "min_age", EmitDefaultValue = false)]
        public string MinAge { get; set; }

        /// <summary>
        /// 指定买家手机号。 注：该参数暂不校验
        /// </summary>
        /// <value>指定买家手机号。 注：该参数暂不校验</value>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// 指定买家姓名。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效
        /// </summary>
        /// <value>指定买家姓名。 注： need_check_info&#x3D;T或fix_buyer&#x3D;T时该参数才有效</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 是否强制校验买家信息； 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，支付宝会校验支付买家的信息与接口上传递的cert_type、cert_no、name或age是否匹配，只有接口传递了信息才会进行对应项的校验；只要有任何一项信息校验不匹配交易都会失败。如果传递了need_check_info，但是没有传任何校验项，则不进行任何校验。 默认为不校验。
        /// </summary>
        /// <value>是否强制校验买家信息； 需要强制校验传：T; 不需要强制校验传：F或者不传； 当传T时，支付宝会校验支付买家的信息与接口上传递的cert_type、cert_no、name或age是否匹配，只有接口传递了信息才会进行对应项的校验；只要有任何一项信息校验不匹配交易都会失败。如果传递了need_check_info，但是没有传任何校验项，则不进行任何校验。 默认为不校验。</value>
        [DataMember(Name = "need_check_info", EmitDefaultValue = false)]
        public string NeedCheckInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtUserInfo {\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  FixBuyer: ").Append(FixBuyer).Append("\n");
            sb.Append("  IdentityHash: ").Append(IdentityHash).Append("\n");
            sb.Append("  MinAge: ").Append(MinAge).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NeedCheckInfo: ").Append(NeedCheckInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtUserInfo);
        }

        /// <summary>
        /// Returns true if ExtUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtUserInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                ) && 
                (
                    this.FixBuyer == input.FixBuyer ||
                    (this.FixBuyer != null &&
                    this.FixBuyer.Equals(input.FixBuyer))
                ) && 
                (
                    this.IdentityHash == input.IdentityHash ||
                    (this.IdentityHash != null &&
                    this.IdentityHash.Equals(input.IdentityHash))
                ) && 
                (
                    this.MinAge == input.MinAge ||
                    (this.MinAge != null &&
                    this.MinAge.Equals(input.MinAge))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NeedCheckInfo == input.NeedCheckInfo ||
                    (this.NeedCheckInfo != null &&
                    this.NeedCheckInfo.Equals(input.NeedCheckInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.CertType != null)
                {
                    hashCode = (hashCode * 59) + this.CertType.GetHashCode();
                }
                if (this.FixBuyer != null)
                {
                    hashCode = (hashCode * 59) + this.FixBuyer.GetHashCode();
                }
                if (this.IdentityHash != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityHash.GetHashCode();
                }
                if (this.MinAge != null)
                {
                    hashCode = (hashCode * 59) + this.MinAge.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NeedCheckInfo != null)
                {
                    hashCode = (hashCode * 59) + this.NeedCheckInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
