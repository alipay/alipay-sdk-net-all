/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// CategoryRequireInfo
    /// </summary>
    [DataContract(Name = "CategoryRequireInfo")]
    public partial class CategoryRequireInfo : IEquatable<CategoryRequireInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryRequireInfo" /> class.
        /// </summary>
        /// <param name="businessLicenceRequired">营业执照页面是否必填.</param>
        /// <param name="categoryCode">类目code（各级类目code下划线\&quot;_\&quot;拼接）。类目信息参考alipay.open.mini.category.query.</param>
        /// <param name="categoryName">类目名称（各级类目名称下划线\&quot;_\&quot;拼接）.</param>
        /// <param name="categoryRequirements">类目要求原始描述信息.</param>
        /// <param name="doorPhotoRequired">门头照页面是否必填.</param>
        /// <param name="specialLicenceRequired">特殊资质页面是否必填.</param>
        public CategoryRequireInfo(bool businessLicenceRequired = default(bool), string categoryCode = default(string), string categoryName = default(string), string categoryRequirements = default(string), bool doorPhotoRequired = default(bool), bool specialLicenceRequired = default(bool))
        {
            this.BusinessLicenceRequired = businessLicenceRequired;
            this.CategoryCode = categoryCode;
            this.CategoryName = categoryName;
            this.CategoryRequirements = categoryRequirements;
            this.DoorPhotoRequired = doorPhotoRequired;
            this.SpecialLicenceRequired = specialLicenceRequired;
        }

        /// <summary>
        /// 营业执照页面是否必填
        /// </summary>
        /// <value>营业执照页面是否必填</value>
        [DataMember(Name = "business_licence_required", EmitDefaultValue = true)]
        public bool BusinessLicenceRequired { get; set; }

        /// <summary>
        /// 类目code（各级类目code下划线\&quot;_\&quot;拼接）。类目信息参考alipay.open.mini.category.query
        /// </summary>
        /// <value>类目code（各级类目code下划线\&quot;_\&quot;拼接）。类目信息参考alipay.open.mini.category.query</value>
        [DataMember(Name = "category_code", EmitDefaultValue = false)]
        public string CategoryCode { get; set; }

        /// <summary>
        /// 类目名称（各级类目名称下划线\&quot;_\&quot;拼接）
        /// </summary>
        /// <value>类目名称（各级类目名称下划线\&quot;_\&quot;拼接）</value>
        [DataMember(Name = "category_name", EmitDefaultValue = false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// 类目要求原始描述信息
        /// </summary>
        /// <value>类目要求原始描述信息</value>
        [DataMember(Name = "category_requirements", EmitDefaultValue = false)]
        public string CategoryRequirements { get; set; }

        /// <summary>
        /// 门头照页面是否必填
        /// </summary>
        /// <value>门头照页面是否必填</value>
        [DataMember(Name = "door_photo_required", EmitDefaultValue = true)]
        public bool DoorPhotoRequired { get; set; }

        /// <summary>
        /// 特殊资质页面是否必填
        /// </summary>
        /// <value>特殊资质页面是否必填</value>
        [DataMember(Name = "special_licence_required", EmitDefaultValue = true)]
        public bool SpecialLicenceRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryRequireInfo {\n");
            sb.Append("  BusinessLicenceRequired: ").Append(BusinessLicenceRequired).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  CategoryRequirements: ").Append(CategoryRequirements).Append("\n");
            sb.Append("  DoorPhotoRequired: ").Append(DoorPhotoRequired).Append("\n");
            sb.Append("  SpecialLicenceRequired: ").Append(SpecialLicenceRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CategoryRequireInfo);
        }

        /// <summary>
        /// Returns true if CategoryRequireInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CategoryRequireInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryRequireInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessLicenceRequired == input.BusinessLicenceRequired ||
                    this.BusinessLicenceRequired.Equals(input.BusinessLicenceRequired)
                ) && 
                (
                    this.CategoryCode == input.CategoryCode ||
                    (this.CategoryCode != null &&
                    this.CategoryCode.Equals(input.CategoryCode))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.CategoryRequirements == input.CategoryRequirements ||
                    (this.CategoryRequirements != null &&
                    this.CategoryRequirements.Equals(input.CategoryRequirements))
                ) && 
                (
                    this.DoorPhotoRequired == input.DoorPhotoRequired ||
                    this.DoorPhotoRequired.Equals(input.DoorPhotoRequired)
                ) && 
                (
                    this.SpecialLicenceRequired == input.SpecialLicenceRequired ||
                    this.SpecialLicenceRequired.Equals(input.SpecialLicenceRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BusinessLicenceRequired.GetHashCode();
                if (this.CategoryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryCode.GetHashCode();
                }
                if (this.CategoryName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryName.GetHashCode();
                }
                if (this.CategoryRequirements != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryRequirements.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DoorPhotoRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.SpecialLicenceRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
