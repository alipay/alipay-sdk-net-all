/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEbppInvoiceExpenserulesProjectruleCreateModel
    /// </summary>
    [DataContract(Name = "AlipayEbppInvoiceExpenserulesProjectruleCreateModel")]
    public partial class AlipayEbppInvoiceExpenserulesProjectruleCreateModel : IEquatable<AlipayEbppInvoiceExpenserulesProjectruleCreateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEbppInvoiceExpenserulesProjectruleCreateModel" /> class.
        /// </summary>
        /// <param name="accountId">共同账户id.</param>
        /// <param name="agreementNo">授权签约协议号.</param>
        /// <param name="effectiveEndDate">有效期截止（yyyy-MM-dd HH:mm:ss，必须大于起始时间）.</param>
        /// <param name="effectiveStartDate">有效期起始（yyyy-MM-dd HH:mm:ss，必须小于截止时间）.</param>
        /// <param name="employeeList">切换open_id前使用此字段：员工支付宝ID列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整.</param>
        /// <param name="employeeOpenIdList">切换open_id后使用此字段：员工open_id列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整.</param>
        /// <param name="expenseCtrlRuleInfoGroupList">费控规则列表.</param>
        /// <param name="projectName">项目名称 约束： 1）敏感词校验 2）不能重复.</param>
        public AlipayEbppInvoiceExpenserulesProjectruleCreateModel(string accountId = default(string), string agreementNo = default(string), string effectiveEndDate = default(string), string effectiveStartDate = default(string), List<string> employeeList = default(List<string>), List<string> employeeOpenIdList = default(List<string>), List<ExpenseCtrRuleGroupInfo> expenseCtrlRuleInfoGroupList = default(List<ExpenseCtrRuleGroupInfo>), string projectName = default(string))
        {
            this.AccountId = accountId;
            this.AgreementNo = agreementNo;
            this.EffectiveEndDate = effectiveEndDate;
            this.EffectiveStartDate = effectiveStartDate;
            this.EmployeeList = employeeList;
            this.EmployeeOpenIdList = employeeOpenIdList;
            this.ExpenseCtrlRuleInfoGroupList = expenseCtrlRuleInfoGroupList;
            this.ProjectName = projectName;
        }

        /// <summary>
        /// 共同账户id
        /// </summary>
        /// <value>共同账户id</value>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// 授权签约协议号
        /// </summary>
        /// <value>授权签约协议号</value>
        [DataMember(Name = "agreement_no", EmitDefaultValue = false)]
        public string AgreementNo { get; set; }

        /// <summary>
        /// 有效期截止（yyyy-MM-dd HH:mm:ss，必须大于起始时间）
        /// </summary>
        /// <value>有效期截止（yyyy-MM-dd HH:mm:ss，必须大于起始时间）</value>
        [DataMember(Name = "effective_end_date", EmitDefaultValue = false)]
        public string EffectiveEndDate { get; set; }

        /// <summary>
        /// 有效期起始（yyyy-MM-dd HH:mm:ss，必须小于截止时间）
        /// </summary>
        /// <value>有效期起始（yyyy-MM-dd HH:mm:ss，必须小于截止时间）</value>
        [DataMember(Name = "effective_start_date", EmitDefaultValue = false)]
        public string EffectiveStartDate { get; set; }

        /// <summary>
        /// 切换open_id前使用此字段：员工支付宝ID列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整
        /// </summary>
        /// <value>切换open_id前使用此字段：员工支付宝ID列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整</value>
        [DataMember(Name = "employee_list", EmitDefaultValue = false)]
        public List<string> EmployeeList { get; set; }

        /// <summary>
        /// 切换open_id后使用此字段：员工open_id列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整
        /// </summary>
        /// <value>切换open_id后使用此字段：员工open_id列表 特殊说明：单次传入的最大员工数为50，后续通过修改项目的员工列表接口进行员工调整</value>
        [DataMember(Name = "employee_open_id_list", EmitDefaultValue = false)]
        public List<string> EmployeeOpenIdList { get; set; }

        /// <summary>
        /// 费控规则列表
        /// </summary>
        /// <value>费控规则列表</value>
        [DataMember(Name = "expense_ctrl_rule_info_group_list", EmitDefaultValue = false)]
        public List<ExpenseCtrRuleGroupInfo> ExpenseCtrlRuleInfoGroupList { get; set; }

        /// <summary>
        /// 项目名称 约束： 1）敏感词校验 2）不能重复
        /// </summary>
        /// <value>项目名称 约束： 1）敏感词校验 2）不能重复</value>
        [DataMember(Name = "project_name", EmitDefaultValue = false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEbppInvoiceExpenserulesProjectruleCreateModel {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AgreementNo: ").Append(AgreementNo).Append("\n");
            sb.Append("  EffectiveEndDate: ").Append(EffectiveEndDate).Append("\n");
            sb.Append("  EffectiveStartDate: ").Append(EffectiveStartDate).Append("\n");
            sb.Append("  EmployeeList: ").Append(EmployeeList).Append("\n");
            sb.Append("  EmployeeOpenIdList: ").Append(EmployeeOpenIdList).Append("\n");
            sb.Append("  ExpenseCtrlRuleInfoGroupList: ").Append(ExpenseCtrlRuleInfoGroupList).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEbppInvoiceExpenserulesProjectruleCreateModel);
        }

        /// <summary>
        /// Returns true if AlipayEbppInvoiceExpenserulesProjectruleCreateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEbppInvoiceExpenserulesProjectruleCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEbppInvoiceExpenserulesProjectruleCreateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AgreementNo == input.AgreementNo ||
                    (this.AgreementNo != null &&
                    this.AgreementNo.Equals(input.AgreementNo))
                ) && 
                (
                    this.EffectiveEndDate == input.EffectiveEndDate ||
                    (this.EffectiveEndDate != null &&
                    this.EffectiveEndDate.Equals(input.EffectiveEndDate))
                ) && 
                (
                    this.EffectiveStartDate == input.EffectiveStartDate ||
                    (this.EffectiveStartDate != null &&
                    this.EffectiveStartDate.Equals(input.EffectiveStartDate))
                ) && 
                (
                    this.EmployeeList == input.EmployeeList ||
                    this.EmployeeList != null &&
                    input.EmployeeList != null &&
                    this.EmployeeList.SequenceEqual(input.EmployeeList)
                ) && 
                (
                    this.EmployeeOpenIdList == input.EmployeeOpenIdList ||
                    this.EmployeeOpenIdList != null &&
                    input.EmployeeOpenIdList != null &&
                    this.EmployeeOpenIdList.SequenceEqual(input.EmployeeOpenIdList)
                ) && 
                (
                    this.ExpenseCtrlRuleInfoGroupList == input.ExpenseCtrlRuleInfoGroupList ||
                    this.ExpenseCtrlRuleInfoGroupList != null &&
                    input.ExpenseCtrlRuleInfoGroupList != null &&
                    this.ExpenseCtrlRuleInfoGroupList.SequenceEqual(input.ExpenseCtrlRuleInfoGroupList)
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AgreementNo != null)
                {
                    hashCode = (hashCode * 59) + this.AgreementNo.GetHashCode();
                }
                if (this.EffectiveEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveEndDate.GetHashCode();
                }
                if (this.EffectiveStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveStartDate.GetHashCode();
                }
                if (this.EmployeeList != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeList.GetHashCode();
                }
                if (this.EmployeeOpenIdList != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeOpenIdList.GetHashCode();
                }
                if (this.ExpenseCtrlRuleInfoGroupList != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseCtrlRuleInfoGroupList.GetHashCode();
                }
                if (this.ProjectName != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
