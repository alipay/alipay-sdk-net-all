/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ZhimaCreditPayafteruseCreditbizorderQueryResponseModel
    /// </summary>
    [DataContract(Name = "ZhimaCreditPayafteruseCreditbizorderQueryResponseModel")]
    public partial class ZhimaCreditPayafteruseCreditbizorderQueryResponseModel : IEquatable<ZhimaCreditPayafteruseCreditbizorderQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZhimaCreditPayafteruseCreditbizorderQueryResponseModel" /> class.
        /// </summary>
        /// <param name="createTime">订单创建时间.</param>
        /// <param name="creditAgreementId">芝麻开通协议号.</param>
        /// <param name="creditBizOrderId">信用服务订单号.</param>
        /// <param name="orderStatus">信用服务订单状态，区分不同产品： （1）针对产品「先用后付」，涉及状态如下：INIT: 下单状态；TRADE_CLOSED: 订单取消或者交易全额退款； TRADE_FINISHED：扣款成功状态。  （2）针对产品「芝麻风险评估与召回」，状态定义如下： [INIT: 下单状态]；[WAIT_FULFILL：待守约]；[OVERDUE：已逾期]；[TRADE_FINISHED:已守约]； [TRADE_CLOSED：已取消]。.</param>
        /// <param name="productCode">产品码.</param>
        /// <param name="totalAmount">信用服务订单金额.</param>
        /// <param name="tradeNo">支付宝交易号。 先用后付产品下必传；芝麻风险评估与召回产品下不传。.</param>
        /// <param name="zmServiceId">芝麻信用服务ID.</param>
        public ZhimaCreditPayafteruseCreditbizorderQueryResponseModel(string createTime = default(string), string creditAgreementId = default(string), string creditBizOrderId = default(string), string orderStatus = default(string), string productCode = default(string), string totalAmount = default(string), string tradeNo = default(string), string zmServiceId = default(string))
        {
            this.CreateTime = createTime;
            this.CreditAgreementId = creditAgreementId;
            this.CreditBizOrderId = creditBizOrderId;
            this.OrderStatus = orderStatus;
            this.ProductCode = productCode;
            this.TotalAmount = totalAmount;
            this.TradeNo = tradeNo;
            this.ZmServiceId = zmServiceId;
        }

        /// <summary>
        /// 订单创建时间
        /// </summary>
        /// <value>订单创建时间</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public string CreateTime { get; set; }

        /// <summary>
        /// 芝麻开通协议号
        /// </summary>
        /// <value>芝麻开通协议号</value>
        [DataMember(Name = "credit_agreement_id", EmitDefaultValue = false)]
        public string CreditAgreementId { get; set; }

        /// <summary>
        /// 信用服务订单号
        /// </summary>
        /// <value>信用服务订单号</value>
        [DataMember(Name = "credit_biz_order_id", EmitDefaultValue = false)]
        public string CreditBizOrderId { get; set; }

        /// <summary>
        /// 信用服务订单状态，区分不同产品： （1）针对产品「先用后付」，涉及状态如下：INIT: 下单状态；TRADE_CLOSED: 订单取消或者交易全额退款； TRADE_FINISHED：扣款成功状态。  （2）针对产品「芝麻风险评估与召回」，状态定义如下： [INIT: 下单状态]；[WAIT_FULFILL：待守约]；[OVERDUE：已逾期]；[TRADE_FINISHED:已守约]； [TRADE_CLOSED：已取消]。
        /// </summary>
        /// <value>信用服务订单状态，区分不同产品： （1）针对产品「先用后付」，涉及状态如下：INIT: 下单状态；TRADE_CLOSED: 订单取消或者交易全额退款； TRADE_FINISHED：扣款成功状态。  （2）针对产品「芝麻风险评估与召回」，状态定义如下： [INIT: 下单状态]；[WAIT_FULFILL：待守约]；[OVERDUE：已逾期]；[TRADE_FINISHED:已守约]； [TRADE_CLOSED：已取消]。</value>
        [DataMember(Name = "order_status", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// 产品码
        /// </summary>
        /// <value>产品码</value>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// 信用服务订单金额
        /// </summary>
        /// <value>信用服务订单金额</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 支付宝交易号。 先用后付产品下必传；芝麻风险评估与召回产品下不传。
        /// </summary>
        /// <value>支付宝交易号。 先用后付产品下必传；芝麻风险评估与召回产品下不传。</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// 芝麻信用服务ID
        /// </summary>
        /// <value>芝麻信用服务ID</value>
        [DataMember(Name = "zm_service_id", EmitDefaultValue = false)]
        public string ZmServiceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZhimaCreditPayafteruseCreditbizorderQueryResponseModel {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  CreditAgreementId: ").Append(CreditAgreementId).Append("\n");
            sb.Append("  CreditBizOrderId: ").Append(CreditBizOrderId).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  ZmServiceId: ").Append(ZmServiceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZhimaCreditPayafteruseCreditbizorderQueryResponseModel);
        }

        /// <summary>
        /// Returns true if ZhimaCreditPayafteruseCreditbizorderQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ZhimaCreditPayafteruseCreditbizorderQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZhimaCreditPayafteruseCreditbizorderQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.CreditAgreementId == input.CreditAgreementId ||
                    (this.CreditAgreementId != null &&
                    this.CreditAgreementId.Equals(input.CreditAgreementId))
                ) && 
                (
                    this.CreditBizOrderId == input.CreditBizOrderId ||
                    (this.CreditBizOrderId != null &&
                    this.CreditBizOrderId.Equals(input.CreditBizOrderId))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                ) && 
                (
                    this.ZmServiceId == input.ZmServiceId ||
                    (this.ZmServiceId != null &&
                    this.ZmServiceId.Equals(input.ZmServiceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                }
                if (this.CreditAgreementId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditAgreementId.GetHashCode();
                }
                if (this.CreditBizOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditBizOrderId.GetHashCode();
                }
                if (this.OrderStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OrderStatus.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                if (this.ZmServiceId != null)
                {
                    hashCode = (hashCode * 59) + this.ZmServiceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
