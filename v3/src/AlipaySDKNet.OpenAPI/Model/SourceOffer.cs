/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SourceOffer
    /// </summary>
    [DataContract(Name = "SourceOffer")]
    public partial class SourceOffer : IEquatable<SourceOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceOffer" /> class.
        /// </summary>
        /// <param name="offerId">offerId，根据offer类型对应不同ID。支持小程序的APPID/小程序服务的服务编码/优惠券的活动ID.</param>
        /// <param name="offerType">offer类型。目前仅支持小程序（mini_app/service）、小程序服务（subservice）、营销活动（voucher）、商品(goods)、小游戏(game)。 注意：其中“小程序”offer类型，在发布接口请用mini_app，查询接口返回为service.</param>
        public SourceOffer(string offerId = default(string), string offerType = default(string))
        {
            this.OfferId = offerId;
            this.OfferType = offerType;
        }

        /// <summary>
        /// offerId，根据offer类型对应不同ID。支持小程序的APPID/小程序服务的服务编码/优惠券的活动ID
        /// </summary>
        /// <value>offerId，根据offer类型对应不同ID。支持小程序的APPID/小程序服务的服务编码/优惠券的活动ID</value>
        [DataMember(Name = "offer_id", EmitDefaultValue = false)]
        public string OfferId { get; set; }

        /// <summary>
        /// offer类型。目前仅支持小程序（mini_app/service）、小程序服务（subservice）、营销活动（voucher）、商品(goods)、小游戏(game)。 注意：其中“小程序”offer类型，在发布接口请用mini_app，查询接口返回为service
        /// </summary>
        /// <value>offer类型。目前仅支持小程序（mini_app/service）、小程序服务（subservice）、营销活动（voucher）、商品(goods)、小游戏(game)。 注意：其中“小程序”offer类型，在发布接口请用mini_app，查询接口返回为service</value>
        [DataMember(Name = "offer_type", EmitDefaultValue = false)]
        public string OfferType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceOffer {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceOffer);
        }

        /// <summary>
        /// Returns true if SourceOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceOffer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.OfferType == input.OfferType ||
                    (this.OfferType != null &&
                    this.OfferType.Equals(input.OfferType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OfferId != null)
                {
                    hashCode = (hashCode * 59) + this.OfferId.GetHashCode();
                }
                if (this.OfferType != null)
                {
                    hashCode = (hashCode * 59) + this.OfferType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
