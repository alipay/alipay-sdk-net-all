/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// CloudResumeCertificateInfo
    /// </summary>
    [DataContract(Name = "CloudResumeCertificateInfo")]
    public partial class CloudResumeCertificateInfo : IEquatable<CloudResumeCertificateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudResumeCertificateInfo" /> class.
        /// </summary>
        /// <param name="certificateCertLevel">证书等级.</param>
        /// <param name="certificateName">证书名称.</param>
        /// <param name="certificateSendCardAddress">发证机构.</param>
        /// <param name="certificateVerifyStatus">UNPROMISED&#x3D;未承诺 PROMISED&#x3D;已承诺 VERFIED&#x3D;已验真 UNVERIFIED&#x3D;验证未通过.</param>
        /// <param name="inValidityPeriod">VALID&#x3D;有效 INVALID&#x3D;失效 UNKNOWN&#x3D;未知.</param>
        public CloudResumeCertificateInfo(string certificateCertLevel = default(string), string certificateName = default(string), string certificateSendCardAddress = default(string), string certificateVerifyStatus = default(string), string inValidityPeriod = default(string))
        {
            this.CertificateCertLevel = certificateCertLevel;
            this.CertificateName = certificateName;
            this.CertificateSendCardAddress = certificateSendCardAddress;
            this.CertificateVerifyStatus = certificateVerifyStatus;
            this.InValidityPeriod = inValidityPeriod;
        }

        /// <summary>
        /// 证书等级
        /// </summary>
        /// <value>证书等级</value>
        [DataMember(Name = "certificate_cert_level", EmitDefaultValue = false)]
        public string CertificateCertLevel { get; set; }

        /// <summary>
        /// 证书名称
        /// </summary>
        /// <value>证书名称</value>
        [DataMember(Name = "certificate_name", EmitDefaultValue = false)]
        public string CertificateName { get; set; }

        /// <summary>
        /// 发证机构
        /// </summary>
        /// <value>发证机构</value>
        [DataMember(Name = "certificate_send_card_address", EmitDefaultValue = false)]
        public string CertificateSendCardAddress { get; set; }

        /// <summary>
        /// UNPROMISED&#x3D;未承诺 PROMISED&#x3D;已承诺 VERFIED&#x3D;已验真 UNVERIFIED&#x3D;验证未通过
        /// </summary>
        /// <value>UNPROMISED&#x3D;未承诺 PROMISED&#x3D;已承诺 VERFIED&#x3D;已验真 UNVERIFIED&#x3D;验证未通过</value>
        [DataMember(Name = "certificate_verify_status", EmitDefaultValue = false)]
        public string CertificateVerifyStatus { get; set; }

        /// <summary>
        /// VALID&#x3D;有效 INVALID&#x3D;失效 UNKNOWN&#x3D;未知
        /// </summary>
        /// <value>VALID&#x3D;有效 INVALID&#x3D;失效 UNKNOWN&#x3D;未知</value>
        [DataMember(Name = "in_validity_period", EmitDefaultValue = false)]
        public string InValidityPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CloudResumeCertificateInfo {\n");
            sb.Append("  CertificateCertLevel: ").Append(CertificateCertLevel).Append("\n");
            sb.Append("  CertificateName: ").Append(CertificateName).Append("\n");
            sb.Append("  CertificateSendCardAddress: ").Append(CertificateSendCardAddress).Append("\n");
            sb.Append("  CertificateVerifyStatus: ").Append(CertificateVerifyStatus).Append("\n");
            sb.Append("  InValidityPeriod: ").Append(InValidityPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloudResumeCertificateInfo);
        }

        /// <summary>
        /// Returns true if CloudResumeCertificateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CloudResumeCertificateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloudResumeCertificateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertificateCertLevel == input.CertificateCertLevel ||
                    (this.CertificateCertLevel != null &&
                    this.CertificateCertLevel.Equals(input.CertificateCertLevel))
                ) && 
                (
                    this.CertificateName == input.CertificateName ||
                    (this.CertificateName != null &&
                    this.CertificateName.Equals(input.CertificateName))
                ) && 
                (
                    this.CertificateSendCardAddress == input.CertificateSendCardAddress ||
                    (this.CertificateSendCardAddress != null &&
                    this.CertificateSendCardAddress.Equals(input.CertificateSendCardAddress))
                ) && 
                (
                    this.CertificateVerifyStatus == input.CertificateVerifyStatus ||
                    (this.CertificateVerifyStatus != null &&
                    this.CertificateVerifyStatus.Equals(input.CertificateVerifyStatus))
                ) && 
                (
                    this.InValidityPeriod == input.InValidityPeriod ||
                    (this.InValidityPeriod != null &&
                    this.InValidityPeriod.Equals(input.InValidityPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateCertLevel != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateCertLevel.GetHashCode();
                }
                if (this.CertificateName != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateName.GetHashCode();
                }
                if (this.CertificateSendCardAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateSendCardAddress.GetHashCode();
                }
                if (this.CertificateVerifyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateVerifyStatus.GetHashCode();
                }
                if (this.InValidityPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.InValidityPeriod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
