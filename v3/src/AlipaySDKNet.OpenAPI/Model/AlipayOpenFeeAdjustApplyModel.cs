/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenFeeAdjustApplyModel
    /// </summary>
    [DataContract(Name = "AlipayOpenFeeAdjustApplyModel")]
    public partial class AlipayOpenFeeAdjustApplyModel : IEquatable<AlipayOpenFeeAdjustApplyModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenFeeAdjustApplyModel" /> class.
        /// </summary>
        /// <param name="account">服务商代申请特殊费率的商家支付宝账户.</param>
        /// <param name="applicationFee">服务商代商家申请特殊费率的费率值（%），如0.38表示0.38%.</param>
        /// <param name="certDateLimitation">证件有效期，格式：yyyy-MM-dd，长期有效传入：9999-12-31.</param>
        /// <param name="certNo">对应证件类型（certType）的证件号，如营业执照为营业执照号.</param>
        /// <param name="certType">证件类型，枚举值为 餐饮服务许可证 FOOD_SERVICE_LICENSE， 食品卫生许可证 FOOD_HEALTH_LICENSE， 食品经营许可证 FOOD_BUSINESS_LICENSE， 食品流通许可证 FOOD_CIRCULATE_LICENSE， 食品生产许可证 FOOD_PRODUCTION_LICENS， 营业执照     DEFAULT_LICENSE， 烟草资质 TOBACCO_PRODUCTION_LICENSE.</param>
        /// <param name="cityCode">市.</param>
        /// <param name="detailAddress">详细地址.</param>
        /// <param name="districtCode">区/县.</param>
        /// <param name="productCode">服务商代商家申请调整费率的产品码.</param>
        /// <param name="provinceCode">省份.</param>
        public AlipayOpenFeeAdjustApplyModel(string account = default(string), string applicationFee = default(string), string certDateLimitation = default(string), string certNo = default(string), string certType = default(string), string cityCode = default(string), string detailAddress = default(string), string districtCode = default(string), string productCode = default(string), string provinceCode = default(string))
        {
            this.Account = account;
            this.ApplicationFee = applicationFee;
            this.CertDateLimitation = certDateLimitation;
            this.CertNo = certNo;
            this.CertType = certType;
            this.CityCode = cityCode;
            this.DetailAddress = detailAddress;
            this.DistrictCode = districtCode;
            this.ProductCode = productCode;
            this.ProvinceCode = provinceCode;
        }

        /// <summary>
        /// 服务商代申请特殊费率的商家支付宝账户
        /// </summary>
        /// <value>服务商代申请特殊费率的商家支付宝账户</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// 服务商代商家申请特殊费率的费率值（%），如0.38表示0.38%
        /// </summary>
        /// <value>服务商代商家申请特殊费率的费率值（%），如0.38表示0.38%</value>
        [DataMember(Name = "application_fee", EmitDefaultValue = false)]
        public string ApplicationFee { get; set; }

        /// <summary>
        /// 证件有效期，格式：yyyy-MM-dd，长期有效传入：9999-12-31
        /// </summary>
        /// <value>证件有效期，格式：yyyy-MM-dd，长期有效传入：9999-12-31</value>
        [DataMember(Name = "cert_date_limitation", EmitDefaultValue = false)]
        public string CertDateLimitation { get; set; }

        /// <summary>
        /// 对应证件类型（certType）的证件号，如营业执照为营业执照号
        /// </summary>
        /// <value>对应证件类型（certType）的证件号，如营业执照为营业执照号</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 证件类型，枚举值为 餐饮服务许可证 FOOD_SERVICE_LICENSE， 食品卫生许可证 FOOD_HEALTH_LICENSE， 食品经营许可证 FOOD_BUSINESS_LICENSE， 食品流通许可证 FOOD_CIRCULATE_LICENSE， 食品生产许可证 FOOD_PRODUCTION_LICENS， 营业执照     DEFAULT_LICENSE， 烟草资质 TOBACCO_PRODUCTION_LICENSE
        /// </summary>
        /// <value>证件类型，枚举值为 餐饮服务许可证 FOOD_SERVICE_LICENSE， 食品卫生许可证 FOOD_HEALTH_LICENSE， 食品经营许可证 FOOD_BUSINESS_LICENSE， 食品流通许可证 FOOD_CIRCULATE_LICENSE， 食品生产许可证 FOOD_PRODUCTION_LICENS， 营业执照     DEFAULT_LICENSE， 烟草资质 TOBACCO_PRODUCTION_LICENSE</value>
        [DataMember(Name = "cert_type", EmitDefaultValue = false)]
        public string CertType { get; set; }

        /// <summary>
        /// 市
        /// </summary>
        /// <value>市</value>
        [DataMember(Name = "city_code", EmitDefaultValue = false)]
        public string CityCode { get; set; }

        /// <summary>
        /// 详细地址
        /// </summary>
        /// <value>详细地址</value>
        [DataMember(Name = "detail_address", EmitDefaultValue = false)]
        public string DetailAddress { get; set; }

        /// <summary>
        /// 区/县
        /// </summary>
        /// <value>区/县</value>
        [DataMember(Name = "district_code", EmitDefaultValue = false)]
        public string DistrictCode { get; set; }

        /// <summary>
        /// 服务商代商家申请调整费率的产品码
        /// </summary>
        /// <value>服务商代商家申请调整费率的产品码</value>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// 省份
        /// </summary>
        /// <value>省份</value>
        [DataMember(Name = "province_code", EmitDefaultValue = false)]
        public string ProvinceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenFeeAdjustApplyModel {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ApplicationFee: ").Append(ApplicationFee).Append("\n");
            sb.Append("  CertDateLimitation: ").Append(CertDateLimitation).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  CertType: ").Append(CertType).Append("\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  DetailAddress: ").Append(DetailAddress).Append("\n");
            sb.Append("  DistrictCode: ").Append(DistrictCode).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProvinceCode: ").Append(ProvinceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenFeeAdjustApplyModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenFeeAdjustApplyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenFeeAdjustApplyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenFeeAdjustApplyModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.ApplicationFee == input.ApplicationFee ||
                    (this.ApplicationFee != null &&
                    this.ApplicationFee.Equals(input.ApplicationFee))
                ) && 
                (
                    this.CertDateLimitation == input.CertDateLimitation ||
                    (this.CertDateLimitation != null &&
                    this.CertDateLimitation.Equals(input.CertDateLimitation))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.CertType == input.CertType ||
                    (this.CertType != null &&
                    this.CertType.Equals(input.CertType))
                ) && 
                (
                    this.CityCode == input.CityCode ||
                    (this.CityCode != null &&
                    this.CityCode.Equals(input.CityCode))
                ) && 
                (
                    this.DetailAddress == input.DetailAddress ||
                    (this.DetailAddress != null &&
                    this.DetailAddress.Equals(input.DetailAddress))
                ) && 
                (
                    this.DistrictCode == input.DistrictCode ||
                    (this.DistrictCode != null &&
                    this.DistrictCode.Equals(input.DistrictCode))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProvinceCode == input.ProvinceCode ||
                    (this.ProvinceCode != null &&
                    this.ProvinceCode.Equals(input.ProvinceCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.ApplicationFee != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationFee.GetHashCode();
                }
                if (this.CertDateLimitation != null)
                {
                    hashCode = (hashCode * 59) + this.CertDateLimitation.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.CertType != null)
                {
                    hashCode = (hashCode * 59) + this.CertType.GetHashCode();
                }
                if (this.CityCode != null)
                {
                    hashCode = (hashCode * 59) + this.CityCode.GetHashCode();
                }
                if (this.DetailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DetailAddress.GetHashCode();
                }
                if (this.DistrictCode != null)
                {
                    hashCode = (hashCode * 59) + this.DistrictCode.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.ProvinceCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProvinceCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
