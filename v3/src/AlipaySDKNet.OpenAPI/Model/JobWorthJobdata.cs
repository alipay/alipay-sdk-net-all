/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// JobWorthJobdata
    /// </summary>
    [DataContract(Name = "JobWorthJobdata")]
    public partial class JobWorthJobdata : IEquatable<JobWorthJobdata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobWorthJobdata" /> class.
        /// </summary>
        /// <param name="certificateGrantInstitution">证书发证机构.</param>
        /// <param name="certificateId">证书编号.</param>
        /// <param name="certificateLevel">证书等级：中文.</param>
        /// <param name="certificateName">证书名称.</param>
        /// <param name="certificatePicId">工作证图片上传接口返回的id.</param>
        /// <param name="companyName">公司名称.</param>
        /// <param name="degree">学历，可以用以下字段HIGHSCHOOL_AND_BELOW（高中及以下），POLYTECHNIC（中专），COLLEGE（大专），BACHELOR（本科），MASTER（硕士），DOCTOR_AND_ABOVE（博士及以上）.</param>
        /// <param name="deliveryPositionId">商户侧投递岗位id.</param>
        /// <param name="deliveryTime">投递时间戳.</param>
        /// <param name="educationStatus">教育状态只有两种，GRADUATE(毕业)，STUDY（未毕业）.</param>
        /// <param name="entryNo">报名流水号.</param>
        /// <param name="examScore">考试分数.</param>
        /// <param name="headPicId">工作证图片上传接口返回的id.</param>
        /// <param name="intentionCity">求职意向，城市的adccode  例如110000（北京市）.</param>
        /// <param name="intentionCityName">意向城市名，例如北京市，传入北京即可，大理白族自治州，传入大理即可.</param>
        /// <param name="issueDate">发证日期，ms时间戳.</param>
        /// <param name="jobId">岗位对应的职业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3.</param>
        /// <param name="jobName">职业名称.</param>
        /// <param name="kaJobId">商户职业Id.</param>
        /// <param name="kaJobName">商户职业名称.</param>
        /// <param name="kaProfessionId">商户行业Id.</param>
        /// <param name="kaProfessionName">商户行业名称.</param>
        /// <param name="location">省份.</param>
        /// <param name="month">毕业的月.</param>
        /// <param name="onceToken">对应类型相关接口生成.</param>
        /// <param name="professionId">岗位对应的行业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3.</param>
        /// <param name="professionName">行业名称.</param>
        /// <param name="salaryMax">求职意向，薪水范围，不能低于salary_min.</param>
        /// <param name="salaryMin">求职意向，薪水范围，不能高于salary_max.</param>
        /// <param name="salaryUnit">薪资单位，元/日(DAY)、元/次(TIME)、元/月(MONTH)、元/小时(HOUR)、元/件 (NUM)、元/周 (WEEK)、其他 (OTHER).</param>
        /// <param name="schoolName">学校.</param>
        /// <param name="skillName">用英文逗号分隔，最多6项.</param>
        /// <param name="startTime">参加工作的时间，格式形如 2011-07.</param>
        /// <param name="type">信息类型.</param>
        /// <param name="validDateEnd">有效期：开始结束 ms 时间戳.</param>
        /// <param name="validDateStart">有效期：开始时间 ms时间戳.</param>
        /// <param name="verifyStatus">校验状态.</param>
        /// <param name="workDesc">工作描述.</param>
        /// <param name="workEndTime">工作结束时间，毫秒级时间戳.</param>
        /// <param name="workPlace">工作经历工作地.</param>
        /// <param name="workProperty">岗位属性：全职(FULL_TIME)或者兼职(PART_TIME).</param>
        /// <param name="workStartTime">工作开始时间，毫秒级时间戳.</param>
        /// <param name="year">毕业的年.</param>
        public JobWorthJobdata(string certificateGrantInstitution = default(string), string certificateId = default(string), string certificateLevel = default(string), string certificateName = default(string), string certificatePicId = default(string), string companyName = default(string), string degree = default(string), string deliveryPositionId = default(string), int deliveryTime = default(int), string educationStatus = default(string), string entryNo = default(string), string examScore = default(string), string headPicId = default(string), string intentionCity = default(string), string intentionCityName = default(string), string issueDate = default(string), string jobId = default(string), string jobName = default(string), string kaJobId = default(string), string kaJobName = default(string), string kaProfessionId = default(string), string kaProfessionName = default(string), string location = default(string), string month = default(string), string onceToken = default(string), string professionId = default(string), string professionName = default(string), string salaryMax = default(string), string salaryMin = default(string), string salaryUnit = default(string), string schoolName = default(string), string skillName = default(string), string startTime = default(string), string type = default(string), string validDateEnd = default(string), string validDateStart = default(string), string verifyStatus = default(string), string workDesc = default(string), string workEndTime = default(string), string workPlace = default(string), string workProperty = default(string), string workStartTime = default(string), string year = default(string))
        {
            this.CertificateGrantInstitution = certificateGrantInstitution;
            this.CertificateId = certificateId;
            this.CertificateLevel = certificateLevel;
            this.CertificateName = certificateName;
            this.CertificatePicId = certificatePicId;
            this.CompanyName = companyName;
            this.Degree = degree;
            this.DeliveryPositionId = deliveryPositionId;
            this.DeliveryTime = deliveryTime;
            this.EducationStatus = educationStatus;
            this.EntryNo = entryNo;
            this.ExamScore = examScore;
            this.HeadPicId = headPicId;
            this.IntentionCity = intentionCity;
            this.IntentionCityName = intentionCityName;
            this.IssueDate = issueDate;
            this.JobId = jobId;
            this.JobName = jobName;
            this.KaJobId = kaJobId;
            this.KaJobName = kaJobName;
            this.KaProfessionId = kaProfessionId;
            this.KaProfessionName = kaProfessionName;
            this.Location = location;
            this.Month = month;
            this.OnceToken = onceToken;
            this.ProfessionId = professionId;
            this.ProfessionName = professionName;
            this.SalaryMax = salaryMax;
            this.SalaryMin = salaryMin;
            this.SalaryUnit = salaryUnit;
            this.SchoolName = schoolName;
            this.SkillName = skillName;
            this.StartTime = startTime;
            this.Type = type;
            this.ValidDateEnd = validDateEnd;
            this.ValidDateStart = validDateStart;
            this.VerifyStatus = verifyStatus;
            this.WorkDesc = workDesc;
            this.WorkEndTime = workEndTime;
            this.WorkPlace = workPlace;
            this.WorkProperty = workProperty;
            this.WorkStartTime = workStartTime;
            this.Year = year;
        }

        /// <summary>
        /// 证书发证机构
        /// </summary>
        /// <value>证书发证机构</value>
        [DataMember(Name = "certificate_grant_institution", EmitDefaultValue = false)]
        public string CertificateGrantInstitution { get; set; }

        /// <summary>
        /// 证书编号
        /// </summary>
        /// <value>证书编号</value>
        [DataMember(Name = "certificate_id", EmitDefaultValue = false)]
        public string CertificateId { get; set; }

        /// <summary>
        /// 证书等级：中文
        /// </summary>
        /// <value>证书等级：中文</value>
        [DataMember(Name = "certificate_level", EmitDefaultValue = false)]
        public string CertificateLevel { get; set; }

        /// <summary>
        /// 证书名称
        /// </summary>
        /// <value>证书名称</value>
        [DataMember(Name = "certificate_name", EmitDefaultValue = false)]
        public string CertificateName { get; set; }

        /// <summary>
        /// 工作证图片上传接口返回的id
        /// </summary>
        /// <value>工作证图片上传接口返回的id</value>
        [DataMember(Name = "certificate_pic_id", EmitDefaultValue = false)]
        public string CertificatePicId { get; set; }

        /// <summary>
        /// 公司名称
        /// </summary>
        /// <value>公司名称</value>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// 学历，可以用以下字段HIGHSCHOOL_AND_BELOW（高中及以下），POLYTECHNIC（中专），COLLEGE（大专），BACHELOR（本科），MASTER（硕士），DOCTOR_AND_ABOVE（博士及以上）
        /// </summary>
        /// <value>学历，可以用以下字段HIGHSCHOOL_AND_BELOW（高中及以下），POLYTECHNIC（中专），COLLEGE（大专），BACHELOR（本科），MASTER（硕士），DOCTOR_AND_ABOVE（博士及以上）</value>
        [DataMember(Name = "degree", EmitDefaultValue = false)]
        public string Degree { get; set; }

        /// <summary>
        /// 商户侧投递岗位id
        /// </summary>
        /// <value>商户侧投递岗位id</value>
        [DataMember(Name = "delivery_position_id", EmitDefaultValue = false)]
        public string DeliveryPositionId { get; set; }

        /// <summary>
        /// 投递时间戳
        /// </summary>
        /// <value>投递时间戳</value>
        [DataMember(Name = "delivery_time", EmitDefaultValue = false)]
        public int DeliveryTime { get; set; }

        /// <summary>
        /// 教育状态只有两种，GRADUATE(毕业)，STUDY（未毕业）
        /// </summary>
        /// <value>教育状态只有两种，GRADUATE(毕业)，STUDY（未毕业）</value>
        [DataMember(Name = "education_status", EmitDefaultValue = false)]
        public string EducationStatus { get; set; }

        /// <summary>
        /// 报名流水号
        /// </summary>
        /// <value>报名流水号</value>
        [DataMember(Name = "entry_no", EmitDefaultValue = false)]
        public string EntryNo { get; set; }

        /// <summary>
        /// 考试分数
        /// </summary>
        /// <value>考试分数</value>
        [DataMember(Name = "exam_score", EmitDefaultValue = false)]
        public string ExamScore { get; set; }

        /// <summary>
        /// 工作证图片上传接口返回的id
        /// </summary>
        /// <value>工作证图片上传接口返回的id</value>
        [DataMember(Name = "head_pic_id", EmitDefaultValue = false)]
        public string HeadPicId { get; set; }

        /// <summary>
        /// 求职意向，城市的adccode  例如110000（北京市）
        /// </summary>
        /// <value>求职意向，城市的adccode  例如110000（北京市）</value>
        [DataMember(Name = "intention_city", EmitDefaultValue = false)]
        public string IntentionCity { get; set; }

        /// <summary>
        /// 意向城市名，例如北京市，传入北京即可，大理白族自治州，传入大理即可
        /// </summary>
        /// <value>意向城市名，例如北京市，传入北京即可，大理白族自治州，传入大理即可</value>
        [DataMember(Name = "intention_city_name", EmitDefaultValue = false)]
        public string IntentionCityName { get; set; }

        /// <summary>
        /// 发证日期，ms时间戳
        /// </summary>
        /// <value>发证日期，ms时间戳</value>
        [DataMember(Name = "issue_date", EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// 岗位对应的职业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3
        /// </summary>
        /// <value>岗位对应的职业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3</value>
        [DataMember(Name = "job_id", EmitDefaultValue = false)]
        public string JobId { get; set; }

        /// <summary>
        /// 职业名称
        /// </summary>
        /// <value>职业名称</value>
        [DataMember(Name = "job_name", EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// 商户职业Id
        /// </summary>
        /// <value>商户职业Id</value>
        [DataMember(Name = "ka_job_id", EmitDefaultValue = false)]
        public string KaJobId { get; set; }

        /// <summary>
        /// 商户职业名称
        /// </summary>
        /// <value>商户职业名称</value>
        [DataMember(Name = "ka_job_name", EmitDefaultValue = false)]
        public string KaJobName { get; set; }

        /// <summary>
        /// 商户行业Id
        /// </summary>
        /// <value>商户行业Id</value>
        [DataMember(Name = "ka_profession_id", EmitDefaultValue = false)]
        public string KaProfessionId { get; set; }

        /// <summary>
        /// 商户行业名称
        /// </summary>
        /// <value>商户行业名称</value>
        [DataMember(Name = "ka_profession_name", EmitDefaultValue = false)]
        public string KaProfessionName { get; set; }

        /// <summary>
        /// 省份
        /// </summary>
        /// <value>省份</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// 毕业的月
        /// </summary>
        /// <value>毕业的月</value>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public string Month { get; set; }

        /// <summary>
        /// 对应类型相关接口生成
        /// </summary>
        /// <value>对应类型相关接口生成</value>
        [DataMember(Name = "once_token", EmitDefaultValue = false)]
        public string OnceToken { get; set; }

        /// <summary>
        /// 岗位对应的行业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3
        /// </summary>
        /// <value>岗位对应的行业id，字段参考https://www.yuque.com/wx3dkp/gwckr4/bs03t3</value>
        [DataMember(Name = "profession_id", EmitDefaultValue = false)]
        public string ProfessionId { get; set; }

        /// <summary>
        /// 行业名称
        /// </summary>
        /// <value>行业名称</value>
        [DataMember(Name = "profession_name", EmitDefaultValue = false)]
        public string ProfessionName { get; set; }

        /// <summary>
        /// 求职意向，薪水范围，不能低于salary_min
        /// </summary>
        /// <value>求职意向，薪水范围，不能低于salary_min</value>
        [DataMember(Name = "salary_max", EmitDefaultValue = false)]
        public string SalaryMax { get; set; }

        /// <summary>
        /// 求职意向，薪水范围，不能高于salary_max
        /// </summary>
        /// <value>求职意向，薪水范围，不能高于salary_max</value>
        [DataMember(Name = "salary_min", EmitDefaultValue = false)]
        public string SalaryMin { get; set; }

        /// <summary>
        /// 薪资单位，元/日(DAY)、元/次(TIME)、元/月(MONTH)、元/小时(HOUR)、元/件 (NUM)、元/周 (WEEK)、其他 (OTHER)
        /// </summary>
        /// <value>薪资单位，元/日(DAY)、元/次(TIME)、元/月(MONTH)、元/小时(HOUR)、元/件 (NUM)、元/周 (WEEK)、其他 (OTHER)</value>
        [DataMember(Name = "salary_unit", EmitDefaultValue = false)]
        public string SalaryUnit { get; set; }

        /// <summary>
        /// 学校
        /// </summary>
        /// <value>学校</value>
        [DataMember(Name = "school_name", EmitDefaultValue = false)]
        public string SchoolName { get; set; }

        /// <summary>
        /// 用英文逗号分隔，最多6项
        /// </summary>
        /// <value>用英文逗号分隔，最多6项</value>
        [DataMember(Name = "skill_name", EmitDefaultValue = false)]
        public string SkillName { get; set; }

        /// <summary>
        /// 参加工作的时间，格式形如 2011-07
        /// </summary>
        /// <value>参加工作的时间，格式形如 2011-07</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// 信息类型
        /// </summary>
        /// <value>信息类型</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// 有效期：开始结束 ms 时间戳
        /// </summary>
        /// <value>有效期：开始结束 ms 时间戳</value>
        [DataMember(Name = "valid_date_end", EmitDefaultValue = false)]
        public string ValidDateEnd { get; set; }

        /// <summary>
        /// 有效期：开始时间 ms时间戳
        /// </summary>
        /// <value>有效期：开始时间 ms时间戳</value>
        [DataMember(Name = "valid_date_start", EmitDefaultValue = false)]
        public string ValidDateStart { get; set; }

        /// <summary>
        /// 校验状态
        /// </summary>
        /// <value>校验状态</value>
        [DataMember(Name = "verify_status", EmitDefaultValue = false)]
        public string VerifyStatus { get; set; }

        /// <summary>
        /// 工作描述
        /// </summary>
        /// <value>工作描述</value>
        [DataMember(Name = "work_desc", EmitDefaultValue = false)]
        public string WorkDesc { get; set; }

        /// <summary>
        /// 工作结束时间，毫秒级时间戳
        /// </summary>
        /// <value>工作结束时间，毫秒级时间戳</value>
        [DataMember(Name = "work_end_time", EmitDefaultValue = false)]
        public string WorkEndTime { get; set; }

        /// <summary>
        /// 工作经历工作地
        /// </summary>
        /// <value>工作经历工作地</value>
        [DataMember(Name = "work_place", EmitDefaultValue = false)]
        public string WorkPlace { get; set; }

        /// <summary>
        /// 岗位属性：全职(FULL_TIME)或者兼职(PART_TIME)
        /// </summary>
        /// <value>岗位属性：全职(FULL_TIME)或者兼职(PART_TIME)</value>
        [DataMember(Name = "work_property", EmitDefaultValue = false)]
        public string WorkProperty { get; set; }

        /// <summary>
        /// 工作开始时间，毫秒级时间戳
        /// </summary>
        /// <value>工作开始时间，毫秒级时间戳</value>
        [DataMember(Name = "work_start_time", EmitDefaultValue = false)]
        public string WorkStartTime { get; set; }

        /// <summary>
        /// 毕业的年
        /// </summary>
        /// <value>毕业的年</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public string Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobWorthJobdata {\n");
            sb.Append("  CertificateGrantInstitution: ").Append(CertificateGrantInstitution).Append("\n");
            sb.Append("  CertificateId: ").Append(CertificateId).Append("\n");
            sb.Append("  CertificateLevel: ").Append(CertificateLevel).Append("\n");
            sb.Append("  CertificateName: ").Append(CertificateName).Append("\n");
            sb.Append("  CertificatePicId: ").Append(CertificatePicId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  DeliveryPositionId: ").Append(DeliveryPositionId).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  EducationStatus: ").Append(EducationStatus).Append("\n");
            sb.Append("  EntryNo: ").Append(EntryNo).Append("\n");
            sb.Append("  ExamScore: ").Append(ExamScore).Append("\n");
            sb.Append("  HeadPicId: ").Append(HeadPicId).Append("\n");
            sb.Append("  IntentionCity: ").Append(IntentionCity).Append("\n");
            sb.Append("  IntentionCityName: ").Append(IntentionCityName).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  KaJobId: ").Append(KaJobId).Append("\n");
            sb.Append("  KaJobName: ").Append(KaJobName).Append("\n");
            sb.Append("  KaProfessionId: ").Append(KaProfessionId).Append("\n");
            sb.Append("  KaProfessionName: ").Append(KaProfessionName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  OnceToken: ").Append(OnceToken).Append("\n");
            sb.Append("  ProfessionId: ").Append(ProfessionId).Append("\n");
            sb.Append("  ProfessionName: ").Append(ProfessionName).Append("\n");
            sb.Append("  SalaryMax: ").Append(SalaryMax).Append("\n");
            sb.Append("  SalaryMin: ").Append(SalaryMin).Append("\n");
            sb.Append("  SalaryUnit: ").Append(SalaryUnit).Append("\n");
            sb.Append("  SchoolName: ").Append(SchoolName).Append("\n");
            sb.Append("  SkillName: ").Append(SkillName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidDateEnd: ").Append(ValidDateEnd).Append("\n");
            sb.Append("  ValidDateStart: ").Append(ValidDateStart).Append("\n");
            sb.Append("  VerifyStatus: ").Append(VerifyStatus).Append("\n");
            sb.Append("  WorkDesc: ").Append(WorkDesc).Append("\n");
            sb.Append("  WorkEndTime: ").Append(WorkEndTime).Append("\n");
            sb.Append("  WorkPlace: ").Append(WorkPlace).Append("\n");
            sb.Append("  WorkProperty: ").Append(WorkProperty).Append("\n");
            sb.Append("  WorkStartTime: ").Append(WorkStartTime).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobWorthJobdata);
        }

        /// <summary>
        /// Returns true if JobWorthJobdata instances are equal
        /// </summary>
        /// <param name="input">Instance of JobWorthJobdata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobWorthJobdata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertificateGrantInstitution == input.CertificateGrantInstitution ||
                    (this.CertificateGrantInstitution != null &&
                    this.CertificateGrantInstitution.Equals(input.CertificateGrantInstitution))
                ) && 
                (
                    this.CertificateId == input.CertificateId ||
                    (this.CertificateId != null &&
                    this.CertificateId.Equals(input.CertificateId))
                ) && 
                (
                    this.CertificateLevel == input.CertificateLevel ||
                    (this.CertificateLevel != null &&
                    this.CertificateLevel.Equals(input.CertificateLevel))
                ) && 
                (
                    this.CertificateName == input.CertificateName ||
                    (this.CertificateName != null &&
                    this.CertificateName.Equals(input.CertificateName))
                ) && 
                (
                    this.CertificatePicId == input.CertificatePicId ||
                    (this.CertificatePicId != null &&
                    this.CertificatePicId.Equals(input.CertificatePicId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Degree == input.Degree ||
                    (this.Degree != null &&
                    this.Degree.Equals(input.Degree))
                ) && 
                (
                    this.DeliveryPositionId == input.DeliveryPositionId ||
                    (this.DeliveryPositionId != null &&
                    this.DeliveryPositionId.Equals(input.DeliveryPositionId))
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    this.DeliveryTime.Equals(input.DeliveryTime)
                ) && 
                (
                    this.EducationStatus == input.EducationStatus ||
                    (this.EducationStatus != null &&
                    this.EducationStatus.Equals(input.EducationStatus))
                ) && 
                (
                    this.EntryNo == input.EntryNo ||
                    (this.EntryNo != null &&
                    this.EntryNo.Equals(input.EntryNo))
                ) && 
                (
                    this.ExamScore == input.ExamScore ||
                    (this.ExamScore != null &&
                    this.ExamScore.Equals(input.ExamScore))
                ) && 
                (
                    this.HeadPicId == input.HeadPicId ||
                    (this.HeadPicId != null &&
                    this.HeadPicId.Equals(input.HeadPicId))
                ) && 
                (
                    this.IntentionCity == input.IntentionCity ||
                    (this.IntentionCity != null &&
                    this.IntentionCity.Equals(input.IntentionCity))
                ) && 
                (
                    this.IntentionCityName == input.IntentionCityName ||
                    (this.IntentionCityName != null &&
                    this.IntentionCityName.Equals(input.IntentionCityName))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.KaJobId == input.KaJobId ||
                    (this.KaJobId != null &&
                    this.KaJobId.Equals(input.KaJobId))
                ) && 
                (
                    this.KaJobName == input.KaJobName ||
                    (this.KaJobName != null &&
                    this.KaJobName.Equals(input.KaJobName))
                ) && 
                (
                    this.KaProfessionId == input.KaProfessionId ||
                    (this.KaProfessionId != null &&
                    this.KaProfessionId.Equals(input.KaProfessionId))
                ) && 
                (
                    this.KaProfessionName == input.KaProfessionName ||
                    (this.KaProfessionName != null &&
                    this.KaProfessionName.Equals(input.KaProfessionName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.OnceToken == input.OnceToken ||
                    (this.OnceToken != null &&
                    this.OnceToken.Equals(input.OnceToken))
                ) && 
                (
                    this.ProfessionId == input.ProfessionId ||
                    (this.ProfessionId != null &&
                    this.ProfessionId.Equals(input.ProfessionId))
                ) && 
                (
                    this.ProfessionName == input.ProfessionName ||
                    (this.ProfessionName != null &&
                    this.ProfessionName.Equals(input.ProfessionName))
                ) && 
                (
                    this.SalaryMax == input.SalaryMax ||
                    (this.SalaryMax != null &&
                    this.SalaryMax.Equals(input.SalaryMax))
                ) && 
                (
                    this.SalaryMin == input.SalaryMin ||
                    (this.SalaryMin != null &&
                    this.SalaryMin.Equals(input.SalaryMin))
                ) && 
                (
                    this.SalaryUnit == input.SalaryUnit ||
                    (this.SalaryUnit != null &&
                    this.SalaryUnit.Equals(input.SalaryUnit))
                ) && 
                (
                    this.SchoolName == input.SchoolName ||
                    (this.SchoolName != null &&
                    this.SchoolName.Equals(input.SchoolName))
                ) && 
                (
                    this.SkillName == input.SkillName ||
                    (this.SkillName != null &&
                    this.SkillName.Equals(input.SkillName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ValidDateEnd == input.ValidDateEnd ||
                    (this.ValidDateEnd != null &&
                    this.ValidDateEnd.Equals(input.ValidDateEnd))
                ) && 
                (
                    this.ValidDateStart == input.ValidDateStart ||
                    (this.ValidDateStart != null &&
                    this.ValidDateStart.Equals(input.ValidDateStart))
                ) && 
                (
                    this.VerifyStatus == input.VerifyStatus ||
                    (this.VerifyStatus != null &&
                    this.VerifyStatus.Equals(input.VerifyStatus))
                ) && 
                (
                    this.WorkDesc == input.WorkDesc ||
                    (this.WorkDesc != null &&
                    this.WorkDesc.Equals(input.WorkDesc))
                ) && 
                (
                    this.WorkEndTime == input.WorkEndTime ||
                    (this.WorkEndTime != null &&
                    this.WorkEndTime.Equals(input.WorkEndTime))
                ) && 
                (
                    this.WorkPlace == input.WorkPlace ||
                    (this.WorkPlace != null &&
                    this.WorkPlace.Equals(input.WorkPlace))
                ) && 
                (
                    this.WorkProperty == input.WorkProperty ||
                    (this.WorkProperty != null &&
                    this.WorkProperty.Equals(input.WorkProperty))
                ) && 
                (
                    this.WorkStartTime == input.WorkStartTime ||
                    (this.WorkStartTime != null &&
                    this.WorkStartTime.Equals(input.WorkStartTime))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateGrantInstitution != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateGrantInstitution.GetHashCode();
                }
                if (this.CertificateId != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateId.GetHashCode();
                }
                if (this.CertificateLevel != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateLevel.GetHashCode();
                }
                if (this.CertificateName != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateName.GetHashCode();
                }
                if (this.CertificatePicId != null)
                {
                    hashCode = (hashCode * 59) + this.CertificatePicId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Degree != null)
                {
                    hashCode = (hashCode * 59) + this.Degree.GetHashCode();
                }
                if (this.DeliveryPositionId != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryPositionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeliveryTime.GetHashCode();
                if (this.EducationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.EducationStatus.GetHashCode();
                }
                if (this.EntryNo != null)
                {
                    hashCode = (hashCode * 59) + this.EntryNo.GetHashCode();
                }
                if (this.ExamScore != null)
                {
                    hashCode = (hashCode * 59) + this.ExamScore.GetHashCode();
                }
                if (this.HeadPicId != null)
                {
                    hashCode = (hashCode * 59) + this.HeadPicId.GetHashCode();
                }
                if (this.IntentionCity != null)
                {
                    hashCode = (hashCode * 59) + this.IntentionCity.GetHashCode();
                }
                if (this.IntentionCityName != null)
                {
                    hashCode = (hashCode * 59) + this.IntentionCityName.GetHashCode();
                }
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.JobId != null)
                {
                    hashCode = (hashCode * 59) + this.JobId.GetHashCode();
                }
                if (this.JobName != null)
                {
                    hashCode = (hashCode * 59) + this.JobName.GetHashCode();
                }
                if (this.KaJobId != null)
                {
                    hashCode = (hashCode * 59) + this.KaJobId.GetHashCode();
                }
                if (this.KaJobName != null)
                {
                    hashCode = (hashCode * 59) + this.KaJobName.GetHashCode();
                }
                if (this.KaProfessionId != null)
                {
                    hashCode = (hashCode * 59) + this.KaProfessionId.GetHashCode();
                }
                if (this.KaProfessionName != null)
                {
                    hashCode = (hashCode * 59) + this.KaProfessionName.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Month != null)
                {
                    hashCode = (hashCode * 59) + this.Month.GetHashCode();
                }
                if (this.OnceToken != null)
                {
                    hashCode = (hashCode * 59) + this.OnceToken.GetHashCode();
                }
                if (this.ProfessionId != null)
                {
                    hashCode = (hashCode * 59) + this.ProfessionId.GetHashCode();
                }
                if (this.ProfessionName != null)
                {
                    hashCode = (hashCode * 59) + this.ProfessionName.GetHashCode();
                }
                if (this.SalaryMax != null)
                {
                    hashCode = (hashCode * 59) + this.SalaryMax.GetHashCode();
                }
                if (this.SalaryMin != null)
                {
                    hashCode = (hashCode * 59) + this.SalaryMin.GetHashCode();
                }
                if (this.SalaryUnit != null)
                {
                    hashCode = (hashCode * 59) + this.SalaryUnit.GetHashCode();
                }
                if (this.SchoolName != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolName.GetHashCode();
                }
                if (this.SkillName != null)
                {
                    hashCode = (hashCode * 59) + this.SkillName.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.ValidDateEnd != null)
                {
                    hashCode = (hashCode * 59) + this.ValidDateEnd.GetHashCode();
                }
                if (this.ValidDateStart != null)
                {
                    hashCode = (hashCode * 59) + this.ValidDateStart.GetHashCode();
                }
                if (this.VerifyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.VerifyStatus.GetHashCode();
                }
                if (this.WorkDesc != null)
                {
                    hashCode = (hashCode * 59) + this.WorkDesc.GetHashCode();
                }
                if (this.WorkEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.WorkEndTime.GetHashCode();
                }
                if (this.WorkPlace != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPlace.GetHashCode();
                }
                if (this.WorkProperty != null)
                {
                    hashCode = (hashCode * 59) + this.WorkProperty.GetHashCode();
                }
                if (this.WorkStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.WorkStartTime.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
