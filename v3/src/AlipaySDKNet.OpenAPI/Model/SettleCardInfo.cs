/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SettleCardInfo
    /// </summary>
    [DataContract(Name = "SettleCardInfo")]
    public partial class SettleCardInfo : IEquatable<SettleCardInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettleCardInfo" /> class.
        /// </summary>
        /// <param name="accountBranchName">开户支行名.</param>
        /// <param name="accountHolderName">卡户名.</param>
        /// <param name="accountInstCity">开户行所在地-市.</param>
        /// <param name="accountInstId">开户行简称缩写.</param>
        /// <param name="accountInstName">银行名称.</param>
        /// <param name="accountInstProvince">开户行所在地-省.</param>
        /// <param name="accountNo">银行卡号.</param>
        /// <param name="accountType">卡类型  借记卡-DC  信用卡-CC.</param>
        /// <param name="bankCode">联行号.</param>
        /// <param name="usageType">账号使用类型  对公-01  对私-02.</param>
        public SettleCardInfo(string accountBranchName = default(string), string accountHolderName = default(string), string accountInstCity = default(string), string accountInstId = default(string), string accountInstName = default(string), string accountInstProvince = default(string), string accountNo = default(string), string accountType = default(string), string bankCode = default(string), string usageType = default(string))
        {
            this.AccountBranchName = accountBranchName;
            this.AccountHolderName = accountHolderName;
            this.AccountInstCity = accountInstCity;
            this.AccountInstId = accountInstId;
            this.AccountInstName = accountInstName;
            this.AccountInstProvince = accountInstProvince;
            this.AccountNo = accountNo;
            this.AccountType = accountType;
            this.BankCode = bankCode;
            this.UsageType = usageType;
        }

        /// <summary>
        /// 开户支行名
        /// </summary>
        /// <value>开户支行名</value>
        [DataMember(Name = "account_branch_name", EmitDefaultValue = false)]
        public string AccountBranchName { get; set; }

        /// <summary>
        /// 卡户名
        /// </summary>
        /// <value>卡户名</value>
        [DataMember(Name = "account_holder_name", EmitDefaultValue = false)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// 开户行所在地-市
        /// </summary>
        /// <value>开户行所在地-市</value>
        [DataMember(Name = "account_inst_city", EmitDefaultValue = false)]
        public string AccountInstCity { get; set; }

        /// <summary>
        /// 开户行简称缩写
        /// </summary>
        /// <value>开户行简称缩写</value>
        [DataMember(Name = "account_inst_id", EmitDefaultValue = false)]
        public string AccountInstId { get; set; }

        /// <summary>
        /// 银行名称
        /// </summary>
        /// <value>银行名称</value>
        [DataMember(Name = "account_inst_name", EmitDefaultValue = false)]
        public string AccountInstName { get; set; }

        /// <summary>
        /// 开户行所在地-省
        /// </summary>
        /// <value>开户行所在地-省</value>
        [DataMember(Name = "account_inst_province", EmitDefaultValue = false)]
        public string AccountInstProvince { get; set; }

        /// <summary>
        /// 银行卡号
        /// </summary>
        /// <value>银行卡号</value>
        [DataMember(Name = "account_no", EmitDefaultValue = false)]
        public string AccountNo { get; set; }

        /// <summary>
        /// 卡类型  借记卡-DC  信用卡-CC
        /// </summary>
        /// <value>卡类型  借记卡-DC  信用卡-CC</value>
        [DataMember(Name = "account_type", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// 联行号
        /// </summary>
        /// <value>联行号</value>
        [DataMember(Name = "bank_code", EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// 账号使用类型  对公-01  对私-02
        /// </summary>
        /// <value>账号使用类型  对公-01  对私-02</value>
        [DataMember(Name = "usage_type", EmitDefaultValue = false)]
        public string UsageType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettleCardInfo {\n");
            sb.Append("  AccountBranchName: ").Append(AccountBranchName).Append("\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  AccountInstCity: ").Append(AccountInstCity).Append("\n");
            sb.Append("  AccountInstId: ").Append(AccountInstId).Append("\n");
            sb.Append("  AccountInstName: ").Append(AccountInstName).Append("\n");
            sb.Append("  AccountInstProvince: ").Append(AccountInstProvince).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettleCardInfo);
        }

        /// <summary>
        /// Returns true if SettleCardInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SettleCardInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettleCardInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountBranchName == input.AccountBranchName ||
                    (this.AccountBranchName != null &&
                    this.AccountBranchName.Equals(input.AccountBranchName))
                ) && 
                (
                    this.AccountHolderName == input.AccountHolderName ||
                    (this.AccountHolderName != null &&
                    this.AccountHolderName.Equals(input.AccountHolderName))
                ) && 
                (
                    this.AccountInstCity == input.AccountInstCity ||
                    (this.AccountInstCity != null &&
                    this.AccountInstCity.Equals(input.AccountInstCity))
                ) && 
                (
                    this.AccountInstId == input.AccountInstId ||
                    (this.AccountInstId != null &&
                    this.AccountInstId.Equals(input.AccountInstId))
                ) && 
                (
                    this.AccountInstName == input.AccountInstName ||
                    (this.AccountInstName != null &&
                    this.AccountInstName.Equals(input.AccountInstName))
                ) && 
                (
                    this.AccountInstProvince == input.AccountInstProvince ||
                    (this.AccountInstProvince != null &&
                    this.AccountInstProvince.Equals(input.AccountInstProvince))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.UsageType == input.UsageType ||
                    (this.UsageType != null &&
                    this.UsageType.Equals(input.UsageType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountBranchName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountBranchName.GetHashCode();
                }
                if (this.AccountHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolderName.GetHashCode();
                }
                if (this.AccountInstCity != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInstCity.GetHashCode();
                }
                if (this.AccountInstId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInstId.GetHashCode();
                }
                if (this.AccountInstName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInstName.GetHashCode();
                }
                if (this.AccountInstProvince != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInstProvince.GetHashCode();
                }
                if (this.AccountNo != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNo.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.BankCode != null)
                {
                    hashCode = (hashCode * 59) + this.BankCode.GetHashCode();
                }
                if (this.UsageType != null)
                {
                    hashCode = (hashCode * 59) + this.UsageType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
