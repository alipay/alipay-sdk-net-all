/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MiniPackageInfo
    /// </summary>
    [DataContract(Name = "MiniPackageInfo")]
    public partial class MiniPackageInfo : IEquatable<MiniPackageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MiniPackageInfo" /> class.
        /// </summary>
        /// <param name="docUrl">功能包文档地址.</param>
        /// <param name="packageDesc">功能包描述.</param>
        /// <param name="packageName">功能包名称.</param>
        /// <param name="packageOpenType">功能包开通方式.</param>
        /// <param name="status">功能包签约状态.</param>
        public MiniPackageInfo(string docUrl = default(string), string packageDesc = default(string), string packageName = default(string), string packageOpenType = default(string), string status = default(string))
        {
            this.DocUrl = docUrl;
            this.PackageDesc = packageDesc;
            this.PackageName = packageName;
            this.PackageOpenType = packageOpenType;
            this.Status = status;
        }

        /// <summary>
        /// 功能包文档地址
        /// </summary>
        /// <value>功能包文档地址</value>
        [DataMember(Name = "doc_url", EmitDefaultValue = false)]
        public string DocUrl { get; set; }

        /// <summary>
        /// 功能包描述
        /// </summary>
        /// <value>功能包描述</value>
        [DataMember(Name = "package_desc", EmitDefaultValue = false)]
        public string PackageDesc { get; set; }

        /// <summary>
        /// 功能包名称
        /// </summary>
        /// <value>功能包名称</value>
        [DataMember(Name = "package_name", EmitDefaultValue = false)]
        public string PackageName { get; set; }

        /// <summary>
        /// 功能包开通方式
        /// </summary>
        /// <value>功能包开通方式</value>
        [DataMember(Name = "package_open_type", EmitDefaultValue = false)]
        public string PackageOpenType { get; set; }

        /// <summary>
        /// 功能包签约状态
        /// </summary>
        /// <value>功能包签约状态</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MiniPackageInfo {\n");
            sb.Append("  DocUrl: ").Append(DocUrl).Append("\n");
            sb.Append("  PackageDesc: ").Append(PackageDesc).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  PackageOpenType: ").Append(PackageOpenType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MiniPackageInfo);
        }

        /// <summary>
        /// Returns true if MiniPackageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MiniPackageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MiniPackageInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocUrl == input.DocUrl ||
                    (this.DocUrl != null &&
                    this.DocUrl.Equals(input.DocUrl))
                ) && 
                (
                    this.PackageDesc == input.PackageDesc ||
                    (this.PackageDesc != null &&
                    this.PackageDesc.Equals(input.PackageDesc))
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.PackageOpenType == input.PackageOpenType ||
                    (this.PackageOpenType != null &&
                    this.PackageOpenType.Equals(input.PackageOpenType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DocUrl.GetHashCode();
                }
                if (this.PackageDesc != null)
                {
                    hashCode = (hashCode * 59) + this.PackageDesc.GetHashCode();
                }
                if (this.PackageName != null)
                {
                    hashCode = (hashCode * 59) + this.PackageName.GetHashCode();
                }
                if (this.PackageOpenType != null)
                {
                    hashCode = (hashCode * 59) + this.PackageOpenType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
