/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayEcoMycarParkingChargeinfoSyncModel
    /// </summary>
    [DataContract(Name = "AlipayEcoMycarParkingChargeinfoSyncModel")]
    public partial class AlipayEcoMycarParkingChargeinfoSyncModel : IEquatable<AlipayEcoMycarParkingChargeinfoSyncModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayEcoMycarParkingChargeinfoSyncModel" /> class.
        /// </summary>
        /// <param name="businessHours">营业时间.</param>
        /// <param name="carDaylightAdvancedPrice">小车-白天 非首个计费单元价格.</param>
        /// <param name="carDaylightBasePrice">小车-白天 首个计费单元价格.</param>
        /// <param name="carNightAdvancedPrice">小车-夜间 非首个计费单元价格.</param>
        /// <param name="carNightBasePrice">小车-夜间 首个计费单元价格.</param>
        /// <param name="carOnetimePrice">小车 计次收费价格  xx元 / 次，按次收费的车场填写.</param>
        /// <param name="dailyPriceUpperbound">单日停车封顶价格：具体值或“不封顶”.</param>
        /// <param name="daylightBusinessHours">车场白天（收费）营业时间段.</param>
        /// <param name="freePeriod">单次停车免费时长.</param>
        /// <param name="hasChargingPile">是否有充电桩: -1 未知,0 否,1 是.</param>
        /// <param name="isCharge">是否收费：-1 未知,0 否,1 是.</param>
        /// <param name="nightBusinessHours">车场夜间（收费）营业时间段.</param>
        /// <param name="parkingId">停车场ID.</param>
        /// <param name="parkingSpaceCount">总车位数.</param>
        /// <param name="remark">复杂计费补充描述  收费复杂无法格式化的车场填写，以文本形式表述.</param>
        /// <param name="truckDaylightAdvancedPrice">大车-白天 非首个计费单元价格.</param>
        /// <param name="truckDaylightBasePrice">大车-白天 首个计费单元价格.</param>
        /// <param name="truckNightAdvancedPrice">大车-夜间 非首个计费单元价格.</param>
        /// <param name="truckNightBasePrice">大车-夜间 首个计费单元价格.</param>
        /// <param name="truckOnetimePrice">大车 计次收费价格  xx元 / 次，按次收费的车场填写.</param>
        public AlipayEcoMycarParkingChargeinfoSyncModel(string businessHours = default(string), string carDaylightAdvancedPrice = default(string), string carDaylightBasePrice = default(string), string carNightAdvancedPrice = default(string), string carNightBasePrice = default(string), string carOnetimePrice = default(string), string dailyPriceUpperbound = default(string), string daylightBusinessHours = default(string), string freePeriod = default(string), string hasChargingPile = default(string), string isCharge = default(string), string nightBusinessHours = default(string), string parkingId = default(string), int parkingSpaceCount = default(int), string remark = default(string), string truckDaylightAdvancedPrice = default(string), string truckDaylightBasePrice = default(string), string truckNightAdvancedPrice = default(string), string truckNightBasePrice = default(string), string truckOnetimePrice = default(string))
        {
            this.BusinessHours = businessHours;
            this.CarDaylightAdvancedPrice = carDaylightAdvancedPrice;
            this.CarDaylightBasePrice = carDaylightBasePrice;
            this.CarNightAdvancedPrice = carNightAdvancedPrice;
            this.CarNightBasePrice = carNightBasePrice;
            this.CarOnetimePrice = carOnetimePrice;
            this.DailyPriceUpperbound = dailyPriceUpperbound;
            this.DaylightBusinessHours = daylightBusinessHours;
            this.FreePeriod = freePeriod;
            this.HasChargingPile = hasChargingPile;
            this.IsCharge = isCharge;
            this.NightBusinessHours = nightBusinessHours;
            this.ParkingId = parkingId;
            this.ParkingSpaceCount = parkingSpaceCount;
            this.Remark = remark;
            this.TruckDaylightAdvancedPrice = truckDaylightAdvancedPrice;
            this.TruckDaylightBasePrice = truckDaylightBasePrice;
            this.TruckNightAdvancedPrice = truckNightAdvancedPrice;
            this.TruckNightBasePrice = truckNightBasePrice;
            this.TruckOnetimePrice = truckOnetimePrice;
        }

        /// <summary>
        /// 营业时间
        /// </summary>
        /// <value>营业时间</value>
        [DataMember(Name = "business_hours", EmitDefaultValue = false)]
        public string BusinessHours { get; set; }

        /// <summary>
        /// 小车-白天 非首个计费单元价格
        /// </summary>
        /// <value>小车-白天 非首个计费单元价格</value>
        [DataMember(Name = "car_daylight_advanced_price", EmitDefaultValue = false)]
        public string CarDaylightAdvancedPrice { get; set; }

        /// <summary>
        /// 小车-白天 首个计费单元价格
        /// </summary>
        /// <value>小车-白天 首个计费单元价格</value>
        [DataMember(Name = "car_daylight_base_price", EmitDefaultValue = false)]
        public string CarDaylightBasePrice { get; set; }

        /// <summary>
        /// 小车-夜间 非首个计费单元价格
        /// </summary>
        /// <value>小车-夜间 非首个计费单元价格</value>
        [DataMember(Name = "car_night_advanced_price", EmitDefaultValue = false)]
        public string CarNightAdvancedPrice { get; set; }

        /// <summary>
        /// 小车-夜间 首个计费单元价格
        /// </summary>
        /// <value>小车-夜间 首个计费单元价格</value>
        [DataMember(Name = "car_night_base_price", EmitDefaultValue = false)]
        public string CarNightBasePrice { get; set; }

        /// <summary>
        /// 小车 计次收费价格  xx元 / 次，按次收费的车场填写
        /// </summary>
        /// <value>小车 计次收费价格  xx元 / 次，按次收费的车场填写</value>
        [DataMember(Name = "car_onetime_price", EmitDefaultValue = false)]
        public string CarOnetimePrice { get; set; }

        /// <summary>
        /// 单日停车封顶价格：具体值或“不封顶”
        /// </summary>
        /// <value>单日停车封顶价格：具体值或“不封顶”</value>
        [DataMember(Name = "daily_price_upperbound", EmitDefaultValue = false)]
        public string DailyPriceUpperbound { get; set; }

        /// <summary>
        /// 车场白天（收费）营业时间段
        /// </summary>
        /// <value>车场白天（收费）营业时间段</value>
        [DataMember(Name = "daylight_business_hours", EmitDefaultValue = false)]
        public string DaylightBusinessHours { get; set; }

        /// <summary>
        /// 单次停车免费时长
        /// </summary>
        /// <value>单次停车免费时长</value>
        [DataMember(Name = "free_period", EmitDefaultValue = false)]
        public string FreePeriod { get; set; }

        /// <summary>
        /// 是否有充电桩: -1 未知,0 否,1 是
        /// </summary>
        /// <value>是否有充电桩: -1 未知,0 否,1 是</value>
        [DataMember(Name = "has_charging_pile", EmitDefaultValue = false)]
        public string HasChargingPile { get; set; }

        /// <summary>
        /// 是否收费：-1 未知,0 否,1 是
        /// </summary>
        /// <value>是否收费：-1 未知,0 否,1 是</value>
        [DataMember(Name = "is_charge", EmitDefaultValue = false)]
        public string IsCharge { get; set; }

        /// <summary>
        /// 车场夜间（收费）营业时间段
        /// </summary>
        /// <value>车场夜间（收费）营业时间段</value>
        [DataMember(Name = "night_business_hours", EmitDefaultValue = false)]
        public string NightBusinessHours { get; set; }

        /// <summary>
        /// 停车场ID
        /// </summary>
        /// <value>停车场ID</value>
        [DataMember(Name = "parking_id", EmitDefaultValue = false)]
        public string ParkingId { get; set; }

        /// <summary>
        /// 总车位数
        /// </summary>
        /// <value>总车位数</value>
        [DataMember(Name = "parking_space_count", EmitDefaultValue = false)]
        public int ParkingSpaceCount { get; set; }

        /// <summary>
        /// 复杂计费补充描述  收费复杂无法格式化的车场填写，以文本形式表述
        /// </summary>
        /// <value>复杂计费补充描述  收费复杂无法格式化的车场填写，以文本形式表述</value>
        [DataMember(Name = "remark", EmitDefaultValue = false)]
        public string Remark { get; set; }

        /// <summary>
        /// 大车-白天 非首个计费单元价格
        /// </summary>
        /// <value>大车-白天 非首个计费单元价格</value>
        [DataMember(Name = "truck_daylight_advanced_price", EmitDefaultValue = false)]
        public string TruckDaylightAdvancedPrice { get; set; }

        /// <summary>
        /// 大车-白天 首个计费单元价格
        /// </summary>
        /// <value>大车-白天 首个计费单元价格</value>
        [DataMember(Name = "truck_daylight_base_price", EmitDefaultValue = false)]
        public string TruckDaylightBasePrice { get; set; }

        /// <summary>
        /// 大车-夜间 非首个计费单元价格
        /// </summary>
        /// <value>大车-夜间 非首个计费单元价格</value>
        [DataMember(Name = "truck_night_advanced_price", EmitDefaultValue = false)]
        public string TruckNightAdvancedPrice { get; set; }

        /// <summary>
        /// 大车-夜间 首个计费单元价格
        /// </summary>
        /// <value>大车-夜间 首个计费单元价格</value>
        [DataMember(Name = "truck_night_base_price", EmitDefaultValue = false)]
        public string TruckNightBasePrice { get; set; }

        /// <summary>
        /// 大车 计次收费价格  xx元 / 次，按次收费的车场填写
        /// </summary>
        /// <value>大车 计次收费价格  xx元 / 次，按次收费的车场填写</value>
        [DataMember(Name = "truck_onetime_price", EmitDefaultValue = false)]
        public string TruckOnetimePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayEcoMycarParkingChargeinfoSyncModel {\n");
            sb.Append("  BusinessHours: ").Append(BusinessHours).Append("\n");
            sb.Append("  CarDaylightAdvancedPrice: ").Append(CarDaylightAdvancedPrice).Append("\n");
            sb.Append("  CarDaylightBasePrice: ").Append(CarDaylightBasePrice).Append("\n");
            sb.Append("  CarNightAdvancedPrice: ").Append(CarNightAdvancedPrice).Append("\n");
            sb.Append("  CarNightBasePrice: ").Append(CarNightBasePrice).Append("\n");
            sb.Append("  CarOnetimePrice: ").Append(CarOnetimePrice).Append("\n");
            sb.Append("  DailyPriceUpperbound: ").Append(DailyPriceUpperbound).Append("\n");
            sb.Append("  DaylightBusinessHours: ").Append(DaylightBusinessHours).Append("\n");
            sb.Append("  FreePeriod: ").Append(FreePeriod).Append("\n");
            sb.Append("  HasChargingPile: ").Append(HasChargingPile).Append("\n");
            sb.Append("  IsCharge: ").Append(IsCharge).Append("\n");
            sb.Append("  NightBusinessHours: ").Append(NightBusinessHours).Append("\n");
            sb.Append("  ParkingId: ").Append(ParkingId).Append("\n");
            sb.Append("  ParkingSpaceCount: ").Append(ParkingSpaceCount).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  TruckDaylightAdvancedPrice: ").Append(TruckDaylightAdvancedPrice).Append("\n");
            sb.Append("  TruckDaylightBasePrice: ").Append(TruckDaylightBasePrice).Append("\n");
            sb.Append("  TruckNightAdvancedPrice: ").Append(TruckNightAdvancedPrice).Append("\n");
            sb.Append("  TruckNightBasePrice: ").Append(TruckNightBasePrice).Append("\n");
            sb.Append("  TruckOnetimePrice: ").Append(TruckOnetimePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayEcoMycarParkingChargeinfoSyncModel);
        }

        /// <summary>
        /// Returns true if AlipayEcoMycarParkingChargeinfoSyncModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayEcoMycarParkingChargeinfoSyncModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayEcoMycarParkingChargeinfoSyncModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessHours == input.BusinessHours ||
                    (this.BusinessHours != null &&
                    this.BusinessHours.Equals(input.BusinessHours))
                ) && 
                (
                    this.CarDaylightAdvancedPrice == input.CarDaylightAdvancedPrice ||
                    (this.CarDaylightAdvancedPrice != null &&
                    this.CarDaylightAdvancedPrice.Equals(input.CarDaylightAdvancedPrice))
                ) && 
                (
                    this.CarDaylightBasePrice == input.CarDaylightBasePrice ||
                    (this.CarDaylightBasePrice != null &&
                    this.CarDaylightBasePrice.Equals(input.CarDaylightBasePrice))
                ) && 
                (
                    this.CarNightAdvancedPrice == input.CarNightAdvancedPrice ||
                    (this.CarNightAdvancedPrice != null &&
                    this.CarNightAdvancedPrice.Equals(input.CarNightAdvancedPrice))
                ) && 
                (
                    this.CarNightBasePrice == input.CarNightBasePrice ||
                    (this.CarNightBasePrice != null &&
                    this.CarNightBasePrice.Equals(input.CarNightBasePrice))
                ) && 
                (
                    this.CarOnetimePrice == input.CarOnetimePrice ||
                    (this.CarOnetimePrice != null &&
                    this.CarOnetimePrice.Equals(input.CarOnetimePrice))
                ) && 
                (
                    this.DailyPriceUpperbound == input.DailyPriceUpperbound ||
                    (this.DailyPriceUpperbound != null &&
                    this.DailyPriceUpperbound.Equals(input.DailyPriceUpperbound))
                ) && 
                (
                    this.DaylightBusinessHours == input.DaylightBusinessHours ||
                    (this.DaylightBusinessHours != null &&
                    this.DaylightBusinessHours.Equals(input.DaylightBusinessHours))
                ) && 
                (
                    this.FreePeriod == input.FreePeriod ||
                    (this.FreePeriod != null &&
                    this.FreePeriod.Equals(input.FreePeriod))
                ) && 
                (
                    this.HasChargingPile == input.HasChargingPile ||
                    (this.HasChargingPile != null &&
                    this.HasChargingPile.Equals(input.HasChargingPile))
                ) && 
                (
                    this.IsCharge == input.IsCharge ||
                    (this.IsCharge != null &&
                    this.IsCharge.Equals(input.IsCharge))
                ) && 
                (
                    this.NightBusinessHours == input.NightBusinessHours ||
                    (this.NightBusinessHours != null &&
                    this.NightBusinessHours.Equals(input.NightBusinessHours))
                ) && 
                (
                    this.ParkingId == input.ParkingId ||
                    (this.ParkingId != null &&
                    this.ParkingId.Equals(input.ParkingId))
                ) && 
                (
                    this.ParkingSpaceCount == input.ParkingSpaceCount ||
                    this.ParkingSpaceCount.Equals(input.ParkingSpaceCount)
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.TruckDaylightAdvancedPrice == input.TruckDaylightAdvancedPrice ||
                    (this.TruckDaylightAdvancedPrice != null &&
                    this.TruckDaylightAdvancedPrice.Equals(input.TruckDaylightAdvancedPrice))
                ) && 
                (
                    this.TruckDaylightBasePrice == input.TruckDaylightBasePrice ||
                    (this.TruckDaylightBasePrice != null &&
                    this.TruckDaylightBasePrice.Equals(input.TruckDaylightBasePrice))
                ) && 
                (
                    this.TruckNightAdvancedPrice == input.TruckNightAdvancedPrice ||
                    (this.TruckNightAdvancedPrice != null &&
                    this.TruckNightAdvancedPrice.Equals(input.TruckNightAdvancedPrice))
                ) && 
                (
                    this.TruckNightBasePrice == input.TruckNightBasePrice ||
                    (this.TruckNightBasePrice != null &&
                    this.TruckNightBasePrice.Equals(input.TruckNightBasePrice))
                ) && 
                (
                    this.TruckOnetimePrice == input.TruckOnetimePrice ||
                    (this.TruckOnetimePrice != null &&
                    this.TruckOnetimePrice.Equals(input.TruckOnetimePrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessHours != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessHours.GetHashCode();
                }
                if (this.CarDaylightAdvancedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CarDaylightAdvancedPrice.GetHashCode();
                }
                if (this.CarDaylightBasePrice != null)
                {
                    hashCode = (hashCode * 59) + this.CarDaylightBasePrice.GetHashCode();
                }
                if (this.CarNightAdvancedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CarNightAdvancedPrice.GetHashCode();
                }
                if (this.CarNightBasePrice != null)
                {
                    hashCode = (hashCode * 59) + this.CarNightBasePrice.GetHashCode();
                }
                if (this.CarOnetimePrice != null)
                {
                    hashCode = (hashCode * 59) + this.CarOnetimePrice.GetHashCode();
                }
                if (this.DailyPriceUpperbound != null)
                {
                    hashCode = (hashCode * 59) + this.DailyPriceUpperbound.GetHashCode();
                }
                if (this.DaylightBusinessHours != null)
                {
                    hashCode = (hashCode * 59) + this.DaylightBusinessHours.GetHashCode();
                }
                if (this.FreePeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FreePeriod.GetHashCode();
                }
                if (this.HasChargingPile != null)
                {
                    hashCode = (hashCode * 59) + this.HasChargingPile.GetHashCode();
                }
                if (this.IsCharge != null)
                {
                    hashCode = (hashCode * 59) + this.IsCharge.GetHashCode();
                }
                if (this.NightBusinessHours != null)
                {
                    hashCode = (hashCode * 59) + this.NightBusinessHours.GetHashCode();
                }
                if (this.ParkingId != null)
                {
                    hashCode = (hashCode * 59) + this.ParkingId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ParkingSpaceCount.GetHashCode();
                if (this.Remark != null)
                {
                    hashCode = (hashCode * 59) + this.Remark.GetHashCode();
                }
                if (this.TruckDaylightAdvancedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.TruckDaylightAdvancedPrice.GetHashCode();
                }
                if (this.TruckDaylightBasePrice != null)
                {
                    hashCode = (hashCode * 59) + this.TruckDaylightBasePrice.GetHashCode();
                }
                if (this.TruckNightAdvancedPrice != null)
                {
                    hashCode = (hashCode * 59) + this.TruckNightAdvancedPrice.GetHashCode();
                }
                if (this.TruckNightBasePrice != null)
                {
                    hashCode = (hashCode * 59) + this.TruckNightBasePrice.GetHashCode();
                }
                if (this.TruckOnetimePrice != null)
                {
                    hashCode = (hashCode * 59) + this.TruckOnetimePrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
