/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// IndirectContactPersonInfo
    /// </summary>
    [DataContract(Name = "IndirectContactPersonInfo")]
    public partial class IndirectContactPersonInfo : IEquatable<IndirectContactPersonInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndirectContactPersonInfo" /> class.
        /// </summary>
        /// <param name="contactCardNo">联系人身份证件号。 可传身份证、港澳居民来往内地通行证、港澳居民居住证、台湾居民来往大陆通行证、台湾居民居住证、护照、外国人永久居住证等证件号码，号码枚举见contact_card_type。若传身份证，需保证18位，且英文字母大写.</param>
        /// <param name="contactCertType">联系人证件类型，枚举值：中国大陆居民-身份证(RESIDENT)、其他国家或地区居民-护照(PASSPORT)、中国港澳居民-来往内地通行证(PASSPORT_HK_MO)、中国台湾居民-来往大陆通行证(PASSPORT_TWN)、港澳居民居住证（RESIDENCE_PERMIT_HM）、台湾居民居住证（RESIDENCE_PERMIT_TW）、外国人永久居住证（PERMANENT_RESIDENCE_FOREIGNER）。个体户/企业/事业单位/社会组织：可选择任一证件类型。小微商户仅支持身份证类型。.</param>
        /// <param name="contactName">联系人姓名.</param>
        /// <param name="contactPhoneNo">联系人手机.</param>
        public IndirectContactPersonInfo(string contactCardNo = default(string), string contactCertType = default(string), string contactName = default(string), string contactPhoneNo = default(string))
        {
            this.ContactCardNo = contactCardNo;
            this.ContactCertType = contactCertType;
            this.ContactName = contactName;
            this.ContactPhoneNo = contactPhoneNo;
        }

        /// <summary>
        /// 联系人身份证件号。 可传身份证、港澳居民来往内地通行证、港澳居民居住证、台湾居民来往大陆通行证、台湾居民居住证、护照、外国人永久居住证等证件号码，号码枚举见contact_card_type。若传身份证，需保证18位，且英文字母大写
        /// </summary>
        /// <value>联系人身份证件号。 可传身份证、港澳居民来往内地通行证、港澳居民居住证、台湾居民来往大陆通行证、台湾居民居住证、护照、外国人永久居住证等证件号码，号码枚举见contact_card_type。若传身份证，需保证18位，且英文字母大写</value>
        [DataMember(Name = "contact_card_no", EmitDefaultValue = false)]
        public string ContactCardNo { get; set; }

        /// <summary>
        /// 联系人证件类型，枚举值：中国大陆居民-身份证(RESIDENT)、其他国家或地区居民-护照(PASSPORT)、中国港澳居民-来往内地通行证(PASSPORT_HK_MO)、中国台湾居民-来往大陆通行证(PASSPORT_TWN)、港澳居民居住证（RESIDENCE_PERMIT_HM）、台湾居民居住证（RESIDENCE_PERMIT_TW）、外国人永久居住证（PERMANENT_RESIDENCE_FOREIGNER）。个体户/企业/事业单位/社会组织：可选择任一证件类型。小微商户仅支持身份证类型。
        /// </summary>
        /// <value>联系人证件类型，枚举值：中国大陆居民-身份证(RESIDENT)、其他国家或地区居民-护照(PASSPORT)、中国港澳居民-来往内地通行证(PASSPORT_HK_MO)、中国台湾居民-来往大陆通行证(PASSPORT_TWN)、港澳居民居住证（RESIDENCE_PERMIT_HM）、台湾居民居住证（RESIDENCE_PERMIT_TW）、外国人永久居住证（PERMANENT_RESIDENCE_FOREIGNER）。个体户/企业/事业单位/社会组织：可选择任一证件类型。小微商户仅支持身份证类型。</value>
        [DataMember(Name = "contact_cert_type", EmitDefaultValue = false)]
        public string ContactCertType { get; set; }

        /// <summary>
        /// 联系人姓名
        /// </summary>
        /// <value>联系人姓名</value>
        [DataMember(Name = "contact_name", EmitDefaultValue = false)]
        public string ContactName { get; set; }

        /// <summary>
        /// 联系人手机
        /// </summary>
        /// <value>联系人手机</value>
        [DataMember(Name = "contact_phone_no", EmitDefaultValue = false)]
        public string ContactPhoneNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndirectContactPersonInfo {\n");
            sb.Append("  ContactCardNo: ").Append(ContactCardNo).Append("\n");
            sb.Append("  ContactCertType: ").Append(ContactCertType).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactPhoneNo: ").Append(ContactPhoneNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndirectContactPersonInfo);
        }

        /// <summary>
        /// Returns true if IndirectContactPersonInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IndirectContactPersonInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndirectContactPersonInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactCardNo == input.ContactCardNo ||
                    (this.ContactCardNo != null &&
                    this.ContactCardNo.Equals(input.ContactCardNo))
                ) && 
                (
                    this.ContactCertType == input.ContactCertType ||
                    (this.ContactCertType != null &&
                    this.ContactCertType.Equals(input.ContactCertType))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactPhoneNo == input.ContactPhoneNo ||
                    (this.ContactPhoneNo != null &&
                    this.ContactPhoneNo.Equals(input.ContactPhoneNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactCardNo != null)
                {
                    hashCode = (hashCode * 59) + this.ContactCardNo.GetHashCode();
                }
                if (this.ContactCertType != null)
                {
                    hashCode = (hashCode * 59) + this.ContactCertType.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ContactPhoneNo != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhoneNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
