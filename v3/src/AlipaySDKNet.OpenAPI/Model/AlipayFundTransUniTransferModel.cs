/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayFundTransUniTransferModel
    /// </summary>
    [DataContract(Name = "AlipayFundTransUniTransferModel")]
    public partial class AlipayFundTransUniTransferModel : IEquatable<AlipayFundTransUniTransferModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayFundTransUniTransferModel" /> class.
        /// </summary>
        /// <param name="bizScene">描述特定的业务场景，可传的参数如下： DIRECT_TRANSFER：单笔无密转账到支付宝，B2C现金红包; PERSONAL_COLLECTION：C2C现金红包-领红包.</param>
        /// <param name="businessParams">转账业务请求的扩展参数，支持传入的扩展参数如下： sub_biz_scene 子业务场景，红包业务必传，C2C现金红包、B2C现金红包均需传入，取值REDPACKET.</param>
        /// <param name="mutipleCurrencyDetail">mutipleCurrencyDetail.</param>
        /// <param name="orderTitle">转账业务的标题，用于在支付宝用户的账单里显示.</param>
        /// <param name="originalOrderId">原支付宝业务单号。.</param>
        /// <param name="outBizNo">商家侧唯一订单号，由商家自定义。对于不同转账请求，商家需保证该订单号在自身系统唯一。.</param>
        /// <param name="passbackParams">公用回传参数，如果请求时传递了该参数，则异步通知商户时会回传该参数。.</param>
        /// <param name="payeeInfo">payeeInfo.</param>
        /// <param name="payerInfo">payerInfo.</param>
        /// <param name="productCode">业务产品码， 单笔无密转账到支付宝账户固定为: TRANS_ACCOUNT_NO_PWD； 收发现金红包固定为: STD_RED_PACKET；.</param>
        /// <param name="remark">业务备注.</param>
        /// <param name="signData">signData.</param>
        /// <param name="transAmount">订单总金额，单位为元，精确到小数点后两位，STD_RED_PACKET产品取值范围[0.01,100000000]； TRANS_ACCOUNT_NO_PWD产品取值范围[0.1,100000000].</param>
        public AlipayFundTransUniTransferModel(string bizScene = default(string), string businessParams = default(string), MutipleCurrencyDetail mutipleCurrencyDetail = default(MutipleCurrencyDetail), string orderTitle = default(string), string originalOrderId = default(string), string outBizNo = default(string), string passbackParams = default(string), Participant payeeInfo = default(Participant), Participant payerInfo = default(Participant), string productCode = default(string), string remark = default(string), SignData signData = default(SignData), string transAmount = default(string))
        {
            this.BizScene = bizScene;
            this.BusinessParams = businessParams;
            this.MutipleCurrencyDetail = mutipleCurrencyDetail;
            this.OrderTitle = orderTitle;
            this.OriginalOrderId = originalOrderId;
            this.OutBizNo = outBizNo;
            this.PassbackParams = passbackParams;
            this.PayeeInfo = payeeInfo;
            this.PayerInfo = payerInfo;
            this.ProductCode = productCode;
            this.Remark = remark;
            this.SignData = signData;
            this.TransAmount = transAmount;
        }

        /// <summary>
        /// 描述特定的业务场景，可传的参数如下： DIRECT_TRANSFER：单笔无密转账到支付宝，B2C现金红包; PERSONAL_COLLECTION：C2C现金红包-领红包
        /// </summary>
        /// <value>描述特定的业务场景，可传的参数如下： DIRECT_TRANSFER：单笔无密转账到支付宝，B2C现金红包; PERSONAL_COLLECTION：C2C现金红包-领红包</value>
        [DataMember(Name = "biz_scene", EmitDefaultValue = false)]
        public string BizScene { get; set; }

        /// <summary>
        /// 转账业务请求的扩展参数，支持传入的扩展参数如下： sub_biz_scene 子业务场景，红包业务必传，C2C现金红包、B2C现金红包均需传入，取值REDPACKET
        /// </summary>
        /// <value>转账业务请求的扩展参数，支持传入的扩展参数如下： sub_biz_scene 子业务场景，红包业务必传，C2C现金红包、B2C现金红包均需传入，取值REDPACKET</value>
        [DataMember(Name = "business_params", EmitDefaultValue = false)]
        public string BusinessParams { get; set; }

        /// <summary>
        /// Gets or Sets MutipleCurrencyDetail
        /// </summary>
        [DataMember(Name = "mutiple_currency_detail", EmitDefaultValue = false)]
        public MutipleCurrencyDetail MutipleCurrencyDetail { get; set; }

        /// <summary>
        /// 转账业务的标题，用于在支付宝用户的账单里显示
        /// </summary>
        /// <value>转账业务的标题，用于在支付宝用户的账单里显示</value>
        [DataMember(Name = "order_title", EmitDefaultValue = false)]
        public string OrderTitle { get; set; }

        /// <summary>
        /// 原支付宝业务单号。
        /// </summary>
        /// <value>原支付宝业务单号。</value>
        [DataMember(Name = "original_order_id", EmitDefaultValue = false)]
        public string OriginalOrderId { get; set; }

        /// <summary>
        /// 商家侧唯一订单号，由商家自定义。对于不同转账请求，商家需保证该订单号在自身系统唯一。
        /// </summary>
        /// <value>商家侧唯一订单号，由商家自定义。对于不同转账请求，商家需保证该订单号在自身系统唯一。</value>
        [DataMember(Name = "out_biz_no", EmitDefaultValue = false)]
        public string OutBizNo { get; set; }

        /// <summary>
        /// 公用回传参数，如果请求时传递了该参数，则异步通知商户时会回传该参数。
        /// </summary>
        /// <value>公用回传参数，如果请求时传递了该参数，则异步通知商户时会回传该参数。</value>
        [DataMember(Name = "passback_params", EmitDefaultValue = false)]
        public string PassbackParams { get; set; }

        /// <summary>
        /// Gets or Sets PayeeInfo
        /// </summary>
        [DataMember(Name = "payee_info", EmitDefaultValue = false)]
        public Participant PayeeInfo { get; set; }

        /// <summary>
        /// Gets or Sets PayerInfo
        /// </summary>
        [DataMember(Name = "payer_info", EmitDefaultValue = false)]
        public Participant PayerInfo { get; set; }

        /// <summary>
        /// 业务产品码， 单笔无密转账到支付宝账户固定为: TRANS_ACCOUNT_NO_PWD； 收发现金红包固定为: STD_RED_PACKET；
        /// </summary>
        /// <value>业务产品码， 单笔无密转账到支付宝账户固定为: TRANS_ACCOUNT_NO_PWD； 收发现金红包固定为: STD_RED_PACKET；</value>
        [DataMember(Name = "product_code", EmitDefaultValue = false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// 业务备注
        /// </summary>
        /// <value>业务备注</value>
        [DataMember(Name = "remark", EmitDefaultValue = false)]
        public string Remark { get; set; }

        /// <summary>
        /// Gets or Sets SignData
        /// </summary>
        [DataMember(Name = "sign_data", EmitDefaultValue = false)]
        public SignData SignData { get; set; }

        /// <summary>
        /// 订单总金额，单位为元，精确到小数点后两位，STD_RED_PACKET产品取值范围[0.01,100000000]； TRANS_ACCOUNT_NO_PWD产品取值范围[0.1,100000000]
        /// </summary>
        /// <value>订单总金额，单位为元，精确到小数点后两位，STD_RED_PACKET产品取值范围[0.01,100000000]； TRANS_ACCOUNT_NO_PWD产品取值范围[0.1,100000000]</value>
        [DataMember(Name = "trans_amount", EmitDefaultValue = false)]
        public string TransAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayFundTransUniTransferModel {\n");
            sb.Append("  BizScene: ").Append(BizScene).Append("\n");
            sb.Append("  BusinessParams: ").Append(BusinessParams).Append("\n");
            sb.Append("  MutipleCurrencyDetail: ").Append(MutipleCurrencyDetail).Append("\n");
            sb.Append("  OrderTitle: ").Append(OrderTitle).Append("\n");
            sb.Append("  OriginalOrderId: ").Append(OriginalOrderId).Append("\n");
            sb.Append("  OutBizNo: ").Append(OutBizNo).Append("\n");
            sb.Append("  PassbackParams: ").Append(PassbackParams).Append("\n");
            sb.Append("  PayeeInfo: ").Append(PayeeInfo).Append("\n");
            sb.Append("  PayerInfo: ").Append(PayerInfo).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  SignData: ").Append(SignData).Append("\n");
            sb.Append("  TransAmount: ").Append(TransAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayFundTransUniTransferModel);
        }

        /// <summary>
        /// Returns true if AlipayFundTransUniTransferModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayFundTransUniTransferModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayFundTransUniTransferModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BizScene == input.BizScene ||
                    (this.BizScene != null &&
                    this.BizScene.Equals(input.BizScene))
                ) && 
                (
                    this.BusinessParams == input.BusinessParams ||
                    (this.BusinessParams != null &&
                    this.BusinessParams.Equals(input.BusinessParams))
                ) && 
                (
                    this.MutipleCurrencyDetail == input.MutipleCurrencyDetail ||
                    (this.MutipleCurrencyDetail != null &&
                    this.MutipleCurrencyDetail.Equals(input.MutipleCurrencyDetail))
                ) && 
                (
                    this.OrderTitle == input.OrderTitle ||
                    (this.OrderTitle != null &&
                    this.OrderTitle.Equals(input.OrderTitle))
                ) && 
                (
                    this.OriginalOrderId == input.OriginalOrderId ||
                    (this.OriginalOrderId != null &&
                    this.OriginalOrderId.Equals(input.OriginalOrderId))
                ) && 
                (
                    this.OutBizNo == input.OutBizNo ||
                    (this.OutBizNo != null &&
                    this.OutBizNo.Equals(input.OutBizNo))
                ) && 
                (
                    this.PassbackParams == input.PassbackParams ||
                    (this.PassbackParams != null &&
                    this.PassbackParams.Equals(input.PassbackParams))
                ) && 
                (
                    this.PayeeInfo == input.PayeeInfo ||
                    (this.PayeeInfo != null &&
                    this.PayeeInfo.Equals(input.PayeeInfo))
                ) && 
                (
                    this.PayerInfo == input.PayerInfo ||
                    (this.PayerInfo != null &&
                    this.PayerInfo.Equals(input.PayerInfo))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.SignData == input.SignData ||
                    (this.SignData != null &&
                    this.SignData.Equals(input.SignData))
                ) && 
                (
                    this.TransAmount == input.TransAmount ||
                    (this.TransAmount != null &&
                    this.TransAmount.Equals(input.TransAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BizScene != null)
                {
                    hashCode = (hashCode * 59) + this.BizScene.GetHashCode();
                }
                if (this.BusinessParams != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessParams.GetHashCode();
                }
                if (this.MutipleCurrencyDetail != null)
                {
                    hashCode = (hashCode * 59) + this.MutipleCurrencyDetail.GetHashCode();
                }
                if (this.OrderTitle != null)
                {
                    hashCode = (hashCode * 59) + this.OrderTitle.GetHashCode();
                }
                if (this.OriginalOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalOrderId.GetHashCode();
                }
                if (this.OutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutBizNo.GetHashCode();
                }
                if (this.PassbackParams != null)
                {
                    hashCode = (hashCode * 59) + this.PassbackParams.GetHashCode();
                }
                if (this.PayeeInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeInfo.GetHashCode();
                }
                if (this.PayerInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PayerInfo.GetHashCode();
                }
                if (this.ProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                }
                if (this.Remark != null)
                {
                    hashCode = (hashCode * 59) + this.Remark.GetHashCode();
                }
                if (this.SignData != null)
                {
                    hashCode = (hashCode * 59) + this.SignData.GetHashCode();
                }
                if (this.TransAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TransAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
