/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AuthIdentityInfo
    /// </summary>
    [DataContract(Name = "AuthIdentityInfo")]
    public partial class AuthIdentityInfo : IEquatable<AuthIdentityInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthIdentityInfo" /> class.
        /// </summary>
        /// <param name="certificateInfo">certificateInfo.</param>
        /// <param name="certificateType">主体类型为企业/个体户/政府机关/事业单位/社会组织时，必填； 证照类型：营业执照(BUSINESS_CERT)/登记证书(REGISTER_CERT) 主体为政府机关/事业单位/社会组织时，填登记证书； 主体类型为企业/个体户时，填营业执照；.</param>
        /// <param name="employerLetterImg">单位证明函照片（使用图片上传接口）主体类型为政府机关/事业单位时，单位证明函照片必填.</param>
        /// <param name="financialOrgInfo">financialOrgInfo.</param>
        /// <param name="identityType">主体类型，枚举定义：企业(ENTERPRISE)、个体工商户(IND_BIZ)、事业单位(INST)、党政机关(GOV)、社会组织(ORG)、小微商户(MSE).</param>
        /// <param name="isFinancialOrg">是否金融机构.</param>
        /// <param name="qualificationInfoList">经营许可证列表，填写特殊行业的经营许可证信息，一个主体最多5个行业.</param>
        /// <param name="supportCredentials">supportCredentials.</param>
        public AuthIdentityInfo(IndirectCertificateInfo certificateInfo = default(IndirectCertificateInfo), string certificateType = default(string), string employerLetterImg = default(string), IndirectFinancialOrgInfo financialOrgInfo = default(IndirectFinancialOrgInfo), string identityType = default(string), bool isFinancialOrg = default(bool), List<IndirectQualificationInfo> qualificationInfoList = default(List<IndirectQualificationInfo>), IndirectSupportCredentials supportCredentials = default(IndirectSupportCredentials))
        {
            this.CertificateInfo = certificateInfo;
            this.CertificateType = certificateType;
            this.EmployerLetterImg = employerLetterImg;
            this.FinancialOrgInfo = financialOrgInfo;
            this.IdentityType = identityType;
            this.IsFinancialOrg = isFinancialOrg;
            this.QualificationInfoList = qualificationInfoList;
            this.SupportCredentials = supportCredentials;
        }

        /// <summary>
        /// Gets or Sets CertificateInfo
        /// </summary>
        [DataMember(Name = "certificate_info", EmitDefaultValue = false)]
        public IndirectCertificateInfo CertificateInfo { get; set; }

        /// <summary>
        /// 主体类型为企业/个体户/政府机关/事业单位/社会组织时，必填； 证照类型：营业执照(BUSINESS_CERT)/登记证书(REGISTER_CERT) 主体为政府机关/事业单位/社会组织时，填登记证书； 主体类型为企业/个体户时，填营业执照；
        /// </summary>
        /// <value>主体类型为企业/个体户/政府机关/事业单位/社会组织时，必填； 证照类型：营业执照(BUSINESS_CERT)/登记证书(REGISTER_CERT) 主体为政府机关/事业单位/社会组织时，填登记证书； 主体类型为企业/个体户时，填营业执照；</value>
        [DataMember(Name = "certificate_type", EmitDefaultValue = false)]
        public string CertificateType { get; set; }

        /// <summary>
        /// 单位证明函照片（使用图片上传接口）主体类型为政府机关/事业单位时，单位证明函照片必填
        /// </summary>
        /// <value>单位证明函照片（使用图片上传接口）主体类型为政府机关/事业单位时，单位证明函照片必填</value>
        [DataMember(Name = "employer_letter_img", EmitDefaultValue = false)]
        public string EmployerLetterImg { get; set; }

        /// <summary>
        /// Gets or Sets FinancialOrgInfo
        /// </summary>
        [DataMember(Name = "financial_org_info", EmitDefaultValue = false)]
        public IndirectFinancialOrgInfo FinancialOrgInfo { get; set; }

        /// <summary>
        /// 主体类型，枚举定义：企业(ENTERPRISE)、个体工商户(IND_BIZ)、事业单位(INST)、党政机关(GOV)、社会组织(ORG)、小微商户(MSE)
        /// </summary>
        /// <value>主体类型，枚举定义：企业(ENTERPRISE)、个体工商户(IND_BIZ)、事业单位(INST)、党政机关(GOV)、社会组织(ORG)、小微商户(MSE)</value>
        [DataMember(Name = "identity_type", EmitDefaultValue = false)]
        public string IdentityType { get; set; }

        /// <summary>
        /// 是否金融机构
        /// </summary>
        /// <value>是否金融机构</value>
        [DataMember(Name = "is_financial_org", EmitDefaultValue = true)]
        public bool IsFinancialOrg { get; set; }

        /// <summary>
        /// 经营许可证列表，填写特殊行业的经营许可证信息，一个主体最多5个行业
        /// </summary>
        /// <value>经营许可证列表，填写特殊行业的经营许可证信息，一个主体最多5个行业</value>
        [DataMember(Name = "qualification_info_list", EmitDefaultValue = false)]
        public List<IndirectQualificationInfo> QualificationInfoList { get; set; }

        /// <summary>
        /// Gets or Sets SupportCredentials
        /// </summary>
        [DataMember(Name = "support_credentials", EmitDefaultValue = false)]
        public IndirectSupportCredentials SupportCredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthIdentityInfo {\n");
            sb.Append("  CertificateInfo: ").Append(CertificateInfo).Append("\n");
            sb.Append("  CertificateType: ").Append(CertificateType).Append("\n");
            sb.Append("  EmployerLetterImg: ").Append(EmployerLetterImg).Append("\n");
            sb.Append("  FinancialOrgInfo: ").Append(FinancialOrgInfo).Append("\n");
            sb.Append("  IdentityType: ").Append(IdentityType).Append("\n");
            sb.Append("  IsFinancialOrg: ").Append(IsFinancialOrg).Append("\n");
            sb.Append("  QualificationInfoList: ").Append(QualificationInfoList).Append("\n");
            sb.Append("  SupportCredentials: ").Append(SupportCredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthIdentityInfo);
        }

        /// <summary>
        /// Returns true if AuthIdentityInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthIdentityInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthIdentityInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertificateInfo == input.CertificateInfo ||
                    (this.CertificateInfo != null &&
                    this.CertificateInfo.Equals(input.CertificateInfo))
                ) && 
                (
                    this.CertificateType == input.CertificateType ||
                    (this.CertificateType != null &&
                    this.CertificateType.Equals(input.CertificateType))
                ) && 
                (
                    this.EmployerLetterImg == input.EmployerLetterImg ||
                    (this.EmployerLetterImg != null &&
                    this.EmployerLetterImg.Equals(input.EmployerLetterImg))
                ) && 
                (
                    this.FinancialOrgInfo == input.FinancialOrgInfo ||
                    (this.FinancialOrgInfo != null &&
                    this.FinancialOrgInfo.Equals(input.FinancialOrgInfo))
                ) && 
                (
                    this.IdentityType == input.IdentityType ||
                    (this.IdentityType != null &&
                    this.IdentityType.Equals(input.IdentityType))
                ) && 
                (
                    this.IsFinancialOrg == input.IsFinancialOrg ||
                    this.IsFinancialOrg.Equals(input.IsFinancialOrg)
                ) && 
                (
                    this.QualificationInfoList == input.QualificationInfoList ||
                    this.QualificationInfoList != null &&
                    input.QualificationInfoList != null &&
                    this.QualificationInfoList.SequenceEqual(input.QualificationInfoList)
                ) && 
                (
                    this.SupportCredentials == input.SupportCredentials ||
                    (this.SupportCredentials != null &&
                    this.SupportCredentials.Equals(input.SupportCredentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateInfo != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateInfo.GetHashCode();
                }
                if (this.CertificateType != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateType.GetHashCode();
                }
                if (this.EmployerLetterImg != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerLetterImg.GetHashCode();
                }
                if (this.FinancialOrgInfo != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialOrgInfo.GetHashCode();
                }
                if (this.IdentityType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFinancialOrg.GetHashCode();
                if (this.QualificationInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.QualificationInfoList.GetHashCode();
                }
                if (this.SupportCredentials != null)
                {
                    hashCode = (hashCode * 59) + this.SupportCredentials.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
