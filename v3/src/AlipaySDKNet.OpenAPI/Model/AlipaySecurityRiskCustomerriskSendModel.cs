/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipaySecurityRiskCustomerriskSendModel
    /// </summary>
    [DataContract(Name = "AlipaySecurityRiskCustomerriskSendModel")]
    public partial class AlipaySecurityRiskCustomerriskSendModel : IEquatable<AlipaySecurityRiskCustomerriskSendModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipaySecurityRiskCustomerriskSendModel" /> class.
        /// </summary>
        /// <param name="bankCardNo">交易对应的银行卡的卡号（支付宝直连和间连合作伙伴均可回传此参数）.</param>
        /// <param name="businessLicenseNo">该账号对应的营业执照号码（支付宝直连和间连合作伙伴均可回传此参数）.</param>
        /// <param name="certNo">该用户对应的身份证号码（支付宝直连和间连合作伙伴均可回传此参数）.</param>
        /// <param name="emailAddress">账户注册时填写的邮箱地址(适用于支付宝直连商户回传此信息).</param>
        /// <param name="externalId">适用于间连业务场景下，商户在银行被分配的ID（适用于支付宝间连合作伙伴回传此信息）.</param>
        /// <param name="merchName">该笔风险交易购买的具体商品名称（适用于支付宝直连商户回传此信息）.</param>
        /// <param name="mobile">手机（支付宝直连和间连合作伙伴均可回传此参数）.</param>
        /// <param name="mobileIp">该账号登录合作伙伴平台时的IP地址（适用于支付宝直连商户回传此信息）.</param>
        /// <param name="orderIp">该账户在商户平台下单时的MAC地址或IP地址（适用于支付宝直连商户回传此信息）.</param>
        /// <param name="pid">适用于直连商户场景下的支付宝合作伙伴ID（适用于支付宝直连合作伙伴回传此信息）.</param>
        /// <param name="platAccount">指第三方在商户平台注册成功后，平台给予的账户号（适用于支付宝直连商户回传此信息）.</param>
        /// <param name="processCode">直连场景下，商户对该账户采取的措施：  多种处理结果可调用多次，每次回传一种处理结果。  （01：暂停发货；  02：延迟结算；  03：关停账户；  04：暂停发货+关停账户；  05：延迟结算+关停账户；  06：其他；  07：平台进行退款退订；  08：平台跟用户沟通后，用户撤诉。  间连场景下，商户回传处理结果：  对商户的处理情况：  01：已延迟结算，02：关停商户，99：其他  多重处理结果可调用多次，每次回传一种处理结果.</param>
        /// <param name="smid">指间连交易场景下商家被支付宝分配的ID（适用于支付宝间连合作伙伴回传此信息）.</param>
        /// <param name="tradeNo">支付宝推送的风险消息中的交易号（支付宝直连和间连合作伙伴均需回传此参数）.</param>
        public AlipaySecurityRiskCustomerriskSendModel(string bankCardNo = default(string), string businessLicenseNo = default(string), string certNo = default(string), string emailAddress = default(string), string externalId = default(string), string merchName = default(string), string mobile = default(string), string mobileIp = default(string), string orderIp = default(string), string pid = default(string), string platAccount = default(string), string processCode = default(string), string smid = default(string), string tradeNo = default(string))
        {
            this.BankCardNo = bankCardNo;
            this.BusinessLicenseNo = businessLicenseNo;
            this.CertNo = certNo;
            this.EmailAddress = emailAddress;
            this.ExternalId = externalId;
            this.MerchName = merchName;
            this.Mobile = mobile;
            this.MobileIp = mobileIp;
            this.OrderIp = orderIp;
            this.Pid = pid;
            this.PlatAccount = platAccount;
            this.ProcessCode = processCode;
            this.Smid = smid;
            this.TradeNo = tradeNo;
        }

        /// <summary>
        /// 交易对应的银行卡的卡号（支付宝直连和间连合作伙伴均可回传此参数）
        /// </summary>
        /// <value>交易对应的银行卡的卡号（支付宝直连和间连合作伙伴均可回传此参数）</value>
        [DataMember(Name = "bank_card_no", EmitDefaultValue = false)]
        public string BankCardNo { get; set; }

        /// <summary>
        /// 该账号对应的营业执照号码（支付宝直连和间连合作伙伴均可回传此参数）
        /// </summary>
        /// <value>该账号对应的营业执照号码（支付宝直连和间连合作伙伴均可回传此参数）</value>
        [DataMember(Name = "business_license_no", EmitDefaultValue = false)]
        public string BusinessLicenseNo { get; set; }

        /// <summary>
        /// 该用户对应的身份证号码（支付宝直连和间连合作伙伴均可回传此参数）
        /// </summary>
        /// <value>该用户对应的身份证号码（支付宝直连和间连合作伙伴均可回传此参数）</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 账户注册时填写的邮箱地址(适用于支付宝直连商户回传此信息)
        /// </summary>
        /// <value>账户注册时填写的邮箱地址(适用于支付宝直连商户回传此信息)</value>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// 适用于间连业务场景下，商户在银行被分配的ID（适用于支付宝间连合作伙伴回传此信息）
        /// </summary>
        /// <value>适用于间连业务场景下，商户在银行被分配的ID（适用于支付宝间连合作伙伴回传此信息）</value>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// 该笔风险交易购买的具体商品名称（适用于支付宝直连商户回传此信息）
        /// </summary>
        /// <value>该笔风险交易购买的具体商品名称（适用于支付宝直连商户回传此信息）</value>
        [DataMember(Name = "merch_name", EmitDefaultValue = false)]
        public string MerchName { get; set; }

        /// <summary>
        /// 手机（支付宝直连和间连合作伙伴均可回传此参数）
        /// </summary>
        /// <value>手机（支付宝直连和间连合作伙伴均可回传此参数）</value>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// 该账号登录合作伙伴平台时的IP地址（适用于支付宝直连商户回传此信息）
        /// </summary>
        /// <value>该账号登录合作伙伴平台时的IP地址（适用于支付宝直连商户回传此信息）</value>
        [DataMember(Name = "mobile_ip", EmitDefaultValue = false)]
        public string MobileIp { get; set; }

        /// <summary>
        /// 该账户在商户平台下单时的MAC地址或IP地址（适用于支付宝直连商户回传此信息）
        /// </summary>
        /// <value>该账户在商户平台下单时的MAC地址或IP地址（适用于支付宝直连商户回传此信息）</value>
        [DataMember(Name = "order_ip", EmitDefaultValue = false)]
        public string OrderIp { get; set; }

        /// <summary>
        /// 适用于直连商户场景下的支付宝合作伙伴ID（适用于支付宝直连合作伙伴回传此信息）
        /// </summary>
        /// <value>适用于直连商户场景下的支付宝合作伙伴ID（适用于支付宝直连合作伙伴回传此信息）</value>
        [DataMember(Name = "pid", EmitDefaultValue = false)]
        public string Pid { get; set; }

        /// <summary>
        /// 指第三方在商户平台注册成功后，平台给予的账户号（适用于支付宝直连商户回传此信息）
        /// </summary>
        /// <value>指第三方在商户平台注册成功后，平台给予的账户号（适用于支付宝直连商户回传此信息）</value>
        [DataMember(Name = "plat_account", EmitDefaultValue = false)]
        public string PlatAccount { get; set; }

        /// <summary>
        /// 直连场景下，商户对该账户采取的措施：  多种处理结果可调用多次，每次回传一种处理结果。  （01：暂停发货；  02：延迟结算；  03：关停账户；  04：暂停发货+关停账户；  05：延迟结算+关停账户；  06：其他；  07：平台进行退款退订；  08：平台跟用户沟通后，用户撤诉。  间连场景下，商户回传处理结果：  对商户的处理情况：  01：已延迟结算，02：关停商户，99：其他  多重处理结果可调用多次，每次回传一种处理结果
        /// </summary>
        /// <value>直连场景下，商户对该账户采取的措施：  多种处理结果可调用多次，每次回传一种处理结果。  （01：暂停发货；  02：延迟结算；  03：关停账户；  04：暂停发货+关停账户；  05：延迟结算+关停账户；  06：其他；  07：平台进行退款退订；  08：平台跟用户沟通后，用户撤诉。  间连场景下，商户回传处理结果：  对商户的处理情况：  01：已延迟结算，02：关停商户，99：其他  多重处理结果可调用多次，每次回传一种处理结果</value>
        [DataMember(Name = "process_code", EmitDefaultValue = false)]
        public string ProcessCode { get; set; }

        /// <summary>
        /// 指间连交易场景下商家被支付宝分配的ID（适用于支付宝间连合作伙伴回传此信息）
        /// </summary>
        /// <value>指间连交易场景下商家被支付宝分配的ID（适用于支付宝间连合作伙伴回传此信息）</value>
        [DataMember(Name = "smid", EmitDefaultValue = false)]
        public string Smid { get; set; }

        /// <summary>
        /// 支付宝推送的风险消息中的交易号（支付宝直连和间连合作伙伴均需回传此参数）
        /// </summary>
        /// <value>支付宝推送的风险消息中的交易号（支付宝直连和间连合作伙伴均需回传此参数）</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipaySecurityRiskCustomerriskSendModel {\n");
            sb.Append("  BankCardNo: ").Append(BankCardNo).Append("\n");
            sb.Append("  BusinessLicenseNo: ").Append(BusinessLicenseNo).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  MerchName: ").Append(MerchName).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  MobileIp: ").Append(MobileIp).Append("\n");
            sb.Append("  OrderIp: ").Append(OrderIp).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  PlatAccount: ").Append(PlatAccount).Append("\n");
            sb.Append("  ProcessCode: ").Append(ProcessCode).Append("\n");
            sb.Append("  Smid: ").Append(Smid).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipaySecurityRiskCustomerriskSendModel);
        }

        /// <summary>
        /// Returns true if AlipaySecurityRiskCustomerriskSendModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipaySecurityRiskCustomerriskSendModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipaySecurityRiskCustomerriskSendModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankCardNo == input.BankCardNo ||
                    (this.BankCardNo != null &&
                    this.BankCardNo.Equals(input.BankCardNo))
                ) && 
                (
                    this.BusinessLicenseNo == input.BusinessLicenseNo ||
                    (this.BusinessLicenseNo != null &&
                    this.BusinessLicenseNo.Equals(input.BusinessLicenseNo))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.MerchName == input.MerchName ||
                    (this.MerchName != null &&
                    this.MerchName.Equals(input.MerchName))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.MobileIp == input.MobileIp ||
                    (this.MobileIp != null &&
                    this.MobileIp.Equals(input.MobileIp))
                ) && 
                (
                    this.OrderIp == input.OrderIp ||
                    (this.OrderIp != null &&
                    this.OrderIp.Equals(input.OrderIp))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.PlatAccount == input.PlatAccount ||
                    (this.PlatAccount != null &&
                    this.PlatAccount.Equals(input.PlatAccount))
                ) && 
                (
                    this.ProcessCode == input.ProcessCode ||
                    (this.ProcessCode != null &&
                    this.ProcessCode.Equals(input.ProcessCode))
                ) && 
                (
                    this.Smid == input.Smid ||
                    (this.Smid != null &&
                    this.Smid.Equals(input.Smid))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankCardNo != null)
                {
                    hashCode = (hashCode * 59) + this.BankCardNo.GetHashCode();
                }
                if (this.BusinessLicenseNo != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessLicenseNo.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.MerchName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchName.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.MobileIp != null)
                {
                    hashCode = (hashCode * 59) + this.MobileIp.GetHashCode();
                }
                if (this.OrderIp != null)
                {
                    hashCode = (hashCode * 59) + this.OrderIp.GetHashCode();
                }
                if (this.Pid != null)
                {
                    hashCode = (hashCode * 59) + this.Pid.GetHashCode();
                }
                if (this.PlatAccount != null)
                {
                    hashCode = (hashCode * 59) + this.PlatAccount.GetHashCode();
                }
                if (this.ProcessCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessCode.GetHashCode();
                }
                if (this.Smid != null)
                {
                    hashCode = (hashCode * 59) + this.Smid.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
