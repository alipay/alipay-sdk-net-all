/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MerchantQueryResult
    /// </summary>
    [DataContract(Name = "MerchantQueryResult")]
    public partial class MerchantQueryResult : IEquatable<MerchantQueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantQueryResult" /> class.
        /// </summary>
        /// <param name="aliasName">商户的别名，用户商户对客展示的名称.</param>
        /// <param name="certNo">商户认证证件号，企业营业执照号.</param>
        /// <param name="city">市名称.</param>
        /// <param name="detailAddress">商户经营详细地址.</param>
        /// <param name="distinct">区县名称.</param>
        /// <param name="mccCode">商户新版mcc code.</param>
        /// <param name="merchantType">描述商户类型，个人-P/企业-B.</param>
        /// <param name="name">商户认证名称信息.</param>
        /// <param name="province">省名称.</param>
        public MerchantQueryResult(string aliasName = default(string), string certNo = default(string), string city = default(string), string detailAddress = default(string), string distinct = default(string), string mccCode = default(string), string merchantType = default(string), string name = default(string), string province = default(string))
        {
            this.AliasName = aliasName;
            this.CertNo = certNo;
            this.City = city;
            this.DetailAddress = detailAddress;
            this.Distinct = distinct;
            this.MccCode = mccCode;
            this.MerchantType = merchantType;
            this.Name = name;
            this.Province = province;
        }

        /// <summary>
        /// 商户的别名，用户商户对客展示的名称
        /// </summary>
        /// <value>商户的别名，用户商户对客展示的名称</value>
        [DataMember(Name = "alias_name", EmitDefaultValue = false)]
        public string AliasName { get; set; }

        /// <summary>
        /// 商户认证证件号，企业营业执照号
        /// </summary>
        /// <value>商户认证证件号，企业营业执照号</value>
        [DataMember(Name = "cert_no", EmitDefaultValue = false)]
        public string CertNo { get; set; }

        /// <summary>
        /// 市名称
        /// </summary>
        /// <value>市名称</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// 商户经营详细地址
        /// </summary>
        /// <value>商户经营详细地址</value>
        [DataMember(Name = "detail_address", EmitDefaultValue = false)]
        public string DetailAddress { get; set; }

        /// <summary>
        /// 区县名称
        /// </summary>
        /// <value>区县名称</value>
        [DataMember(Name = "distinct", EmitDefaultValue = false)]
        public string Distinct { get; set; }

        /// <summary>
        /// 商户新版mcc code
        /// </summary>
        /// <value>商户新版mcc code</value>
        [DataMember(Name = "mcc_code", EmitDefaultValue = false)]
        public string MccCode { get; set; }

        /// <summary>
        /// 描述商户类型，个人-P/企业-B
        /// </summary>
        /// <value>描述商户类型，个人-P/企业-B</value>
        [DataMember(Name = "merchant_type", EmitDefaultValue = false)]
        public string MerchantType { get; set; }

        /// <summary>
        /// 商户认证名称信息
        /// </summary>
        /// <value>商户认证名称信息</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 省名称
        /// </summary>
        /// <value>省名称</value>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantQueryResult {\n");
            sb.Append("  AliasName: ").Append(AliasName).Append("\n");
            sb.Append("  CertNo: ").Append(CertNo).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  DetailAddress: ").Append(DetailAddress).Append("\n");
            sb.Append("  Distinct: ").Append(Distinct).Append("\n");
            sb.Append("  MccCode: ").Append(MccCode).Append("\n");
            sb.Append("  MerchantType: ").Append(MerchantType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantQueryResult);
        }

        /// <summary>
        /// Returns true if MerchantQueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantQueryResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AliasName == input.AliasName ||
                    (this.AliasName != null &&
                    this.AliasName.Equals(input.AliasName))
                ) && 
                (
                    this.CertNo == input.CertNo ||
                    (this.CertNo != null &&
                    this.CertNo.Equals(input.CertNo))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.DetailAddress == input.DetailAddress ||
                    (this.DetailAddress != null &&
                    this.DetailAddress.Equals(input.DetailAddress))
                ) && 
                (
                    this.Distinct == input.Distinct ||
                    (this.Distinct != null &&
                    this.Distinct.Equals(input.Distinct))
                ) && 
                (
                    this.MccCode == input.MccCode ||
                    (this.MccCode != null &&
                    this.MccCode.Equals(input.MccCode))
                ) && 
                (
                    this.MerchantType == input.MerchantType ||
                    (this.MerchantType != null &&
                    this.MerchantType.Equals(input.MerchantType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AliasName != null)
                {
                    hashCode = (hashCode * 59) + this.AliasName.GetHashCode();
                }
                if (this.CertNo != null)
                {
                    hashCode = (hashCode * 59) + this.CertNo.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.DetailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DetailAddress.GetHashCode();
                }
                if (this.Distinct != null)
                {
                    hashCode = (hashCode * 59) + this.Distinct.GetHashCode();
                }
                if (this.MccCode != null)
                {
                    hashCode = (hashCode * 59) + this.MccCode.GetHashCode();
                }
                if (this.MerchantType != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
