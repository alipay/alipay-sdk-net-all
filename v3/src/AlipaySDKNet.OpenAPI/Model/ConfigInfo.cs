/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ConfigInfo
    /// </summary>
    [DataContract(Name = "ConfigInfo")]
    public partial class ConfigInfo : IEquatable<ConfigInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigInfo" /> class.
        /// </summary>
        /// <param name="attachmentExplain">attachmentExplain.</param>
        /// <param name="collectAttachement">是否收集附件.</param>
        /// <param name="collectCertTypes">收集证件类型列表.</param>
        /// <param name="companyNo">公司编号-SF.</param>
        /// <param name="contractValidity">文档过期时间.</param>
        /// <param name="jumpUrl">支付宝小程序跳转.</param>
        /// <param name="merchantMiniSignUrl">商户小程序签署地址（signModel字段值为1时 必填）.</param>
        /// <param name="noticeDeveloperUrl">回调地址，签署的过程和签署完成都会回调。.</param>
        /// <param name="platformOrderNo">平台订单号.</param>
        /// <param name="serialNo">物流单号.</param>
        /// <param name="signModel">签署方式  0-e签宝小程序签署 1-商户小程序签署  默认0.</param>
        public ConfigInfo(AttachmentExplain attachmentExplain = default(AttachmentExplain), bool collectAttachement = default(bool), List<string> collectCertTypes = default(List<string>), string companyNo = default(string), int contractValidity = default(int), string jumpUrl = default(string), string merchantMiniSignUrl = default(string), string noticeDeveloperUrl = default(string), string platformOrderNo = default(string), string serialNo = default(string), int signModel = default(int))
        {
            this.AttachmentExplain = attachmentExplain;
            this.CollectAttachement = collectAttachement;
            this.CollectCertTypes = collectCertTypes;
            this.CompanyNo = companyNo;
            this.ContractValidity = contractValidity;
            this.JumpUrl = jumpUrl;
            this.MerchantMiniSignUrl = merchantMiniSignUrl;
            this.NoticeDeveloperUrl = noticeDeveloperUrl;
            this.PlatformOrderNo = platformOrderNo;
            this.SerialNo = serialNo;
            this.SignModel = signModel;
        }

        /// <summary>
        /// Gets or Sets AttachmentExplain
        /// </summary>
        [DataMember(Name = "attachment_explain", EmitDefaultValue = false)]
        public AttachmentExplain AttachmentExplain { get; set; }

        /// <summary>
        /// 是否收集附件
        /// </summary>
        /// <value>是否收集附件</value>
        [DataMember(Name = "collect_attachement", EmitDefaultValue = true)]
        public bool CollectAttachement { get; set; }

        /// <summary>
        /// 收集证件类型列表
        /// </summary>
        /// <value>收集证件类型列表</value>
        [DataMember(Name = "collect_cert_types", EmitDefaultValue = false)]
        public List<string> CollectCertTypes { get; set; }

        /// <summary>
        /// 公司编号-SF
        /// </summary>
        /// <value>公司编号-SF</value>
        [DataMember(Name = "company_no", EmitDefaultValue = false)]
        public string CompanyNo { get; set; }

        /// <summary>
        /// 文档过期时间
        /// </summary>
        /// <value>文档过期时间</value>
        [DataMember(Name = "contract_validity", EmitDefaultValue = false)]
        public int ContractValidity { get; set; }

        /// <summary>
        /// 支付宝小程序跳转
        /// </summary>
        /// <value>支付宝小程序跳转</value>
        [DataMember(Name = "jump_url", EmitDefaultValue = false)]
        public string JumpUrl { get; set; }

        /// <summary>
        /// 商户小程序签署地址（signModel字段值为1时 必填）
        /// </summary>
        /// <value>商户小程序签署地址（signModel字段值为1时 必填）</value>
        [DataMember(Name = "merchant_mini_sign_url", EmitDefaultValue = false)]
        public string MerchantMiniSignUrl { get; set; }

        /// <summary>
        /// 回调地址，签署的过程和签署完成都会回调。
        /// </summary>
        /// <value>回调地址，签署的过程和签署完成都会回调。</value>
        [DataMember(Name = "notice_developer_url", EmitDefaultValue = false)]
        public string NoticeDeveloperUrl { get; set; }

        /// <summary>
        /// 平台订单号
        /// </summary>
        /// <value>平台订单号</value>
        [DataMember(Name = "platform_order_no", EmitDefaultValue = false)]
        public string PlatformOrderNo { get; set; }

        /// <summary>
        /// 物流单号
        /// </summary>
        /// <value>物流单号</value>
        [DataMember(Name = "serial_no", EmitDefaultValue = false)]
        public string SerialNo { get; set; }

        /// <summary>
        /// 签署方式  0-e签宝小程序签署 1-商户小程序签署  默认0
        /// </summary>
        /// <value>签署方式  0-e签宝小程序签署 1-商户小程序签署  默认0</value>
        [DataMember(Name = "sign_model", EmitDefaultValue = false)]
        public int SignModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigInfo {\n");
            sb.Append("  AttachmentExplain: ").Append(AttachmentExplain).Append("\n");
            sb.Append("  CollectAttachement: ").Append(CollectAttachement).Append("\n");
            sb.Append("  CollectCertTypes: ").Append(CollectCertTypes).Append("\n");
            sb.Append("  CompanyNo: ").Append(CompanyNo).Append("\n");
            sb.Append("  ContractValidity: ").Append(ContractValidity).Append("\n");
            sb.Append("  JumpUrl: ").Append(JumpUrl).Append("\n");
            sb.Append("  MerchantMiniSignUrl: ").Append(MerchantMiniSignUrl).Append("\n");
            sb.Append("  NoticeDeveloperUrl: ").Append(NoticeDeveloperUrl).Append("\n");
            sb.Append("  PlatformOrderNo: ").Append(PlatformOrderNo).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  SignModel: ").Append(SignModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigInfo);
        }

        /// <summary>
        /// Returns true if ConfigInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttachmentExplain == input.AttachmentExplain ||
                    (this.AttachmentExplain != null &&
                    this.AttachmentExplain.Equals(input.AttachmentExplain))
                ) && 
                (
                    this.CollectAttachement == input.CollectAttachement ||
                    this.CollectAttachement.Equals(input.CollectAttachement)
                ) && 
                (
                    this.CollectCertTypes == input.CollectCertTypes ||
                    this.CollectCertTypes != null &&
                    input.CollectCertTypes != null &&
                    this.CollectCertTypes.SequenceEqual(input.CollectCertTypes)
                ) && 
                (
                    this.CompanyNo == input.CompanyNo ||
                    (this.CompanyNo != null &&
                    this.CompanyNo.Equals(input.CompanyNo))
                ) && 
                (
                    this.ContractValidity == input.ContractValidity ||
                    this.ContractValidity.Equals(input.ContractValidity)
                ) && 
                (
                    this.JumpUrl == input.JumpUrl ||
                    (this.JumpUrl != null &&
                    this.JumpUrl.Equals(input.JumpUrl))
                ) && 
                (
                    this.MerchantMiniSignUrl == input.MerchantMiniSignUrl ||
                    (this.MerchantMiniSignUrl != null &&
                    this.MerchantMiniSignUrl.Equals(input.MerchantMiniSignUrl))
                ) && 
                (
                    this.NoticeDeveloperUrl == input.NoticeDeveloperUrl ||
                    (this.NoticeDeveloperUrl != null &&
                    this.NoticeDeveloperUrl.Equals(input.NoticeDeveloperUrl))
                ) && 
                (
                    this.PlatformOrderNo == input.PlatformOrderNo ||
                    (this.PlatformOrderNo != null &&
                    this.PlatformOrderNo.Equals(input.PlatformOrderNo))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.SignModel == input.SignModel ||
                    this.SignModel.Equals(input.SignModel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentExplain != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentExplain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectAttachement.GetHashCode();
                if (this.CollectCertTypes != null)
                {
                    hashCode = (hashCode * 59) + this.CollectCertTypes.GetHashCode();
                }
                if (this.CompanyNo != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyNo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContractValidity.GetHashCode();
                if (this.JumpUrl != null)
                {
                    hashCode = (hashCode * 59) + this.JumpUrl.GetHashCode();
                }
                if (this.MerchantMiniSignUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantMiniSignUrl.GetHashCode();
                }
                if (this.NoticeDeveloperUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NoticeDeveloperUrl.GetHashCode();
                }
                if (this.PlatformOrderNo != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformOrderNo.GetHashCode();
                }
                if (this.SerialNo != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SignModel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
