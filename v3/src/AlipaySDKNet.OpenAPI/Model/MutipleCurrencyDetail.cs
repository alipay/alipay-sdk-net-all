/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MutipleCurrencyDetail
    /// </summary>
    [DataContract(Name = "MutipleCurrencyDetail")]
    public partial class MutipleCurrencyDetail : IEquatable<MutipleCurrencyDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MutipleCurrencyDetail" /> class.
        /// </summary>
        /// <param name="extInfo">扩展字段.</param>
        /// <param name="paymentAmount">支付金额，单位为该币种基础计价单位，如人民币为：元.</param>
        /// <param name="paymentCurrency">支付币种（元）.</param>
        /// <param name="settlementAmount">清算金额，单位为该币种基础计价单位，如人民币为：元.</param>
        /// <param name="settlementCurrency">清算币种（元）.</param>
        /// <param name="transAmount">转账金额，单位为该币种基础计价单位，如人民币为：元.</param>
        /// <param name="transCurrency">转账币种（元）.</param>
        public MutipleCurrencyDetail(string extInfo = default(string), string paymentAmount = default(string), string paymentCurrency = default(string), string settlementAmount = default(string), string settlementCurrency = default(string), string transAmount = default(string), string transCurrency = default(string))
        {
            this.ExtInfo = extInfo;
            this.PaymentAmount = paymentAmount;
            this.PaymentCurrency = paymentCurrency;
            this.SettlementAmount = settlementAmount;
            this.SettlementCurrency = settlementCurrency;
            this.TransAmount = transAmount;
            this.TransCurrency = transCurrency;
        }

        /// <summary>
        /// 扩展字段
        /// </summary>
        /// <value>扩展字段</value>
        [DataMember(Name = "ext_info", EmitDefaultValue = false)]
        public string ExtInfo { get; set; }

        /// <summary>
        /// 支付金额，单位为该币种基础计价单位，如人民币为：元
        /// </summary>
        /// <value>支付金额，单位为该币种基础计价单位，如人民币为：元</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public string PaymentAmount { get; set; }

        /// <summary>
        /// 支付币种（元）
        /// </summary>
        /// <value>支付币种（元）</value>
        [DataMember(Name = "payment_currency", EmitDefaultValue = false)]
        public string PaymentCurrency { get; set; }

        /// <summary>
        /// 清算金额，单位为该币种基础计价单位，如人民币为：元
        /// </summary>
        /// <value>清算金额，单位为该币种基础计价单位，如人民币为：元</value>
        [DataMember(Name = "settlement_amount", EmitDefaultValue = false)]
        public string SettlementAmount { get; set; }

        /// <summary>
        /// 清算币种（元）
        /// </summary>
        /// <value>清算币种（元）</value>
        [DataMember(Name = "settlement_currency", EmitDefaultValue = false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// 转账金额，单位为该币种基础计价单位，如人民币为：元
        /// </summary>
        /// <value>转账金额，单位为该币种基础计价单位，如人民币为：元</value>
        [DataMember(Name = "trans_amount", EmitDefaultValue = false)]
        public string TransAmount { get; set; }

        /// <summary>
        /// 转账币种（元）
        /// </summary>
        /// <value>转账币种（元）</value>
        [DataMember(Name = "trans_currency", EmitDefaultValue = false)]
        public string TransCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MutipleCurrencyDetail {\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentCurrency: ").Append(PaymentCurrency).Append("\n");
            sb.Append("  SettlementAmount: ").Append(SettlementAmount).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  TransAmount: ").Append(TransAmount).Append("\n");
            sb.Append("  TransCurrency: ").Append(TransCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MutipleCurrencyDetail);
        }

        /// <summary>
        /// Returns true if MutipleCurrencyDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of MutipleCurrencyDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutipleCurrencyDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExtInfo == input.ExtInfo ||
                    (this.ExtInfo != null &&
                    this.ExtInfo.Equals(input.ExtInfo))
                ) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    (this.PaymentAmount != null &&
                    this.PaymentAmount.Equals(input.PaymentAmount))
                ) && 
                (
                    this.PaymentCurrency == input.PaymentCurrency ||
                    (this.PaymentCurrency != null &&
                    this.PaymentCurrency.Equals(input.PaymentCurrency))
                ) && 
                (
                    this.SettlementAmount == input.SettlementAmount ||
                    (this.SettlementAmount != null &&
                    this.SettlementAmount.Equals(input.SettlementAmount))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                ) && 
                (
                    this.TransAmount == input.TransAmount ||
                    (this.TransAmount != null &&
                    this.TransAmount.Equals(input.TransAmount))
                ) && 
                (
                    this.TransCurrency == input.TransCurrency ||
                    (this.TransCurrency != null &&
                    this.TransCurrency.Equals(input.TransCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfo.GetHashCode();
                }
                if (this.PaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAmount.GetHashCode();
                }
                if (this.PaymentCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentCurrency.GetHashCode();
                }
                if (this.SettlementAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementAmount.GetHashCode();
                }
                if (this.SettlementCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCurrency.GetHashCode();
                }
                if (this.TransAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TransAmount.GetHashCode();
                }
                if (this.TransCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.TransCurrency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
