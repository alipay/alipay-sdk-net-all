/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradeQueryResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradeQueryResponseModel")]
    public partial class AlipayTradeQueryResponseModel : IEquatable<AlipayTradeQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeQueryResponseModel" /> class.
        /// </summary>
        /// <param name="additionalStatus">交易附加状态： SELLER_NOT_RECEIVED（买家已付款，卖家未收款）；.</param>
        /// <param name="alipayStoreId">支付宝店铺编号.</param>
        /// <param name="alipaySubMerchantId">间连商户在支付宝端的商户编号；  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="asyncPayApplyStatus">异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可重试查询。.</param>
        /// <param name="authTradePayMode">预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY.</param>
        /// <param name="bizSettleMode">账期结算标识，指已完成支付的订单会进行账期管控，不会实时结算。该参数目前会在使用小程序交易组件场景下返回.</param>
        /// <param name="bkagentRespInfo">bkagentRespInfo.</param>
        /// <param name="body">订单描述； 只在银行间联交易场景下返回该信息；.</param>
        /// <param name="buyerLogonId">买家支付宝账号.</param>
        /// <param name="buyerOpenId">买家支付宝用户唯一标识.</param>
        /// <param name="buyerPayAmount">买家实付金额，单位为元，两位小数。该金额代表该笔交易买家实际支付的金额，不包含商户折扣等金额.</param>
        /// <param name="buyerUserId">买家在支付宝的用户id.</param>
        /// <param name="buyerUserName">买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；.</param>
        /// <param name="buyerUserType">买家用户类型。CORPORATE:企业用户；PRIVATE:个人用户。.</param>
        /// <param name="cashierType">收银台类型。  用户支付的收银台类型，取值如下：  APP：支付宝APP收银台支付；  WAP：支付H5收银台支付；  注：只有在无线产品支付接口请求中query_options指定cashier_type才返回该字段。.</param>
        /// <param name="chargeAmount">该笔交易针对收款方的收费金额；单位：元。  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="chargeFlags">费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段； .</param>
        /// <param name="chargeInfoList">计费信息列表.</param>
        /// <param name="creditBizOrderId">信用业务单号。信用支付场景才有值，先用后付产品里是芝麻订单号。.</param>
        /// <param name="creditPayMode">信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。.</param>
        /// <param name="discountAmount">平台优惠金额。单位：元。.</param>
        /// <param name="discountGoodsDetail">本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。.</param>
        /// <param name="enterprisePayInfo">enterprisePayInfo.</param>
        /// <param name="extInfos">交易额外信息，特殊场景下与支付宝约定返回。 json格式。.</param>
        /// <param name="fulfillmentDetailList">履约详情列表。 只有入参的query_options中指定fulfillment_detail_list并且所查询的交易存在履约明细时才返回该字段信息。.</param>
        /// <param name="fundBillList">交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。.</param>
        /// <param name="hbFqPayInfo">hbFqPayInfo.</param>
        /// <param name="hybAmount">惠营宝回票金额。单位：元。.</param>
        /// <param name="industrySepcDetail">行业特殊信息（例如在医保卡支付业务中，向用户返回医疗信息）。.</param>
        /// <param name="industrySepcDetailAcc">行业特殊信息-个账相关.</param>
        /// <param name="industrySepcDetailGov">行业特殊信息-统筹相关.</param>
        /// <param name="intactChargeInfoList">完整的收费信息.</param>
        /// <param name="invoiceAmount">交易中用户支付的可开具发票的金额，单位为元，两位小数。该金额代表该笔交易中可以给用户开具发票的金额.</param>
        /// <param name="mdiscountAmount">商家优惠金额。单位：元。.</param>
        /// <param name="medicalInsuranceInfo">医保信息。入参的query_options中指定时才返回该字段信息。medicareCardType：医保卡类型，\&quot;1\&quot;:\&quot;亲情支付\&quot;,\&quot;0\&quot;:\&quot;本人支付\&quot;，为空默认为本人支付；medicareCardHolderHiddenName：医保卡持卡人姓名。.</param>
        /// <param name="openId">买家支付宝用户号，该字段将废弃，不要使用.</param>
        /// <param name="outTradeNo">商家订单号.</param>
        /// <param name="passbackParams">公用回传参数。 返回支付时传入的passback_params参数信息.</param>
        /// <param name="payAmount">支付币种订单金额.</param>
        /// <param name="payCurrency">订单支付币种.</param>
        /// <param name="paymentInfoWithIdList">带支付宝支付id的信息，暂不对外开放.</param>
        /// <param name="periodScene">该字段用于描述当前账期交易的场景。.</param>
        /// <param name="pointAmount">积分支付的金额，单位为元，两位小数。该金额代表该笔交易中用户使用积分支付的金额，比如集分宝或者支付宝实时优惠等.</param>
        /// <param name="preAuthPayAmount">当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。.</param>
        /// <param name="receiptAmount">实收金额，单位为元，两位小数。该金额为本笔交易，商户账户能够实际收到的金额.</param>
        /// <param name="receiptCurrencyType">收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。.</param>
        /// <param name="reqGoodsDetail">支付请求的商品明细列表.</param>
        /// <param name="sendPayDate">本次交易打款给卖家的时间.</param>
        /// <param name="settleAmount">结算币种订单金额.</param>
        /// <param name="settleCurrency">订单结算币种，对应支付接口传入的settle_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR.</param>
        /// <param name="settleTransRate">结算币种兑换标价币种汇率.</param>
        /// <param name="settlementId">支付清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="storeId">商户门店编号.</param>
        /// <param name="storeName">请求交易支付中的商户店铺的名称.</param>
        /// <param name="subject">订单标题；  只在银行间联交易场景下返回该信息；.</param>
        /// <param name="tapPayInfo">tapPayInfo.</param>
        /// <param name="terminalId">商户机具终端编号.</param>
        /// <param name="totalAmount">交易的订单金额，单位为元，两位小数。该参数的值为支付时传入的total_amount.</param>
        /// <param name="tradeNo">支付宝交易号.</param>
        /// <param name="tradeSettleInfo">tradeSettleInfo.</param>
        /// <param name="tradeStatus">交易状态：WAIT_BUYER_PAY（交易创建，等待买家付款）、TRADE_CLOSED（未付款交易超时关闭，或支付完成后全额退款）、TRADE_SUCCESS（交易支付成功）、TRADE_FINISHED（交易结束，不可退款）.</param>
        /// <param name="transCurrency">标价币种，该参数的值为支付时传入的trans_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY、新台币：TWD。当trans_currency 和 settle_currency 不一致时，trans_currency支持人民币：CNY、新台币：TWD.</param>
        /// <param name="transPayRate">标价币种兑换支付币种汇率.</param>
        /// <param name="voucherDetailList">本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。.</param>
        public AlipayTradeQueryResponseModel(string additionalStatus = default(string), string alipayStoreId = default(string), string alipaySubMerchantId = default(string), string asyncPayApplyStatus = default(string), string authTradePayMode = default(string), string bizSettleMode = default(string), BkAgentRespInfo bkagentRespInfo = default(BkAgentRespInfo), string body = default(string), string buyerLogonId = default(string), string buyerOpenId = default(string), string buyerPayAmount = default(string), string buyerUserId = default(string), string buyerUserName = default(string), string buyerUserType = default(string), string cashierType = default(string), string chargeAmount = default(string), string chargeFlags = default(string), List<ChargeInfo> chargeInfoList = default(List<ChargeInfo>), string creditBizOrderId = default(string), string creditPayMode = default(string), string discountAmount = default(string), string discountGoodsDetail = default(string), EnterprisePayInfo enterprisePayInfo = default(EnterprisePayInfo), string extInfos = default(string), List<FulfillmentDetail> fulfillmentDetailList = default(List<FulfillmentDetail>), List<TradeFundBill> fundBillList = default(List<TradeFundBill>), HbFqPayInfo hbFqPayInfo = default(HbFqPayInfo), string hybAmount = default(string), string industrySepcDetail = default(string), string industrySepcDetailAcc = default(string), string industrySepcDetailGov = default(string), List<IntactChargeInfo> intactChargeInfoList = default(List<IntactChargeInfo>), string invoiceAmount = default(string), string mdiscountAmount = default(string), string medicalInsuranceInfo = default(string), string openId = default(string), string outTradeNo = default(string), string passbackParams = default(string), string payAmount = default(string), string payCurrency = default(string), List<PaymentInfoWithId> paymentInfoWithIdList = default(List<PaymentInfoWithId>), string periodScene = default(string), string pointAmount = default(string), string preAuthPayAmount = default(string), string receiptAmount = default(string), string receiptCurrencyType = default(string), List<GoodsDetail> reqGoodsDetail = default(List<GoodsDetail>), string sendPayDate = default(string), string settleAmount = default(string), string settleCurrency = default(string), string settleTransRate = default(string), string settlementId = default(string), string storeId = default(string), string storeName = default(string), string subject = default(string), TapPayInfo tapPayInfo = default(TapPayInfo), string terminalId = default(string), string totalAmount = default(string), string tradeNo = default(string), TradeSettleInfo tradeSettleInfo = default(TradeSettleInfo), string tradeStatus = default(string), string transCurrency = default(string), string transPayRate = default(string), List<VoucherDetail> voucherDetailList = default(List<VoucherDetail>))
        {
            this.AdditionalStatus = additionalStatus;
            this.AlipayStoreId = alipayStoreId;
            this.AlipaySubMerchantId = alipaySubMerchantId;
            this.AsyncPayApplyStatus = asyncPayApplyStatus;
            this.AuthTradePayMode = authTradePayMode;
            this.BizSettleMode = bizSettleMode;
            this.BkagentRespInfo = bkagentRespInfo;
            this.Body = body;
            this.BuyerLogonId = buyerLogonId;
            this.BuyerOpenId = buyerOpenId;
            this.BuyerPayAmount = buyerPayAmount;
            this.BuyerUserId = buyerUserId;
            this.BuyerUserName = buyerUserName;
            this.BuyerUserType = buyerUserType;
            this.CashierType = cashierType;
            this.ChargeAmount = chargeAmount;
            this.ChargeFlags = chargeFlags;
            this.ChargeInfoList = chargeInfoList;
            this.CreditBizOrderId = creditBizOrderId;
            this.CreditPayMode = creditPayMode;
            this.DiscountAmount = discountAmount;
            this.DiscountGoodsDetail = discountGoodsDetail;
            this.EnterprisePayInfo = enterprisePayInfo;
            this.ExtInfos = extInfos;
            this.FulfillmentDetailList = fulfillmentDetailList;
            this.FundBillList = fundBillList;
            this.HbFqPayInfo = hbFqPayInfo;
            this.HybAmount = hybAmount;
            this.IndustrySepcDetail = industrySepcDetail;
            this.IndustrySepcDetailAcc = industrySepcDetailAcc;
            this.IndustrySepcDetailGov = industrySepcDetailGov;
            this.IntactChargeInfoList = intactChargeInfoList;
            this.InvoiceAmount = invoiceAmount;
            this.MdiscountAmount = mdiscountAmount;
            this.MedicalInsuranceInfo = medicalInsuranceInfo;
            this.OpenId = openId;
            this.OutTradeNo = outTradeNo;
            this.PassbackParams = passbackParams;
            this.PayAmount = payAmount;
            this.PayCurrency = payCurrency;
            this.PaymentInfoWithIdList = paymentInfoWithIdList;
            this.PeriodScene = periodScene;
            this.PointAmount = pointAmount;
            this.PreAuthPayAmount = preAuthPayAmount;
            this.ReceiptAmount = receiptAmount;
            this.ReceiptCurrencyType = receiptCurrencyType;
            this.ReqGoodsDetail = reqGoodsDetail;
            this.SendPayDate = sendPayDate;
            this.SettleAmount = settleAmount;
            this.SettleCurrency = settleCurrency;
            this.SettleTransRate = settleTransRate;
            this.SettlementId = settlementId;
            this.StoreId = storeId;
            this.StoreName = storeName;
            this.Subject = subject;
            this.TapPayInfo = tapPayInfo;
            this.TerminalId = terminalId;
            this.TotalAmount = totalAmount;
            this.TradeNo = tradeNo;
            this.TradeSettleInfo = tradeSettleInfo;
            this.TradeStatus = tradeStatus;
            this.TransCurrency = transCurrency;
            this.TransPayRate = transPayRate;
            this.VoucherDetailList = voucherDetailList;
        }

        /// <summary>
        /// 交易附加状态： SELLER_NOT_RECEIVED（买家已付款，卖家未收款）；
        /// </summary>
        /// <value>交易附加状态： SELLER_NOT_RECEIVED（买家已付款，卖家未收款）；</value>
        [DataMember(Name = "additional_status", EmitDefaultValue = false)]
        public string AdditionalStatus { get; set; }

        /// <summary>
        /// 支付宝店铺编号
        /// </summary>
        /// <value>支付宝店铺编号</value>
        [DataMember(Name = "alipay_store_id", EmitDefaultValue = false)]
        public string AlipayStoreId { get; set; }

        /// <summary>
        /// 间连商户在支付宝端的商户编号；  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>间连商户在支付宝端的商户编号；  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "alipay_sub_merchant_id", EmitDefaultValue = false)]
        public string AlipaySubMerchantId { get; set; }

        /// <summary>
        /// 异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可重试查询。
        /// </summary>
        /// <value>异步支付受理状态，仅异步支付模式且query_options指定async_pay_info时返回。S：受理成功，支付宝内部会在一定期限内捞起任务推进支付，直到支付成功或超出可重试期限；其它：受理结果未知，可重试查询。</value>
        [DataMember(Name = "async_pay_apply_status", EmitDefaultValue = false)]
        public string AsyncPayApplyStatus { get; set; }

        /// <summary>
        /// 预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY
        /// </summary>
        /// <value>预授权支付模式，该参数仅在信用预授权支付场景下返回。信用预授权支付：CREDIT_PREAUTH_PAY</value>
        [DataMember(Name = "auth_trade_pay_mode", EmitDefaultValue = false)]
        public string AuthTradePayMode { get; set; }

        /// <summary>
        /// 账期结算标识，指已完成支付的订单会进行账期管控，不会实时结算。该参数目前会在使用小程序交易组件场景下返回
        /// </summary>
        /// <value>账期结算标识，指已完成支付的订单会进行账期管控，不会实时结算。该参数目前会在使用小程序交易组件场景下返回</value>
        [DataMember(Name = "biz_settle_mode", EmitDefaultValue = false)]
        public string BizSettleMode { get; set; }

        /// <summary>
        /// Gets or Sets BkagentRespInfo
        /// </summary>
        [DataMember(Name = "bkagent_resp_info", EmitDefaultValue = false)]
        public BkAgentRespInfo BkagentRespInfo { get; set; }

        /// <summary>
        /// 订单描述； 只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>订单描述； 只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// 买家支付宝账号
        /// </summary>
        /// <value>买家支付宝账号</value>
        [DataMember(Name = "buyer_logon_id", EmitDefaultValue = false)]
        public string BuyerLogonId { get; set; }

        /// <summary>
        /// 买家支付宝用户唯一标识
        /// </summary>
        /// <value>买家支付宝用户唯一标识</value>
        [DataMember(Name = "buyer_open_id", EmitDefaultValue = false)]
        public string BuyerOpenId { get; set; }

        /// <summary>
        /// 买家实付金额，单位为元，两位小数。该金额代表该笔交易买家实际支付的金额，不包含商户折扣等金额
        /// </summary>
        /// <value>买家实付金额，单位为元，两位小数。该金额代表该笔交易买家实际支付的金额，不包含商户折扣等金额</value>
        [DataMember(Name = "buyer_pay_amount", EmitDefaultValue = false)]
        public string BuyerPayAmount { get; set; }

        /// <summary>
        /// 买家在支付宝的用户id
        /// </summary>
        /// <value>买家在支付宝的用户id</value>
        [DataMember(Name = "buyer_user_id", EmitDefaultValue = false)]
        public string BuyerUserId { get; set; }

        /// <summary>
        /// 买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；
        /// </summary>
        /// <value>买家名称；  买家为个人用户时为买家姓名，买家为企业用户时为企业名称；  默认不返回该信息，需与支付宝约定后配置返回；</value>
        [DataMember(Name = "buyer_user_name", EmitDefaultValue = false)]
        public string BuyerUserName { get; set; }

        /// <summary>
        /// 买家用户类型。CORPORATE:企业用户；PRIVATE:个人用户。
        /// </summary>
        /// <value>买家用户类型。CORPORATE:企业用户；PRIVATE:个人用户。</value>
        [DataMember(Name = "buyer_user_type", EmitDefaultValue = false)]
        public string BuyerUserType { get; set; }

        /// <summary>
        /// 收银台类型。  用户支付的收银台类型，取值如下：  APP：支付宝APP收银台支付；  WAP：支付H5收银台支付；  注：只有在无线产品支付接口请求中query_options指定cashier_type才返回该字段。
        /// </summary>
        /// <value>收银台类型。  用户支付的收银台类型，取值如下：  APP：支付宝APP收银台支付；  WAP：支付H5收银台支付；  注：只有在无线产品支付接口请求中query_options指定cashier_type才返回该字段。</value>
        [DataMember(Name = "cashier_type", EmitDefaultValue = false)]
        public string CashierType { get; set; }

        /// <summary>
        /// 该笔交易针对收款方的收费金额；单位：元。  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>该笔交易针对收款方的收费金额；单位：元。  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "charge_amount", EmitDefaultValue = false)]
        public string ChargeAmount { get; set; }

        /// <summary>
        /// 费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段； 
        /// </summary>
        /// <value>费率活动标识。 当交易享受特殊行业或活动费率时，返回该场景的标识。具体场景如下： trade_special_00：订单优惠费率； industry_special_on_00：线上行业特殊费率0； industry_special_on_01：线上行业特殊费率1； industry_special_00：线下行业特殊费率0； industry_special_01：线下行业特殊费率1； bluesea_1：蓝海活动优惠费率标签； 注：只在机构间联模式下返回，其它场景下不返回该字段； </value>
        [DataMember(Name = "charge_flags", EmitDefaultValue = false)]
        public string ChargeFlags { get; set; }

        /// <summary>
        /// 计费信息列表
        /// </summary>
        /// <value>计费信息列表</value>
        [DataMember(Name = "charge_info_list", EmitDefaultValue = false)]
        public List<ChargeInfo> ChargeInfoList { get; set; }

        /// <summary>
        /// 信用业务单号。信用支付场景才有值，先用后付产品里是芝麻订单号。
        /// </summary>
        /// <value>信用业务单号。信用支付场景才有值，先用后付产品里是芝麻订单号。</value>
        [DataMember(Name = "credit_biz_order_id", EmitDefaultValue = false)]
        public string CreditBizOrderId { get; set; }

        /// <summary>
        /// 信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。
        /// </summary>
        /// <value>信用支付模式。表示订单是采用信用支付方式（支付时买家没有出资，需要后续履约）。\&quot;creditAdvanceV2\&quot;表示芝麻先用后付模式，用户后续需要履约扣款。 此字段只有信用支付场景才有值，商户需要根据字段值单独处理。此字段以后可能扩展其他值，建议商户使用白名单方式识别，对于未识别的值做失败处理，并联系支付宝技术支持人员。</value>
        [DataMember(Name = "credit_pay_mode", EmitDefaultValue = false)]
        public string CreditPayMode { get; set; }

        /// <summary>
        /// 平台优惠金额。单位：元。
        /// </summary>
        /// <value>平台优惠金额。单位：元。</value>
        [DataMember(Name = "discount_amount", EmitDefaultValue = false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// 本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>本次交易支付所使用的单品券优惠的商品优惠信息。 只有在query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "discount_goods_detail", EmitDefaultValue = false)]
        public string DiscountGoodsDetail { get; set; }

        /// <summary>
        /// Gets or Sets EnterprisePayInfo
        /// </summary>
        [DataMember(Name = "enterprise_pay_info", EmitDefaultValue = false)]
        public EnterprisePayInfo EnterprisePayInfo { get; set; }

        /// <summary>
        /// 交易额外信息，特殊场景下与支付宝约定返回。 json格式。
        /// </summary>
        /// <value>交易额外信息，特殊场景下与支付宝约定返回。 json格式。</value>
        [DataMember(Name = "ext_infos", EmitDefaultValue = false)]
        public string ExtInfos { get; set; }

        /// <summary>
        /// 履约详情列表。 只有入参的query_options中指定fulfillment_detail_list并且所查询的交易存在履约明细时才返回该字段信息。
        /// </summary>
        /// <value>履约详情列表。 只有入参的query_options中指定fulfillment_detail_list并且所查询的交易存在履约明细时才返回该字段信息。</value>
        [DataMember(Name = "fulfillment_detail_list", EmitDefaultValue = false)]
        public List<FulfillmentDetail> FulfillmentDetailList { get; set; }

        /// <summary>
        /// 交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>交易支付使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "fund_bill_list", EmitDefaultValue = false)]
        public List<TradeFundBill> FundBillList { get; set; }

        /// <summary>
        /// Gets or Sets HbFqPayInfo
        /// </summary>
        [DataMember(Name = "hb_fq_pay_info", EmitDefaultValue = false)]
        public HbFqPayInfo HbFqPayInfo { get; set; }

        /// <summary>
        /// 惠营宝回票金额。单位：元。
        /// </summary>
        /// <value>惠营宝回票金额。单位：元。</value>
        [DataMember(Name = "hyb_amount", EmitDefaultValue = false)]
        public string HybAmount { get; set; }

        /// <summary>
        /// 行业特殊信息（例如在医保卡支付业务中，向用户返回医疗信息）。
        /// </summary>
        /// <value>行业特殊信息（例如在医保卡支付业务中，向用户返回医疗信息）。</value>
        [DataMember(Name = "industry_sepc_detail", EmitDefaultValue = false)]
        public string IndustrySepcDetail { get; set; }

        /// <summary>
        /// 行业特殊信息-个账相关
        /// </summary>
        /// <value>行业特殊信息-个账相关</value>
        [DataMember(Name = "industry_sepc_detail_acc", EmitDefaultValue = false)]
        public string IndustrySepcDetailAcc { get; set; }

        /// <summary>
        /// 行业特殊信息-统筹相关
        /// </summary>
        /// <value>行业特殊信息-统筹相关</value>
        [DataMember(Name = "industry_sepc_detail_gov", EmitDefaultValue = false)]
        public string IndustrySepcDetailGov { get; set; }

        /// <summary>
        /// 完整的收费信息
        /// </summary>
        /// <value>完整的收费信息</value>
        [DataMember(Name = "intact_charge_info_list", EmitDefaultValue = false)]
        public List<IntactChargeInfo> IntactChargeInfoList { get; set; }

        /// <summary>
        /// 交易中用户支付的可开具发票的金额，单位为元，两位小数。该金额代表该笔交易中可以给用户开具发票的金额
        /// </summary>
        /// <value>交易中用户支付的可开具发票的金额，单位为元，两位小数。该金额代表该笔交易中可以给用户开具发票的金额</value>
        [DataMember(Name = "invoice_amount", EmitDefaultValue = false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// 商家优惠金额。单位：元。
        /// </summary>
        /// <value>商家优惠金额。单位：元。</value>
        [DataMember(Name = "mdiscount_amount", EmitDefaultValue = false)]
        public string MdiscountAmount { get; set; }

        /// <summary>
        /// 医保信息。入参的query_options中指定时才返回该字段信息。medicareCardType：医保卡类型，\&quot;1\&quot;:\&quot;亲情支付\&quot;,\&quot;0\&quot;:\&quot;本人支付\&quot;，为空默认为本人支付；medicareCardHolderHiddenName：医保卡持卡人姓名。
        /// </summary>
        /// <value>医保信息。入参的query_options中指定时才返回该字段信息。medicareCardType：医保卡类型，\&quot;1\&quot;:\&quot;亲情支付\&quot;,\&quot;0\&quot;:\&quot;本人支付\&quot;，为空默认为本人支付；medicareCardHolderHiddenName：医保卡持卡人姓名。</value>
        [DataMember(Name = "medical_insurance_info", EmitDefaultValue = false)]
        public string MedicalInsuranceInfo { get; set; }

        /// <summary>
        /// 买家支付宝用户号，该字段将废弃，不要使用
        /// </summary>
        /// <value>买家支付宝用户号，该字段将废弃，不要使用</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 商家订单号
        /// </summary>
        /// <value>商家订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 公用回传参数。 返回支付时传入的passback_params参数信息
        /// </summary>
        /// <value>公用回传参数。 返回支付时传入的passback_params参数信息</value>
        [DataMember(Name = "passback_params", EmitDefaultValue = false)]
        public string PassbackParams { get; set; }

        /// <summary>
        /// 支付币种订单金额
        /// </summary>
        /// <value>支付币种订单金额</value>
        [DataMember(Name = "pay_amount", EmitDefaultValue = false)]
        public string PayAmount { get; set; }

        /// <summary>
        /// 订单支付币种
        /// </summary>
        /// <value>订单支付币种</value>
        [DataMember(Name = "pay_currency", EmitDefaultValue = false)]
        public string PayCurrency { get; set; }

        /// <summary>
        /// 带支付宝支付id的信息，暂不对外开放
        /// </summary>
        /// <value>带支付宝支付id的信息，暂不对外开放</value>
        [DataMember(Name = "payment_info_with_id_list", EmitDefaultValue = false)]
        public List<PaymentInfoWithId> PaymentInfoWithIdList { get; set; }

        /// <summary>
        /// 该字段用于描述当前账期交易的场景。
        /// </summary>
        /// <value>该字段用于描述当前账期交易的场景。</value>
        [DataMember(Name = "period_scene", EmitDefaultValue = false)]
        public string PeriodScene { get; set; }

        /// <summary>
        /// 积分支付的金额，单位为元，两位小数。该金额代表该笔交易中用户使用积分支付的金额，比如集分宝或者支付宝实时优惠等
        /// </summary>
        /// <value>积分支付的金额，单位为元，两位小数。该金额代表该笔交易中用户使用积分支付的金额，比如集分宝或者支付宝实时优惠等</value>
        [DataMember(Name = "point_amount", EmitDefaultValue = false)]
        public string PointAmount { get; set; }

        /// <summary>
        /// 当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。
        /// </summary>
        /// <value>当用户使用芝麻信用先享后付时，会返回该字段，代表整笔交易的原始待履约金额，单位元。</value>
        [DataMember(Name = "pre_auth_pay_amount", EmitDefaultValue = false)]
        public string PreAuthPayAmount { get; set; }

        /// <summary>
        /// 实收金额，单位为元，两位小数。该金额为本笔交易，商户账户能够实际收到的金额
        /// </summary>
        /// <value>实收金额，单位为元，两位小数。该金额为本笔交易，商户账户能够实际收到的金额</value>
        [DataMember(Name = "receipt_amount", EmitDefaultValue = false)]
        public string ReceiptAmount { get; set; }

        /// <summary>
        /// 收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。
        /// </summary>
        /// <value>收款资金类型，当交易收款资金为数字人民币时返回值为“DC”，否则不返回该字段。</value>
        [DataMember(Name = "receipt_currency_type", EmitDefaultValue = false)]
        public string ReceiptCurrencyType { get; set; }

        /// <summary>
        /// 支付请求的商品明细列表
        /// </summary>
        /// <value>支付请求的商品明细列表</value>
        [DataMember(Name = "req_goods_detail", EmitDefaultValue = false)]
        public List<GoodsDetail> ReqGoodsDetail { get; set; }

        /// <summary>
        /// 本次交易打款给卖家的时间
        /// </summary>
        /// <value>本次交易打款给卖家的时间</value>
        [DataMember(Name = "send_pay_date", EmitDefaultValue = false)]
        public string SendPayDate { get; set; }

        /// <summary>
        /// 结算币种订单金额
        /// </summary>
        /// <value>结算币种订单金额</value>
        [DataMember(Name = "settle_amount", EmitDefaultValue = false)]
        public string SettleAmount { get; set; }

        /// <summary>
        /// 订单结算币种，对应支付接口传入的settle_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR
        /// </summary>
        /// <value>订单结算币种，对应支付接口传入的settle_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR</value>
        [DataMember(Name = "settle_currency", EmitDefaultValue = false)]
        public string SettleCurrency { get; set; }

        /// <summary>
        /// 结算币种兑换标价币种汇率
        /// </summary>
        /// <value>结算币种兑换标价币种汇率</value>
        [DataMember(Name = "settle_trans_rate", EmitDefaultValue = false)]
        public string SettleTransRate { get; set; }

        /// <summary>
        /// 支付清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>支付清算编号，用于清算对账使用；  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "settlement_id", EmitDefaultValue = false)]
        public string SettlementId { get; set; }

        /// <summary>
        /// 商户门店编号
        /// </summary>
        /// <value>商户门店编号</value>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// 请求交易支付中的商户店铺的名称
        /// </summary>
        /// <value>请求交易支付中的商户店铺的名称</value>
        [DataMember(Name = "store_name", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// 订单标题；  只在银行间联交易场景下返回该信息；
        /// </summary>
        /// <value>订单标题；  只在银行间联交易场景下返回该信息；</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets TapPayInfo
        /// </summary>
        [DataMember(Name = "tap_pay_info", EmitDefaultValue = false)]
        public TapPayInfo TapPayInfo { get; set; }

        /// <summary>
        /// 商户机具终端编号
        /// </summary>
        /// <value>商户机具终端编号</value>
        [DataMember(Name = "terminal_id", EmitDefaultValue = false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// 交易的订单金额，单位为元，两位小数。该参数的值为支付时传入的total_amount
        /// </summary>
        /// <value>交易的订单金额，单位为元，两位小数。该参数的值为支付时传入的total_amount</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// 支付宝交易号
        /// </summary>
        /// <value>支付宝交易号</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// Gets or Sets TradeSettleInfo
        /// </summary>
        [DataMember(Name = "trade_settle_info", EmitDefaultValue = false)]
        public TradeSettleInfo TradeSettleInfo { get; set; }

        /// <summary>
        /// 交易状态：WAIT_BUYER_PAY（交易创建，等待买家付款）、TRADE_CLOSED（未付款交易超时关闭，或支付完成后全额退款）、TRADE_SUCCESS（交易支付成功）、TRADE_FINISHED（交易结束，不可退款）
        /// </summary>
        /// <value>交易状态：WAIT_BUYER_PAY（交易创建，等待买家付款）、TRADE_CLOSED（未付款交易超时关闭，或支付完成后全额退款）、TRADE_SUCCESS（交易支付成功）、TRADE_FINISHED（交易结束，不可退款）</value>
        [DataMember(Name = "trade_status", EmitDefaultValue = false)]
        public string TradeStatus { get; set; }

        /// <summary>
        /// 标价币种，该参数的值为支付时传入的trans_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY、新台币：TWD。当trans_currency 和 settle_currency 不一致时，trans_currency支持人民币：CNY、新台币：TWD
        /// </summary>
        /// <value>标价币种，该参数的值为支付时传入的trans_currency，支持英镑：GBP、港币：HKD、美元：USD、新加坡元：SGD、日元：JPY、加拿大元：CAD、澳元：AUD、欧元：EUR、新西兰元：NZD、韩元：KRW、泰铢：THB、瑞士法郎：CHF、瑞典克朗：SEK、丹麦克朗：DKK、挪威克朗：NOK、马来西亚林吉特：MYR、印尼卢比：IDR、菲律宾比索：PHP、毛里求斯卢比：MUR、以色列新谢克尔：ILS、斯里兰卡卢比：LKR、俄罗斯卢布：RUB、阿联酋迪拉姆：AED、捷克克朗：CZK、南非兰特：ZAR、人民币：CNY、新台币：TWD。当trans_currency 和 settle_currency 不一致时，trans_currency支持人民币：CNY、新台币：TWD</value>
        [DataMember(Name = "trans_currency", EmitDefaultValue = false)]
        public string TransCurrency { get; set; }

        /// <summary>
        /// 标价币种兑换支付币种汇率
        /// </summary>
        /// <value>标价币种兑换支付币种汇率</value>
        [DataMember(Name = "trans_pay_rate", EmitDefaultValue = false)]
        public string TransPayRate { get; set; }

        /// <summary>
        /// 本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>本交易支付时使用的所有优惠券信息。 只有在query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "voucher_detail_list", EmitDefaultValue = false)]
        public List<VoucherDetail> VoucherDetailList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeQueryResponseModel {\n");
            sb.Append("  AdditionalStatus: ").Append(AdditionalStatus).Append("\n");
            sb.Append("  AlipayStoreId: ").Append(AlipayStoreId).Append("\n");
            sb.Append("  AlipaySubMerchantId: ").Append(AlipaySubMerchantId).Append("\n");
            sb.Append("  AsyncPayApplyStatus: ").Append(AsyncPayApplyStatus).Append("\n");
            sb.Append("  AuthTradePayMode: ").Append(AuthTradePayMode).Append("\n");
            sb.Append("  BizSettleMode: ").Append(BizSettleMode).Append("\n");
            sb.Append("  BkagentRespInfo: ").Append(BkagentRespInfo).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  BuyerPayAmount: ").Append(BuyerPayAmount).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  BuyerUserName: ").Append(BuyerUserName).Append("\n");
            sb.Append("  BuyerUserType: ").Append(BuyerUserType).Append("\n");
            sb.Append("  CashierType: ").Append(CashierType).Append("\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  ChargeFlags: ").Append(ChargeFlags).Append("\n");
            sb.Append("  ChargeInfoList: ").Append(ChargeInfoList).Append("\n");
            sb.Append("  CreditBizOrderId: ").Append(CreditBizOrderId).Append("\n");
            sb.Append("  CreditPayMode: ").Append(CreditPayMode).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountGoodsDetail: ").Append(DiscountGoodsDetail).Append("\n");
            sb.Append("  EnterprisePayInfo: ").Append(EnterprisePayInfo).Append("\n");
            sb.Append("  ExtInfos: ").Append(ExtInfos).Append("\n");
            sb.Append("  FulfillmentDetailList: ").Append(FulfillmentDetailList).Append("\n");
            sb.Append("  FundBillList: ").Append(FundBillList).Append("\n");
            sb.Append("  HbFqPayInfo: ").Append(HbFqPayInfo).Append("\n");
            sb.Append("  HybAmount: ").Append(HybAmount).Append("\n");
            sb.Append("  IndustrySepcDetail: ").Append(IndustrySepcDetail).Append("\n");
            sb.Append("  IndustrySepcDetailAcc: ").Append(IndustrySepcDetailAcc).Append("\n");
            sb.Append("  IndustrySepcDetailGov: ").Append(IndustrySepcDetailGov).Append("\n");
            sb.Append("  IntactChargeInfoList: ").Append(IntactChargeInfoList).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  MdiscountAmount: ").Append(MdiscountAmount).Append("\n");
            sb.Append("  MedicalInsuranceInfo: ").Append(MedicalInsuranceInfo).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PassbackParams: ").Append(PassbackParams).Append("\n");
            sb.Append("  PayAmount: ").Append(PayAmount).Append("\n");
            sb.Append("  PayCurrency: ").Append(PayCurrency).Append("\n");
            sb.Append("  PaymentInfoWithIdList: ").Append(PaymentInfoWithIdList).Append("\n");
            sb.Append("  PeriodScene: ").Append(PeriodScene).Append("\n");
            sb.Append("  PointAmount: ").Append(PointAmount).Append("\n");
            sb.Append("  PreAuthPayAmount: ").Append(PreAuthPayAmount).Append("\n");
            sb.Append("  ReceiptAmount: ").Append(ReceiptAmount).Append("\n");
            sb.Append("  ReceiptCurrencyType: ").Append(ReceiptCurrencyType).Append("\n");
            sb.Append("  ReqGoodsDetail: ").Append(ReqGoodsDetail).Append("\n");
            sb.Append("  SendPayDate: ").Append(SendPayDate).Append("\n");
            sb.Append("  SettleAmount: ").Append(SettleAmount).Append("\n");
            sb.Append("  SettleCurrency: ").Append(SettleCurrency).Append("\n");
            sb.Append("  SettleTransRate: ").Append(SettleTransRate).Append("\n");
            sb.Append("  SettlementId: ").Append(SettlementId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TapPayInfo: ").Append(TapPayInfo).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  TradeSettleInfo: ").Append(TradeSettleInfo).Append("\n");
            sb.Append("  TradeStatus: ").Append(TradeStatus).Append("\n");
            sb.Append("  TransCurrency: ").Append(TransCurrency).Append("\n");
            sb.Append("  TransPayRate: ").Append(TransPayRate).Append("\n");
            sb.Append("  VoucherDetailList: ").Append(VoucherDetailList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradeQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradeQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradeQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradeQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdditionalStatus == input.AdditionalStatus ||
                    (this.AdditionalStatus != null &&
                    this.AdditionalStatus.Equals(input.AdditionalStatus))
                ) && 
                (
                    this.AlipayStoreId == input.AlipayStoreId ||
                    (this.AlipayStoreId != null &&
                    this.AlipayStoreId.Equals(input.AlipayStoreId))
                ) && 
                (
                    this.AlipaySubMerchantId == input.AlipaySubMerchantId ||
                    (this.AlipaySubMerchantId != null &&
                    this.AlipaySubMerchantId.Equals(input.AlipaySubMerchantId))
                ) && 
                (
                    this.AsyncPayApplyStatus == input.AsyncPayApplyStatus ||
                    (this.AsyncPayApplyStatus != null &&
                    this.AsyncPayApplyStatus.Equals(input.AsyncPayApplyStatus))
                ) && 
                (
                    this.AuthTradePayMode == input.AuthTradePayMode ||
                    (this.AuthTradePayMode != null &&
                    this.AuthTradePayMode.Equals(input.AuthTradePayMode))
                ) && 
                (
                    this.BizSettleMode == input.BizSettleMode ||
                    (this.BizSettleMode != null &&
                    this.BizSettleMode.Equals(input.BizSettleMode))
                ) && 
                (
                    this.BkagentRespInfo == input.BkagentRespInfo ||
                    (this.BkagentRespInfo != null &&
                    this.BkagentRespInfo.Equals(input.BkagentRespInfo))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.BuyerLogonId == input.BuyerLogonId ||
                    (this.BuyerLogonId != null &&
                    this.BuyerLogonId.Equals(input.BuyerLogonId))
                ) && 
                (
                    this.BuyerOpenId == input.BuyerOpenId ||
                    (this.BuyerOpenId != null &&
                    this.BuyerOpenId.Equals(input.BuyerOpenId))
                ) && 
                (
                    this.BuyerPayAmount == input.BuyerPayAmount ||
                    (this.BuyerPayAmount != null &&
                    this.BuyerPayAmount.Equals(input.BuyerPayAmount))
                ) && 
                (
                    this.BuyerUserId == input.BuyerUserId ||
                    (this.BuyerUserId != null &&
                    this.BuyerUserId.Equals(input.BuyerUserId))
                ) && 
                (
                    this.BuyerUserName == input.BuyerUserName ||
                    (this.BuyerUserName != null &&
                    this.BuyerUserName.Equals(input.BuyerUserName))
                ) && 
                (
                    this.BuyerUserType == input.BuyerUserType ||
                    (this.BuyerUserType != null &&
                    this.BuyerUserType.Equals(input.BuyerUserType))
                ) && 
                (
                    this.CashierType == input.CashierType ||
                    (this.CashierType != null &&
                    this.CashierType.Equals(input.CashierType))
                ) && 
                (
                    this.ChargeAmount == input.ChargeAmount ||
                    (this.ChargeAmount != null &&
                    this.ChargeAmount.Equals(input.ChargeAmount))
                ) && 
                (
                    this.ChargeFlags == input.ChargeFlags ||
                    (this.ChargeFlags != null &&
                    this.ChargeFlags.Equals(input.ChargeFlags))
                ) && 
                (
                    this.ChargeInfoList == input.ChargeInfoList ||
                    this.ChargeInfoList != null &&
                    input.ChargeInfoList != null &&
                    this.ChargeInfoList.SequenceEqual(input.ChargeInfoList)
                ) && 
                (
                    this.CreditBizOrderId == input.CreditBizOrderId ||
                    (this.CreditBizOrderId != null &&
                    this.CreditBizOrderId.Equals(input.CreditBizOrderId))
                ) && 
                (
                    this.CreditPayMode == input.CreditPayMode ||
                    (this.CreditPayMode != null &&
                    this.CreditPayMode.Equals(input.CreditPayMode))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.DiscountGoodsDetail == input.DiscountGoodsDetail ||
                    (this.DiscountGoodsDetail != null &&
                    this.DiscountGoodsDetail.Equals(input.DiscountGoodsDetail))
                ) && 
                (
                    this.EnterprisePayInfo == input.EnterprisePayInfo ||
                    (this.EnterprisePayInfo != null &&
                    this.EnterprisePayInfo.Equals(input.EnterprisePayInfo))
                ) && 
                (
                    this.ExtInfos == input.ExtInfos ||
                    (this.ExtInfos != null &&
                    this.ExtInfos.Equals(input.ExtInfos))
                ) && 
                (
                    this.FulfillmentDetailList == input.FulfillmentDetailList ||
                    this.FulfillmentDetailList != null &&
                    input.FulfillmentDetailList != null &&
                    this.FulfillmentDetailList.SequenceEqual(input.FulfillmentDetailList)
                ) && 
                (
                    this.FundBillList == input.FundBillList ||
                    this.FundBillList != null &&
                    input.FundBillList != null &&
                    this.FundBillList.SequenceEqual(input.FundBillList)
                ) && 
                (
                    this.HbFqPayInfo == input.HbFqPayInfo ||
                    (this.HbFqPayInfo != null &&
                    this.HbFqPayInfo.Equals(input.HbFqPayInfo))
                ) && 
                (
                    this.HybAmount == input.HybAmount ||
                    (this.HybAmount != null &&
                    this.HybAmount.Equals(input.HybAmount))
                ) && 
                (
                    this.IndustrySepcDetail == input.IndustrySepcDetail ||
                    (this.IndustrySepcDetail != null &&
                    this.IndustrySepcDetail.Equals(input.IndustrySepcDetail))
                ) && 
                (
                    this.IndustrySepcDetailAcc == input.IndustrySepcDetailAcc ||
                    (this.IndustrySepcDetailAcc != null &&
                    this.IndustrySepcDetailAcc.Equals(input.IndustrySepcDetailAcc))
                ) && 
                (
                    this.IndustrySepcDetailGov == input.IndustrySepcDetailGov ||
                    (this.IndustrySepcDetailGov != null &&
                    this.IndustrySepcDetailGov.Equals(input.IndustrySepcDetailGov))
                ) && 
                (
                    this.IntactChargeInfoList == input.IntactChargeInfoList ||
                    this.IntactChargeInfoList != null &&
                    input.IntactChargeInfoList != null &&
                    this.IntactChargeInfoList.SequenceEqual(input.IntactChargeInfoList)
                ) && 
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) && 
                (
                    this.MdiscountAmount == input.MdiscountAmount ||
                    (this.MdiscountAmount != null &&
                    this.MdiscountAmount.Equals(input.MdiscountAmount))
                ) && 
                (
                    this.MedicalInsuranceInfo == input.MedicalInsuranceInfo ||
                    (this.MedicalInsuranceInfo != null &&
                    this.MedicalInsuranceInfo.Equals(input.MedicalInsuranceInfo))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.PassbackParams == input.PassbackParams ||
                    (this.PassbackParams != null &&
                    this.PassbackParams.Equals(input.PassbackParams))
                ) && 
                (
                    this.PayAmount == input.PayAmount ||
                    (this.PayAmount != null &&
                    this.PayAmount.Equals(input.PayAmount))
                ) && 
                (
                    this.PayCurrency == input.PayCurrency ||
                    (this.PayCurrency != null &&
                    this.PayCurrency.Equals(input.PayCurrency))
                ) && 
                (
                    this.PaymentInfoWithIdList == input.PaymentInfoWithIdList ||
                    this.PaymentInfoWithIdList != null &&
                    input.PaymentInfoWithIdList != null &&
                    this.PaymentInfoWithIdList.SequenceEqual(input.PaymentInfoWithIdList)
                ) && 
                (
                    this.PeriodScene == input.PeriodScene ||
                    (this.PeriodScene != null &&
                    this.PeriodScene.Equals(input.PeriodScene))
                ) && 
                (
                    this.PointAmount == input.PointAmount ||
                    (this.PointAmount != null &&
                    this.PointAmount.Equals(input.PointAmount))
                ) && 
                (
                    this.PreAuthPayAmount == input.PreAuthPayAmount ||
                    (this.PreAuthPayAmount != null &&
                    this.PreAuthPayAmount.Equals(input.PreAuthPayAmount))
                ) && 
                (
                    this.ReceiptAmount == input.ReceiptAmount ||
                    (this.ReceiptAmount != null &&
                    this.ReceiptAmount.Equals(input.ReceiptAmount))
                ) && 
                (
                    this.ReceiptCurrencyType == input.ReceiptCurrencyType ||
                    (this.ReceiptCurrencyType != null &&
                    this.ReceiptCurrencyType.Equals(input.ReceiptCurrencyType))
                ) && 
                (
                    this.ReqGoodsDetail == input.ReqGoodsDetail ||
                    this.ReqGoodsDetail != null &&
                    input.ReqGoodsDetail != null &&
                    this.ReqGoodsDetail.SequenceEqual(input.ReqGoodsDetail)
                ) && 
                (
                    this.SendPayDate == input.SendPayDate ||
                    (this.SendPayDate != null &&
                    this.SendPayDate.Equals(input.SendPayDate))
                ) && 
                (
                    this.SettleAmount == input.SettleAmount ||
                    (this.SettleAmount != null &&
                    this.SettleAmount.Equals(input.SettleAmount))
                ) && 
                (
                    this.SettleCurrency == input.SettleCurrency ||
                    (this.SettleCurrency != null &&
                    this.SettleCurrency.Equals(input.SettleCurrency))
                ) && 
                (
                    this.SettleTransRate == input.SettleTransRate ||
                    (this.SettleTransRate != null &&
                    this.SettleTransRate.Equals(input.SettleTransRate))
                ) && 
                (
                    this.SettlementId == input.SettlementId ||
                    (this.SettlementId != null &&
                    this.SettlementId.Equals(input.SettlementId))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TapPayInfo == input.TapPayInfo ||
                    (this.TapPayInfo != null &&
                    this.TapPayInfo.Equals(input.TapPayInfo))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                ) && 
                (
                    this.TradeSettleInfo == input.TradeSettleInfo ||
                    (this.TradeSettleInfo != null &&
                    this.TradeSettleInfo.Equals(input.TradeSettleInfo))
                ) && 
                (
                    this.TradeStatus == input.TradeStatus ||
                    (this.TradeStatus != null &&
                    this.TradeStatus.Equals(input.TradeStatus))
                ) && 
                (
                    this.TransCurrency == input.TransCurrency ||
                    (this.TransCurrency != null &&
                    this.TransCurrency.Equals(input.TransCurrency))
                ) && 
                (
                    this.TransPayRate == input.TransPayRate ||
                    (this.TransPayRate != null &&
                    this.TransPayRate.Equals(input.TransPayRate))
                ) && 
                (
                    this.VoucherDetailList == input.VoucherDetailList ||
                    this.VoucherDetailList != null &&
                    input.VoucherDetailList != null &&
                    this.VoucherDetailList.SequenceEqual(input.VoucherDetailList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalStatus.GetHashCode();
                }
                if (this.AlipayStoreId != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayStoreId.GetHashCode();
                }
                if (this.AlipaySubMerchantId != null)
                {
                    hashCode = (hashCode * 59) + this.AlipaySubMerchantId.GetHashCode();
                }
                if (this.AsyncPayApplyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.AsyncPayApplyStatus.GetHashCode();
                }
                if (this.AuthTradePayMode != null)
                {
                    hashCode = (hashCode * 59) + this.AuthTradePayMode.GetHashCode();
                }
                if (this.BizSettleMode != null)
                {
                    hashCode = (hashCode * 59) + this.BizSettleMode.GetHashCode();
                }
                if (this.BkagentRespInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BkagentRespInfo.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.BuyerLogonId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerLogonId.GetHashCode();
                }
                if (this.BuyerOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerOpenId.GetHashCode();
                }
                if (this.BuyerPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerPayAmount.GetHashCode();
                }
                if (this.BuyerUserId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserId.GetHashCode();
                }
                if (this.BuyerUserName != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserName.GetHashCode();
                }
                if (this.BuyerUserType != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserType.GetHashCode();
                }
                if (this.CashierType != null)
                {
                    hashCode = (hashCode * 59) + this.CashierType.GetHashCode();
                }
                if (this.ChargeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeAmount.GetHashCode();
                }
                if (this.ChargeFlags != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeFlags.GetHashCode();
                }
                if (this.ChargeInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeInfoList.GetHashCode();
                }
                if (this.CreditBizOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.CreditBizOrderId.GetHashCode();
                }
                if (this.CreditPayMode != null)
                {
                    hashCode = (hashCode * 59) + this.CreditPayMode.GetHashCode();
                }
                if (this.DiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountAmount.GetHashCode();
                }
                if (this.DiscountGoodsDetail != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountGoodsDetail.GetHashCode();
                }
                if (this.EnterprisePayInfo != null)
                {
                    hashCode = (hashCode * 59) + this.EnterprisePayInfo.GetHashCode();
                }
                if (this.ExtInfos != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfos.GetHashCode();
                }
                if (this.FulfillmentDetailList != null)
                {
                    hashCode = (hashCode * 59) + this.FulfillmentDetailList.GetHashCode();
                }
                if (this.FundBillList != null)
                {
                    hashCode = (hashCode * 59) + this.FundBillList.GetHashCode();
                }
                if (this.HbFqPayInfo != null)
                {
                    hashCode = (hashCode * 59) + this.HbFqPayInfo.GetHashCode();
                }
                if (this.HybAmount != null)
                {
                    hashCode = (hashCode * 59) + this.HybAmount.GetHashCode();
                }
                if (this.IndustrySepcDetail != null)
                {
                    hashCode = (hashCode * 59) + this.IndustrySepcDetail.GetHashCode();
                }
                if (this.IndustrySepcDetailAcc != null)
                {
                    hashCode = (hashCode * 59) + this.IndustrySepcDetailAcc.GetHashCode();
                }
                if (this.IndustrySepcDetailGov != null)
                {
                    hashCode = (hashCode * 59) + this.IndustrySepcDetailGov.GetHashCode();
                }
                if (this.IntactChargeInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.IntactChargeInfoList.GetHashCode();
                }
                if (this.InvoiceAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceAmount.GetHashCode();
                }
                if (this.MdiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MdiscountAmount.GetHashCode();
                }
                if (this.MedicalInsuranceInfo != null)
                {
                    hashCode = (hashCode * 59) + this.MedicalInsuranceInfo.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.PassbackParams != null)
                {
                    hashCode = (hashCode * 59) + this.PassbackParams.GetHashCode();
                }
                if (this.PayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PayAmount.GetHashCode();
                }
                if (this.PayCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayCurrency.GetHashCode();
                }
                if (this.PaymentInfoWithIdList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInfoWithIdList.GetHashCode();
                }
                if (this.PeriodScene != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodScene.GetHashCode();
                }
                if (this.PointAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PointAmount.GetHashCode();
                }
                if (this.PreAuthPayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PreAuthPayAmount.GetHashCode();
                }
                if (this.ReceiptAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptAmount.GetHashCode();
                }
                if (this.ReceiptCurrencyType != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptCurrencyType.GetHashCode();
                }
                if (this.ReqGoodsDetail != null)
                {
                    hashCode = (hashCode * 59) + this.ReqGoodsDetail.GetHashCode();
                }
                if (this.SendPayDate != null)
                {
                    hashCode = (hashCode * 59) + this.SendPayDate.GetHashCode();
                }
                if (this.SettleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SettleAmount.GetHashCode();
                }
                if (this.SettleCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettleCurrency.GetHashCode();
                }
                if (this.SettleTransRate != null)
                {
                    hashCode = (hashCode * 59) + this.SettleTransRate.GetHashCode();
                }
                if (this.SettlementId != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementId.GetHashCode();
                }
                if (this.StoreId != null)
                {
                    hashCode = (hashCode * 59) + this.StoreId.GetHashCode();
                }
                if (this.StoreName != null)
                {
                    hashCode = (hashCode * 59) + this.StoreName.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.TapPayInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TapPayInfo.GetHashCode();
                }
                if (this.TerminalId != null)
                {
                    hashCode = (hashCode * 59) + this.TerminalId.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                if (this.TradeSettleInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeSettleInfo.GetHashCode();
                }
                if (this.TradeStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TradeStatus.GetHashCode();
                }
                if (this.TransCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.TransCurrency.GetHashCode();
                }
                if (this.TransPayRate != null)
                {
                    hashCode = (hashCode * 59) + this.TransPayRate.GetHashCode();
                }
                if (this.VoucherDetailList != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherDetailList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
