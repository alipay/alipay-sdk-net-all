/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SubTaskInfo
    /// </summary>
    [DataContract(Name = "SubTaskInfo")]
    public partial class SubTaskInfo : IEquatable<SubTaskInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubTaskInfo" /> class.
        /// </summary>
        /// <param name="executeResult">子任务执行结果；执行成功为成功，失败则填充失败结果.</param>
        /// <param name="status">\&quot;子任务状态状态 INIT:初始化 FAILURE:失败 FINISH:成功\&quot;.</param>
        /// <param name="type">子任务类型 SIGN_TASK：签约子任务 OPE_TASK：代运营授权子任务 APP_TASK：应用授权子任务.</param>
        /// <param name="typeDesc">子任务类型描述.</param>
        public SubTaskInfo(string executeResult = default(string), string status = default(string), string type = default(string), string typeDesc = default(string))
        {
            this.ExecuteResult = executeResult;
            this.Status = status;
            this.Type = type;
            this.TypeDesc = typeDesc;
        }

        /// <summary>
        /// 子任务执行结果；执行成功为成功，失败则填充失败结果
        /// </summary>
        /// <value>子任务执行结果；执行成功为成功，失败则填充失败结果</value>
        [DataMember(Name = "execute_result", EmitDefaultValue = false)]
        public string ExecuteResult { get; set; }

        /// <summary>
        /// \&quot;子任务状态状态 INIT:初始化 FAILURE:失败 FINISH:成功\&quot;
        /// </summary>
        /// <value>\&quot;子任务状态状态 INIT:初始化 FAILURE:失败 FINISH:成功\&quot;</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// 子任务类型 SIGN_TASK：签约子任务 OPE_TASK：代运营授权子任务 APP_TASK：应用授权子任务
        /// </summary>
        /// <value>子任务类型 SIGN_TASK：签约子任务 OPE_TASK：代运营授权子任务 APP_TASK：应用授权子任务</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// 子任务类型描述
        /// </summary>
        /// <value>子任务类型描述</value>
        [DataMember(Name = "type_desc", EmitDefaultValue = false)]
        public string TypeDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubTaskInfo {\n");
            sb.Append("  ExecuteResult: ").Append(ExecuteResult).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeDesc: ").Append(TypeDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubTaskInfo);
        }

        /// <summary>
        /// Returns true if SubTaskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubTaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubTaskInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExecuteResult == input.ExecuteResult ||
                    (this.ExecuteResult != null &&
                    this.ExecuteResult.Equals(input.ExecuteResult))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeDesc == input.TypeDesc ||
                    (this.TypeDesc != null &&
                    this.TypeDesc.Equals(input.TypeDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecuteResult != null)
                {
                    hashCode = (hashCode * 59) + this.ExecuteResult.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.TypeDesc != null)
                {
                    hashCode = (hashCode * 59) + this.TypeDesc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
