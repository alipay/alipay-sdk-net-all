/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// SignFieldBean
    /// </summary>
    [DataContract(Name = "SignFieldBean")]
    public partial class SignFieldBean : IEquatable<SignFieldBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignFieldBean" /> class.
        /// </summary>
        /// <param name="signFieldType">签署类型：  platform-平台自动签：无需指定签署人。创建流程后，系统将自动盖上商户的默认企业印章。  person-个人签署：需要指定签署人个人信息。创建流程后，需通过签署插件完成签署。 org-企业签署：需要指定签署企业信息与经办人个人信息。创建流程后，需经办人代企业完成签署。（企业暂不支持插件签署，可通过获取签署地址接口获取企业签署地址）.</param>
        /// <param name="signer">signer.</param>
        /// <param name="structKey">签署区key值.</param>
        public SignFieldBean(string signFieldType = default(string), SignerBean signer = default(SignerBean), string structKey = default(string))
        {
            this.SignFieldType = signFieldType;
            this.Signer = signer;
            this.StructKey = structKey;
        }

        /// <summary>
        /// 签署类型：  platform-平台自动签：无需指定签署人。创建流程后，系统将自动盖上商户的默认企业印章。  person-个人签署：需要指定签署人个人信息。创建流程后，需通过签署插件完成签署。 org-企业签署：需要指定签署企业信息与经办人个人信息。创建流程后，需经办人代企业完成签署。（企业暂不支持插件签署，可通过获取签署地址接口获取企业签署地址）
        /// </summary>
        /// <value>签署类型：  platform-平台自动签：无需指定签署人。创建流程后，系统将自动盖上商户的默认企业印章。  person-个人签署：需要指定签署人个人信息。创建流程后，需通过签署插件完成签署。 org-企业签署：需要指定签署企业信息与经办人个人信息。创建流程后，需经办人代企业完成签署。（企业暂不支持插件签署，可通过获取签署地址接口获取企业签署地址）</value>
        [DataMember(Name = "sign_field_type", EmitDefaultValue = false)]
        public string SignFieldType { get; set; }

        /// <summary>
        /// Gets or Sets Signer
        /// </summary>
        [DataMember(Name = "signer", EmitDefaultValue = false)]
        public SignerBean Signer { get; set; }

        /// <summary>
        /// 签署区key值
        /// </summary>
        /// <value>签署区key值</value>
        [DataMember(Name = "struct_key", EmitDefaultValue = false)]
        public string StructKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignFieldBean {\n");
            sb.Append("  SignFieldType: ").Append(SignFieldType).Append("\n");
            sb.Append("  Signer: ").Append(Signer).Append("\n");
            sb.Append("  StructKey: ").Append(StructKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignFieldBean);
        }

        /// <summary>
        /// Returns true if SignFieldBean instances are equal
        /// </summary>
        /// <param name="input">Instance of SignFieldBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignFieldBean input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignFieldType == input.SignFieldType ||
                    (this.SignFieldType != null &&
                    this.SignFieldType.Equals(input.SignFieldType))
                ) && 
                (
                    this.Signer == input.Signer ||
                    (this.Signer != null &&
                    this.Signer.Equals(input.Signer))
                ) && 
                (
                    this.StructKey == input.StructKey ||
                    (this.StructKey != null &&
                    this.StructKey.Equals(input.StructKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignFieldType != null)
                {
                    hashCode = (hashCode * 59) + this.SignFieldType.GetHashCode();
                }
                if (this.Signer != null)
                {
                    hashCode = (hashCode * 59) + this.Signer.GetHashCode();
                }
                if (this.StructKey != null)
                {
                    hashCode = (hashCode * 59) + this.StructKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
