/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayTradeRefundResponseModel
    /// </summary>
    [DataContract(Name = "AlipayTradeRefundResponseModel")]
    public partial class AlipayTradeRefundResponseModel : IEquatable<AlipayTradeRefundResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeRefundResponseModel" /> class.
        /// </summary>
        /// <param name="buyerLogonId">用户的登录id.</param>
        /// <param name="buyerOpenId">买家支付宝用户唯一标识.</param>
        /// <param name="buyerUserId">买家在支付宝的用户id.</param>
        /// <param name="fundChange">本次退款是否发生了资金变化.</param>
        /// <param name="gmtRefundPay">退款支付时间.</param>
        /// <param name="hasDepositBack">是否有银行卡冲退，仅当query_options中传入deposit_back_info时返回.</param>
        /// <param name="openId">买家支付宝用户号，该参数已废弃，请不要使用.</param>
        /// <param name="outTradeNo">商户订单号.</param>
        /// <param name="preAuthCancelFee">当用户使用芝麻信用先享后付时，且当前的操作为预授权撤销动作时，会返回该字段，代表当前撤销的预授权金额，单位元。.</param>
        /// <param name="presentRefundBuyerAmount">本次退款金额中买家退款金额;单位：元。 该字段默认不返回；.</param>
        /// <param name="presentRefundDiscountAmount">本次退款金额中平台优惠退款金额；单位：元。 该字段默认不返回；.</param>
        /// <param name="presentRefundMdiscountAmount">本次退款金额中商家优惠退款金额；单位：元。 该字段默认不返回；.</param>
        /// <param name="refundChargeAmount">本次退款针对收款方的退收费金额；单位：元。 只在机构间联模式下返回，其它场景下不返回该字段；.</param>
        /// <param name="refundChargeInfoList">退费信息.</param>
        /// <param name="refundCurrency">退款币种信息.</param>
        /// <param name="refundDetailItemList">退款使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。.</param>
        /// <param name="refundFee">退款总金额。单位：元。 指该笔交易累计已经退款成功的金额。.</param>
        /// <param name="refundHybAmount">本次请求退惠营宝金额。单位：元。.</param>
        /// <param name="refundPresetPaytoolList">refundPresetPaytoolList.</param>
        /// <param name="refundSettlementId">退款清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；.</param>
        /// <param name="refundVoucherDetailList">本交易支付时使用的所有优惠券信息。 只有在query_options中指定了refund_voucher_detail_list时才返回该字段信息。.</param>
        /// <param name="sendBackFee">本次商户实际退回金额。单位：元。 说明：如需获取该值，需在入参query_options中传入 refund_detail_item_list。.</param>
        /// <param name="storeName">交易在支付时候的门店名称.</param>
        /// <param name="tradeNo">支付宝交易号.</param>
        public AlipayTradeRefundResponseModel(string buyerLogonId = default(string), string buyerOpenId = default(string), string buyerUserId = default(string), string fundChange = default(string), string gmtRefundPay = default(string), string hasDepositBack = default(string), string openId = default(string), string outTradeNo = default(string), string preAuthCancelFee = default(string), string presentRefundBuyerAmount = default(string), string presentRefundDiscountAmount = default(string), string presentRefundMdiscountAmount = default(string), string refundChargeAmount = default(string), List<RefundChargeInfo> refundChargeInfoList = default(List<RefundChargeInfo>), string refundCurrency = default(string), List<TradeFundBill> refundDetailItemList = default(List<TradeFundBill>), string refundFee = default(string), string refundHybAmount = default(string), PresetPayToolInfo refundPresetPaytoolList = default(PresetPayToolInfo), string refundSettlementId = default(string), List<VoucherDetail> refundVoucherDetailList = default(List<VoucherDetail>), string sendBackFee = default(string), string storeName = default(string), string tradeNo = default(string))
        {
            this.BuyerLogonId = buyerLogonId;
            this.BuyerOpenId = buyerOpenId;
            this.BuyerUserId = buyerUserId;
            this.FundChange = fundChange;
            this.GmtRefundPay = gmtRefundPay;
            this.HasDepositBack = hasDepositBack;
            this.OpenId = openId;
            this.OutTradeNo = outTradeNo;
            this.PreAuthCancelFee = preAuthCancelFee;
            this.PresentRefundBuyerAmount = presentRefundBuyerAmount;
            this.PresentRefundDiscountAmount = presentRefundDiscountAmount;
            this.PresentRefundMdiscountAmount = presentRefundMdiscountAmount;
            this.RefundChargeAmount = refundChargeAmount;
            this.RefundChargeInfoList = refundChargeInfoList;
            this.RefundCurrency = refundCurrency;
            this.RefundDetailItemList = refundDetailItemList;
            this.RefundFee = refundFee;
            this.RefundHybAmount = refundHybAmount;
            this.RefundPresetPaytoolList = refundPresetPaytoolList;
            this.RefundSettlementId = refundSettlementId;
            this.RefundVoucherDetailList = refundVoucherDetailList;
            this.SendBackFee = sendBackFee;
            this.StoreName = storeName;
            this.TradeNo = tradeNo;
        }

        /// <summary>
        /// 用户的登录id
        /// </summary>
        /// <value>用户的登录id</value>
        [DataMember(Name = "buyer_logon_id", EmitDefaultValue = false)]
        public string BuyerLogonId { get; set; }

        /// <summary>
        /// 买家支付宝用户唯一标识
        /// </summary>
        /// <value>买家支付宝用户唯一标识</value>
        [DataMember(Name = "buyer_open_id", EmitDefaultValue = false)]
        public string BuyerOpenId { get; set; }

        /// <summary>
        /// 买家在支付宝的用户id
        /// </summary>
        /// <value>买家在支付宝的用户id</value>
        [DataMember(Name = "buyer_user_id", EmitDefaultValue = false)]
        public string BuyerUserId { get; set; }

        /// <summary>
        /// 本次退款是否发生了资金变化
        /// </summary>
        /// <value>本次退款是否发生了资金变化</value>
        [DataMember(Name = "fund_change", EmitDefaultValue = false)]
        public string FundChange { get; set; }

        /// <summary>
        /// 退款支付时间
        /// </summary>
        /// <value>退款支付时间</value>
        [DataMember(Name = "gmt_refund_pay", EmitDefaultValue = false)]
        public string GmtRefundPay { get; set; }

        /// <summary>
        /// 是否有银行卡冲退，仅当query_options中传入deposit_back_info时返回
        /// </summary>
        /// <value>是否有银行卡冲退，仅当query_options中传入deposit_back_info时返回</value>
        [DataMember(Name = "has_deposit_back", EmitDefaultValue = false)]
        public string HasDepositBack { get; set; }

        /// <summary>
        /// 买家支付宝用户号，该参数已废弃，请不要使用
        /// </summary>
        /// <value>买家支付宝用户号，该参数已废弃，请不要使用</value>
        [DataMember(Name = "open_id", EmitDefaultValue = false)]
        public string OpenId { get; set; }

        /// <summary>
        /// 商户订单号
        /// </summary>
        /// <value>商户订单号</value>
        [DataMember(Name = "out_trade_no", EmitDefaultValue = false)]
        public string OutTradeNo { get; set; }

        /// <summary>
        /// 当用户使用芝麻信用先享后付时，且当前的操作为预授权撤销动作时，会返回该字段，代表当前撤销的预授权金额，单位元。
        /// </summary>
        /// <value>当用户使用芝麻信用先享后付时，且当前的操作为预授权撤销动作时，会返回该字段，代表当前撤销的预授权金额，单位元。</value>
        [DataMember(Name = "pre_auth_cancel_fee", EmitDefaultValue = false)]
        public string PreAuthCancelFee { get; set; }

        /// <summary>
        /// 本次退款金额中买家退款金额;单位：元。 该字段默认不返回；
        /// </summary>
        /// <value>本次退款金额中买家退款金额;单位：元。 该字段默认不返回；</value>
        [DataMember(Name = "present_refund_buyer_amount", EmitDefaultValue = false)]
        public string PresentRefundBuyerAmount { get; set; }

        /// <summary>
        /// 本次退款金额中平台优惠退款金额；单位：元。 该字段默认不返回；
        /// </summary>
        /// <value>本次退款金额中平台优惠退款金额；单位：元。 该字段默认不返回；</value>
        [DataMember(Name = "present_refund_discount_amount", EmitDefaultValue = false)]
        public string PresentRefundDiscountAmount { get; set; }

        /// <summary>
        /// 本次退款金额中商家优惠退款金额；单位：元。 该字段默认不返回；
        /// </summary>
        /// <value>本次退款金额中商家优惠退款金额；单位：元。 该字段默认不返回；</value>
        [DataMember(Name = "present_refund_mdiscount_amount", EmitDefaultValue = false)]
        public string PresentRefundMdiscountAmount { get; set; }

        /// <summary>
        /// 本次退款针对收款方的退收费金额；单位：元。 只在机构间联模式下返回，其它场景下不返回该字段；
        /// </summary>
        /// <value>本次退款针对收款方的退收费金额；单位：元。 只在机构间联模式下返回，其它场景下不返回该字段；</value>
        [DataMember(Name = "refund_charge_amount", EmitDefaultValue = false)]
        public string RefundChargeAmount { get; set; }

        /// <summary>
        /// 退费信息
        /// </summary>
        /// <value>退费信息</value>
        [DataMember(Name = "refund_charge_info_list", EmitDefaultValue = false)]
        public List<RefundChargeInfo> RefundChargeInfoList { get; set; }

        /// <summary>
        /// 退款币种信息
        /// </summary>
        /// <value>退款币种信息</value>
        [DataMember(Name = "refund_currency", EmitDefaultValue = false)]
        public string RefundCurrency { get; set; }

        /// <summary>
        /// 退款使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。
        /// </summary>
        /// <value>退款使用的资金渠道。 只有在签约中指定需要返回资金明细，或者入参的query_options中指定时才返回该字段信息。</value>
        [DataMember(Name = "refund_detail_item_list", EmitDefaultValue = false)]
        public List<TradeFundBill> RefundDetailItemList { get; set; }

        /// <summary>
        /// 退款总金额。单位：元。 指该笔交易累计已经退款成功的金额。
        /// </summary>
        /// <value>退款总金额。单位：元。 指该笔交易累计已经退款成功的金额。</value>
        [DataMember(Name = "refund_fee", EmitDefaultValue = false)]
        public string RefundFee { get; set; }

        /// <summary>
        /// 本次请求退惠营宝金额。单位：元。
        /// </summary>
        /// <value>本次请求退惠营宝金额。单位：元。</value>
        [DataMember(Name = "refund_hyb_amount", EmitDefaultValue = false)]
        public string RefundHybAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundPresetPaytoolList
        /// </summary>
        [DataMember(Name = "refund_preset_paytool_list", EmitDefaultValue = false)]
        public PresetPayToolInfo RefundPresetPaytoolList { get; set; }

        /// <summary>
        /// 退款清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；
        /// </summary>
        /// <value>退款清算编号，用于清算对账使用； 只在机构间联模式下返回，其它场景下不返回该字段；</value>
        [DataMember(Name = "refund_settlement_id", EmitDefaultValue = false)]
        public string RefundSettlementId { get; set; }

        /// <summary>
        /// 本交易支付时使用的所有优惠券信息。 只有在query_options中指定了refund_voucher_detail_list时才返回该字段信息。
        /// </summary>
        /// <value>本交易支付时使用的所有优惠券信息。 只有在query_options中指定了refund_voucher_detail_list时才返回该字段信息。</value>
        [DataMember(Name = "refund_voucher_detail_list", EmitDefaultValue = false)]
        public List<VoucherDetail> RefundVoucherDetailList { get; set; }

        /// <summary>
        /// 本次商户实际退回金额。单位：元。 说明：如需获取该值，需在入参query_options中传入 refund_detail_item_list。
        /// </summary>
        /// <value>本次商户实际退回金额。单位：元。 说明：如需获取该值，需在入参query_options中传入 refund_detail_item_list。</value>
        [DataMember(Name = "send_back_fee", EmitDefaultValue = false)]
        public string SendBackFee { get; set; }

        /// <summary>
        /// 交易在支付时候的门店名称
        /// </summary>
        /// <value>交易在支付时候的门店名称</value>
        [DataMember(Name = "store_name", EmitDefaultValue = false)]
        public string StoreName { get; set; }

        /// <summary>
        /// 支付宝交易号
        /// </summary>
        /// <value>支付宝交易号</value>
        [DataMember(Name = "trade_no", EmitDefaultValue = false)]
        public string TradeNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeRefundResponseModel {\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  FundChange: ").Append(FundChange).Append("\n");
            sb.Append("  GmtRefundPay: ").Append(GmtRefundPay).Append("\n");
            sb.Append("  HasDepositBack: ").Append(HasDepositBack).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PreAuthCancelFee: ").Append(PreAuthCancelFee).Append("\n");
            sb.Append("  PresentRefundBuyerAmount: ").Append(PresentRefundBuyerAmount).Append("\n");
            sb.Append("  PresentRefundDiscountAmount: ").Append(PresentRefundDiscountAmount).Append("\n");
            sb.Append("  PresentRefundMdiscountAmount: ").Append(PresentRefundMdiscountAmount).Append("\n");
            sb.Append("  RefundChargeAmount: ").Append(RefundChargeAmount).Append("\n");
            sb.Append("  RefundChargeInfoList: ").Append(RefundChargeInfoList).Append("\n");
            sb.Append("  RefundCurrency: ").Append(RefundCurrency).Append("\n");
            sb.Append("  RefundDetailItemList: ").Append(RefundDetailItemList).Append("\n");
            sb.Append("  RefundFee: ").Append(RefundFee).Append("\n");
            sb.Append("  RefundHybAmount: ").Append(RefundHybAmount).Append("\n");
            sb.Append("  RefundPresetPaytoolList: ").Append(RefundPresetPaytoolList).Append("\n");
            sb.Append("  RefundSettlementId: ").Append(RefundSettlementId).Append("\n");
            sb.Append("  RefundVoucherDetailList: ").Append(RefundVoucherDetailList).Append("\n");
            sb.Append("  SendBackFee: ").Append(SendBackFee).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayTradeRefundResponseModel);
        }

        /// <summary>
        /// Returns true if AlipayTradeRefundResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayTradeRefundResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayTradeRefundResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuyerLogonId == input.BuyerLogonId ||
                    (this.BuyerLogonId != null &&
                    this.BuyerLogonId.Equals(input.BuyerLogonId))
                ) && 
                (
                    this.BuyerOpenId == input.BuyerOpenId ||
                    (this.BuyerOpenId != null &&
                    this.BuyerOpenId.Equals(input.BuyerOpenId))
                ) && 
                (
                    this.BuyerUserId == input.BuyerUserId ||
                    (this.BuyerUserId != null &&
                    this.BuyerUserId.Equals(input.BuyerUserId))
                ) && 
                (
                    this.FundChange == input.FundChange ||
                    (this.FundChange != null &&
                    this.FundChange.Equals(input.FundChange))
                ) && 
                (
                    this.GmtRefundPay == input.GmtRefundPay ||
                    (this.GmtRefundPay != null &&
                    this.GmtRefundPay.Equals(input.GmtRefundPay))
                ) && 
                (
                    this.HasDepositBack == input.HasDepositBack ||
                    (this.HasDepositBack != null &&
                    this.HasDepositBack.Equals(input.HasDepositBack))
                ) && 
                (
                    this.OpenId == input.OpenId ||
                    (this.OpenId != null &&
                    this.OpenId.Equals(input.OpenId))
                ) && 
                (
                    this.OutTradeNo == input.OutTradeNo ||
                    (this.OutTradeNo != null &&
                    this.OutTradeNo.Equals(input.OutTradeNo))
                ) && 
                (
                    this.PreAuthCancelFee == input.PreAuthCancelFee ||
                    (this.PreAuthCancelFee != null &&
                    this.PreAuthCancelFee.Equals(input.PreAuthCancelFee))
                ) && 
                (
                    this.PresentRefundBuyerAmount == input.PresentRefundBuyerAmount ||
                    (this.PresentRefundBuyerAmount != null &&
                    this.PresentRefundBuyerAmount.Equals(input.PresentRefundBuyerAmount))
                ) && 
                (
                    this.PresentRefundDiscountAmount == input.PresentRefundDiscountAmount ||
                    (this.PresentRefundDiscountAmount != null &&
                    this.PresentRefundDiscountAmount.Equals(input.PresentRefundDiscountAmount))
                ) && 
                (
                    this.PresentRefundMdiscountAmount == input.PresentRefundMdiscountAmount ||
                    (this.PresentRefundMdiscountAmount != null &&
                    this.PresentRefundMdiscountAmount.Equals(input.PresentRefundMdiscountAmount))
                ) && 
                (
                    this.RefundChargeAmount == input.RefundChargeAmount ||
                    (this.RefundChargeAmount != null &&
                    this.RefundChargeAmount.Equals(input.RefundChargeAmount))
                ) && 
                (
                    this.RefundChargeInfoList == input.RefundChargeInfoList ||
                    this.RefundChargeInfoList != null &&
                    input.RefundChargeInfoList != null &&
                    this.RefundChargeInfoList.SequenceEqual(input.RefundChargeInfoList)
                ) && 
                (
                    this.RefundCurrency == input.RefundCurrency ||
                    (this.RefundCurrency != null &&
                    this.RefundCurrency.Equals(input.RefundCurrency))
                ) && 
                (
                    this.RefundDetailItemList == input.RefundDetailItemList ||
                    this.RefundDetailItemList != null &&
                    input.RefundDetailItemList != null &&
                    this.RefundDetailItemList.SequenceEqual(input.RefundDetailItemList)
                ) && 
                (
                    this.RefundFee == input.RefundFee ||
                    (this.RefundFee != null &&
                    this.RefundFee.Equals(input.RefundFee))
                ) && 
                (
                    this.RefundHybAmount == input.RefundHybAmount ||
                    (this.RefundHybAmount != null &&
                    this.RefundHybAmount.Equals(input.RefundHybAmount))
                ) && 
                (
                    this.RefundPresetPaytoolList == input.RefundPresetPaytoolList ||
                    (this.RefundPresetPaytoolList != null &&
                    this.RefundPresetPaytoolList.Equals(input.RefundPresetPaytoolList))
                ) && 
                (
                    this.RefundSettlementId == input.RefundSettlementId ||
                    (this.RefundSettlementId != null &&
                    this.RefundSettlementId.Equals(input.RefundSettlementId))
                ) && 
                (
                    this.RefundVoucherDetailList == input.RefundVoucherDetailList ||
                    this.RefundVoucherDetailList != null &&
                    input.RefundVoucherDetailList != null &&
                    this.RefundVoucherDetailList.SequenceEqual(input.RefundVoucherDetailList)
                ) && 
                (
                    this.SendBackFee == input.SendBackFee ||
                    (this.SendBackFee != null &&
                    this.SendBackFee.Equals(input.SendBackFee))
                ) && 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.TradeNo == input.TradeNo ||
                    (this.TradeNo != null &&
                    this.TradeNo.Equals(input.TradeNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyerLogonId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerLogonId.GetHashCode();
                }
                if (this.BuyerOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerOpenId.GetHashCode();
                }
                if (this.BuyerUserId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUserId.GetHashCode();
                }
                if (this.FundChange != null)
                {
                    hashCode = (hashCode * 59) + this.FundChange.GetHashCode();
                }
                if (this.GmtRefundPay != null)
                {
                    hashCode = (hashCode * 59) + this.GmtRefundPay.GetHashCode();
                }
                if (this.HasDepositBack != null)
                {
                    hashCode = (hashCode * 59) + this.HasDepositBack.GetHashCode();
                }
                if (this.OpenId != null)
                {
                    hashCode = (hashCode * 59) + this.OpenId.GetHashCode();
                }
                if (this.OutTradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutTradeNo.GetHashCode();
                }
                if (this.PreAuthCancelFee != null)
                {
                    hashCode = (hashCode * 59) + this.PreAuthCancelFee.GetHashCode();
                }
                if (this.PresentRefundBuyerAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PresentRefundBuyerAmount.GetHashCode();
                }
                if (this.PresentRefundDiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PresentRefundDiscountAmount.GetHashCode();
                }
                if (this.PresentRefundMdiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PresentRefundMdiscountAmount.GetHashCode();
                }
                if (this.RefundChargeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundChargeAmount.GetHashCode();
                }
                if (this.RefundChargeInfoList != null)
                {
                    hashCode = (hashCode * 59) + this.RefundChargeInfoList.GetHashCode();
                }
                if (this.RefundCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.RefundCurrency.GetHashCode();
                }
                if (this.RefundDetailItemList != null)
                {
                    hashCode = (hashCode * 59) + this.RefundDetailItemList.GetHashCode();
                }
                if (this.RefundFee != null)
                {
                    hashCode = (hashCode * 59) + this.RefundFee.GetHashCode();
                }
                if (this.RefundHybAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundHybAmount.GetHashCode();
                }
                if (this.RefundPresetPaytoolList != null)
                {
                    hashCode = (hashCode * 59) + this.RefundPresetPaytoolList.GetHashCode();
                }
                if (this.RefundSettlementId != null)
                {
                    hashCode = (hashCode * 59) + this.RefundSettlementId.GetHashCode();
                }
                if (this.RefundVoucherDetailList != null)
                {
                    hashCode = (hashCode * 59) + this.RefundVoucherDetailList.GetHashCode();
                }
                if (this.SendBackFee != null)
                {
                    hashCode = (hashCode * 59) + this.SendBackFee.GetHashCode();
                }
                if (this.StoreName != null)
                {
                    hashCode = (hashCode * 59) + this.StoreName.GetHashCode();
                }
                if (this.TradeNo != null)
                {
                    hashCode = (hashCode * 59) + this.TradeNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
