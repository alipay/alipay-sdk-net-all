/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// PaidOuterCardCycleInfoDTO
    /// </summary>
    [DataContract(Name = "PaidOuterCardCycleInfoDTO")]
    public partial class PaidOuterCardCycleInfoDTO : IEquatable<PaidOuterCardCycleInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaidOuterCardCycleInfoDTO" /> class.
        /// </summary>
        /// <param name="alipayDeductAgreement">支付宝用户签约协议号.</param>
        /// <param name="alipayDeductProductCode">支付宝代扣产品码.</param>
        /// <param name="alipayDeductScene">支付宝代扣场景码.</param>
        /// <param name="closeReason">关闭连续购买原因。.</param>
        /// <param name="cycleType">用户开通连续购买类型。.</param>
        /// <param name="openStatus">开通连续购买状态。.</param>
        public PaidOuterCardCycleInfoDTO(string alipayDeductAgreement = default(string), string alipayDeductProductCode = default(string), string alipayDeductScene = default(string), string closeReason = default(string), string cycleType = default(string), string openStatus = default(string))
        {
            this.AlipayDeductAgreement = alipayDeductAgreement;
            this.AlipayDeductProductCode = alipayDeductProductCode;
            this.AlipayDeductScene = alipayDeductScene;
            this.CloseReason = closeReason;
            this.CycleType = cycleType;
            this.OpenStatus = openStatus;
        }

        /// <summary>
        /// 支付宝用户签约协议号
        /// </summary>
        /// <value>支付宝用户签约协议号</value>
        [DataMember(Name = "alipay_deduct_agreement", EmitDefaultValue = false)]
        public string AlipayDeductAgreement { get; set; }

        /// <summary>
        /// 支付宝代扣产品码
        /// </summary>
        /// <value>支付宝代扣产品码</value>
        [DataMember(Name = "alipay_deduct_product_code", EmitDefaultValue = false)]
        public string AlipayDeductProductCode { get; set; }

        /// <summary>
        /// 支付宝代扣场景码
        /// </summary>
        /// <value>支付宝代扣场景码</value>
        [DataMember(Name = "alipay_deduct_scene", EmitDefaultValue = false)]
        public string AlipayDeductScene { get; set; }

        /// <summary>
        /// 关闭连续购买原因。
        /// </summary>
        /// <value>关闭连续购买原因。</value>
        [DataMember(Name = "close_reason", EmitDefaultValue = false)]
        public string CloseReason { get; set; }

        /// <summary>
        /// 用户开通连续购买类型。
        /// </summary>
        /// <value>用户开通连续购买类型。</value>
        [DataMember(Name = "cycle_type", EmitDefaultValue = false)]
        public string CycleType { get; set; }

        /// <summary>
        /// 开通连续购买状态。
        /// </summary>
        /// <value>开通连续购买状态。</value>
        [DataMember(Name = "open_status", EmitDefaultValue = false)]
        public string OpenStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaidOuterCardCycleInfoDTO {\n");
            sb.Append("  AlipayDeductAgreement: ").Append(AlipayDeductAgreement).Append("\n");
            sb.Append("  AlipayDeductProductCode: ").Append(AlipayDeductProductCode).Append("\n");
            sb.Append("  AlipayDeductScene: ").Append(AlipayDeductScene).Append("\n");
            sb.Append("  CloseReason: ").Append(CloseReason).Append("\n");
            sb.Append("  CycleType: ").Append(CycleType).Append("\n");
            sb.Append("  OpenStatus: ").Append(OpenStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaidOuterCardCycleInfoDTO);
        }

        /// <summary>
        /// Returns true if PaidOuterCardCycleInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PaidOuterCardCycleInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaidOuterCardCycleInfoDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AlipayDeductAgreement == input.AlipayDeductAgreement ||
                    (this.AlipayDeductAgreement != null &&
                    this.AlipayDeductAgreement.Equals(input.AlipayDeductAgreement))
                ) && 
                (
                    this.AlipayDeductProductCode == input.AlipayDeductProductCode ||
                    (this.AlipayDeductProductCode != null &&
                    this.AlipayDeductProductCode.Equals(input.AlipayDeductProductCode))
                ) && 
                (
                    this.AlipayDeductScene == input.AlipayDeductScene ||
                    (this.AlipayDeductScene != null &&
                    this.AlipayDeductScene.Equals(input.AlipayDeductScene))
                ) && 
                (
                    this.CloseReason == input.CloseReason ||
                    (this.CloseReason != null &&
                    this.CloseReason.Equals(input.CloseReason))
                ) && 
                (
                    this.CycleType == input.CycleType ||
                    (this.CycleType != null &&
                    this.CycleType.Equals(input.CycleType))
                ) && 
                (
                    this.OpenStatus == input.OpenStatus ||
                    (this.OpenStatus != null &&
                    this.OpenStatus.Equals(input.OpenStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlipayDeductAgreement != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayDeductAgreement.GetHashCode();
                }
                if (this.AlipayDeductProductCode != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayDeductProductCode.GetHashCode();
                }
                if (this.AlipayDeductScene != null)
                {
                    hashCode = (hashCode * 59) + this.AlipayDeductScene.GetHashCode();
                }
                if (this.CloseReason != null)
                {
                    hashCode = (hashCode * 59) + this.CloseReason.GetHashCode();
                }
                if (this.CycleType != null)
                {
                    hashCode = (hashCode * 59) + this.CycleType.GetHashCode();
                }
                if (this.OpenStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OpenStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
