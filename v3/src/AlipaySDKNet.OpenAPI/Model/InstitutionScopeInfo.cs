/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// InstitutionScopeInfo
    /// </summary>
    [DataContract(Name = "InstitutionScopeInfo")]
    public partial class InstitutionScopeInfo : IEquatable<InstitutionScopeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionScopeInfo" /> class.
        /// </summary>
        /// <param name="adapterType">制度适用范围，支持配置全员、指定员工和指定部门.</param>
        /// <param name="ownerIdList">适用范围归属id列表.</param>
        /// <param name="ownerType">员工id类型.</param>
        public InstitutionScopeInfo(string adapterType = default(string), List<string> ownerIdList = default(List<string>), string ownerType = default(string))
        {
            this.AdapterType = adapterType;
            this.OwnerIdList = ownerIdList;
            this.OwnerType = ownerType;
        }

        /// <summary>
        /// 制度适用范围，支持配置全员、指定员工和指定部门
        /// </summary>
        /// <value>制度适用范围，支持配置全员、指定员工和指定部门</value>
        [DataMember(Name = "adapter_type", EmitDefaultValue = false)]
        public string AdapterType { get; set; }

        /// <summary>
        /// 适用范围归属id列表
        /// </summary>
        /// <value>适用范围归属id列表</value>
        [DataMember(Name = "owner_id_list", EmitDefaultValue = false)]
        public List<string> OwnerIdList { get; set; }

        /// <summary>
        /// 员工id类型
        /// </summary>
        /// <value>员工id类型</value>
        [DataMember(Name = "owner_type", EmitDefaultValue = false)]
        public string OwnerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionScopeInfo {\n");
            sb.Append("  AdapterType: ").Append(AdapterType).Append("\n");
            sb.Append("  OwnerIdList: ").Append(OwnerIdList).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionScopeInfo);
        }

        /// <summary>
        /// Returns true if InstitutionScopeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionScopeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionScopeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdapterType == input.AdapterType ||
                    (this.AdapterType != null &&
                    this.AdapterType.Equals(input.AdapterType))
                ) && 
                (
                    this.OwnerIdList == input.OwnerIdList ||
                    this.OwnerIdList != null &&
                    input.OwnerIdList != null &&
                    this.OwnerIdList.SequenceEqual(input.OwnerIdList)
                ) && 
                (
                    this.OwnerType == input.OwnerType ||
                    (this.OwnerType != null &&
                    this.OwnerType.Equals(input.OwnerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdapterType != null)
                {
                    hashCode = (hashCode * 59) + this.AdapterType.GetHashCode();
                }
                if (this.OwnerIdList != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerIdList.GetHashCode();
                }
                if (this.OwnerType != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
