/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// BrandRegistrationInfo
    /// </summary>
    [DataContract(Name = "BrandRegistrationInfo")]
    public partial class BrandRegistrationInfo : IEquatable<BrandRegistrationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandRegistrationInfo" /> class.
        /// </summary>
        /// <param name="endDate">商标有效期(结束日期).</param>
        /// <param name="regMaterials">商标注册证书信息(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片,可以上传多个商标注册证书信息).</param>
        /// <param name="regNumber">商标注册号.</param>
        /// <param name="registrant">商标注册人.</param>
        /// <param name="startDate">商标有效期(开始日期).</param>
        public BrandRegistrationInfo(string endDate = default(string), List<string> regMaterials = default(List<string>), string regNumber = default(string), string registrant = default(string), string startDate = default(string))
        {
            this.EndDate = endDate;
            this.RegMaterials = regMaterials;
            this.RegNumber = regNumber;
            this.Registrant = registrant;
            this.StartDate = startDate;
        }

        /// <summary>
        /// 商标有效期(结束日期)
        /// </summary>
        /// <value>商标有效期(结束日期)</value>
        [DataMember(Name = "end_date", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// 商标注册证书信息(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片,可以上传多个商标注册证书信息)
        /// </summary>
        /// <value>商标注册证书信息(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片,可以上传多个商标注册证书信息)</value>
        [DataMember(Name = "reg_materials", EmitDefaultValue = false)]
        public List<string> RegMaterials { get; set; }

        /// <summary>
        /// 商标注册号
        /// </summary>
        /// <value>商标注册号</value>
        [DataMember(Name = "reg_number", EmitDefaultValue = false)]
        public string RegNumber { get; set; }

        /// <summary>
        /// 商标注册人
        /// </summary>
        /// <value>商标注册人</value>
        [DataMember(Name = "registrant", EmitDefaultValue = false)]
        public string Registrant { get; set; }

        /// <summary>
        /// 商标有效期(开始日期)
        /// </summary>
        /// <value>商标有效期(开始日期)</value>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandRegistrationInfo {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RegMaterials: ").Append(RegMaterials).Append("\n");
            sb.Append("  RegNumber: ").Append(RegNumber).Append("\n");
            sb.Append("  Registrant: ").Append(Registrant).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandRegistrationInfo);
        }

        /// <summary>
        /// Returns true if BrandRegistrationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandRegistrationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandRegistrationInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.RegMaterials == input.RegMaterials ||
                    this.RegMaterials != null &&
                    input.RegMaterials != null &&
                    this.RegMaterials.SequenceEqual(input.RegMaterials)
                ) && 
                (
                    this.RegNumber == input.RegNumber ||
                    (this.RegNumber != null &&
                    this.RegNumber.Equals(input.RegNumber))
                ) && 
                (
                    this.Registrant == input.Registrant ||
                    (this.Registrant != null &&
                    this.Registrant.Equals(input.Registrant))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.RegMaterials != null)
                {
                    hashCode = (hashCode * 59) + this.RegMaterials.GetHashCode();
                }
                if (this.RegNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RegNumber.GetHashCode();
                }
                if (this.Registrant != null)
                {
                    hashCode = (hashCode * 59) + this.Registrant.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
