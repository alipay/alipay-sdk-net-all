/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// MerchantShopIndustryInfo
    /// </summary>
    [DataContract(Name = "MerchantShopIndustryInfo")]
    public partial class MerchantShopIndustryInfo : IEquatable<MerchantShopIndustryInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShopIndustryInfo" /> class.
        /// </summary>
        /// <param name="infoCode">行业信息CODE.</param>
        /// <param name="infoValue">行业信息值，具体值根据info_code决定。 当info_code&#x3D;SHOP_MEDICAL_LOGO/SHOP_MEDICAL_IN_PIC这类文件信息时， 需要传入ant.merchant.expand.indirect.image.upload接口上传的文件key；当info_code&#x3D; SHOP_MEDICAL_LEVEL_TAG时，需要&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/ZuDmQKgBifgAAAAAAAAAAAAADiWmAQBr?af_filename&#x3D;医院类型.xlsx\&quot;&gt;医院类型&lt;/a&gt;中CODE；其他场景传入自定义文本即可。.</param>
        public MerchantShopIndustryInfo(string infoCode = default(string), List<string> infoValue = default(List<string>))
        {
            this.InfoCode = infoCode;
            this.InfoValue = infoValue;
        }

        /// <summary>
        /// 行业信息CODE
        /// </summary>
        /// <value>行业信息CODE</value>
        [DataMember(Name = "info_code", EmitDefaultValue = false)]
        public string InfoCode { get; set; }

        /// <summary>
        /// 行业信息值，具体值根据info_code决定。 当info_code&#x3D;SHOP_MEDICAL_LOGO/SHOP_MEDICAL_IN_PIC这类文件信息时， 需要传入ant.merchant.expand.indirect.image.upload接口上传的文件key；当info_code&#x3D; SHOP_MEDICAL_LEVEL_TAG时，需要&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/ZuDmQKgBifgAAAAAAAAAAAAADiWmAQBr?af_filename&#x3D;医院类型.xlsx\&quot;&gt;医院类型&lt;/a&gt;中CODE；其他场景传入自定义文本即可。
        /// </summary>
        /// <value>行业信息值，具体值根据info_code决定。 当info_code&#x3D;SHOP_MEDICAL_LOGO/SHOP_MEDICAL_IN_PIC这类文件信息时， 需要传入ant.merchant.expand.indirect.image.upload接口上传的文件key；当info_code&#x3D; SHOP_MEDICAL_LEVEL_TAG时，需要&lt;a href&#x3D;\&quot;https://mdn.alipayobjects.com/mrcheshop/afts/file/ZuDmQKgBifgAAAAAAAAAAAAADiWmAQBr?af_filename&#x3D;医院类型.xlsx\&quot;&gt;医院类型&lt;/a&gt;中CODE；其他场景传入自定义文本即可。</value>
        [DataMember(Name = "info_value", EmitDefaultValue = false)]
        public List<string> InfoValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantShopIndustryInfo {\n");
            sb.Append("  InfoCode: ").Append(InfoCode).Append("\n");
            sb.Append("  InfoValue: ").Append(InfoValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantShopIndustryInfo);
        }

        /// <summary>
        /// Returns true if MerchantShopIndustryInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantShopIndustryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantShopIndustryInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InfoCode == input.InfoCode ||
                    (this.InfoCode != null &&
                    this.InfoCode.Equals(input.InfoCode))
                ) && 
                (
                    this.InfoValue == input.InfoValue ||
                    this.InfoValue != null &&
                    input.InfoValue != null &&
                    this.InfoValue.SequenceEqual(input.InfoValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InfoCode != null)
                {
                    hashCode = (hashCode * 59) + this.InfoCode.GetHashCode();
                }
                if (this.InfoValue != null)
                {
                    hashCode = (hashCode * 59) + this.InfoValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
