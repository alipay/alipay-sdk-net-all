/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ExecutionPlan
    /// </summary>
    [DataContract(Name = "ExecutionPlan")]
    public partial class ExecutionPlan : IEquatable<ExecutionPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionPlan" /> class.
        /// </summary>
        /// <param name="executeTime">周期扣预期执行时间，格式为YYYY-MM-DD.</param>
        /// <param name="latestExecuteTime">周期扣执行计划最晚执行时间，格式为YYYY-MM-DD.</param>
        /// <param name="periodId">该值为自然数，表示周期扣期数。.</param>
        /// <param name="singleAmount">周期扣中单笔金额，单位是元.</param>
        public ExecutionPlan(string executeTime = default(string), string latestExecuteTime = default(string), string periodId = default(string), string singleAmount = default(string))
        {
            this.ExecuteTime = executeTime;
            this.LatestExecuteTime = latestExecuteTime;
            this.PeriodId = periodId;
            this.SingleAmount = singleAmount;
        }

        /// <summary>
        /// 周期扣预期执行时间，格式为YYYY-MM-DD
        /// </summary>
        /// <value>周期扣预期执行时间，格式为YYYY-MM-DD</value>
        [DataMember(Name = "execute_time", EmitDefaultValue = false)]
        public string ExecuteTime { get; set; }

        /// <summary>
        /// 周期扣执行计划最晚执行时间，格式为YYYY-MM-DD
        /// </summary>
        /// <value>周期扣执行计划最晚执行时间，格式为YYYY-MM-DD</value>
        [DataMember(Name = "latest_execute_time", EmitDefaultValue = false)]
        public string LatestExecuteTime { get; set; }

        /// <summary>
        /// 该值为自然数，表示周期扣期数。
        /// </summary>
        /// <value>该值为自然数，表示周期扣期数。</value>
        [DataMember(Name = "period_id", EmitDefaultValue = false)]
        public string PeriodId { get; set; }

        /// <summary>
        /// 周期扣中单笔金额，单位是元
        /// </summary>
        /// <value>周期扣中单笔金额，单位是元</value>
        [DataMember(Name = "single_amount", EmitDefaultValue = false)]
        public string SingleAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExecutionPlan {\n");
            sb.Append("  ExecuteTime: ").Append(ExecuteTime).Append("\n");
            sb.Append("  LatestExecuteTime: ").Append(LatestExecuteTime).Append("\n");
            sb.Append("  PeriodId: ").Append(PeriodId).Append("\n");
            sb.Append("  SingleAmount: ").Append(SingleAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionPlan);
        }

        /// <summary>
        /// Returns true if ExecutionPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionPlan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExecuteTime == input.ExecuteTime ||
                    (this.ExecuteTime != null &&
                    this.ExecuteTime.Equals(input.ExecuteTime))
                ) && 
                (
                    this.LatestExecuteTime == input.LatestExecuteTime ||
                    (this.LatestExecuteTime != null &&
                    this.LatestExecuteTime.Equals(input.LatestExecuteTime))
                ) && 
                (
                    this.PeriodId == input.PeriodId ||
                    (this.PeriodId != null &&
                    this.PeriodId.Equals(input.PeriodId))
                ) && 
                (
                    this.SingleAmount == input.SingleAmount ||
                    (this.SingleAmount != null &&
                    this.SingleAmount.Equals(input.SingleAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecuteTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExecuteTime.GetHashCode();
                }
                if (this.LatestExecuteTime != null)
                {
                    hashCode = (hashCode * 59) + this.LatestExecuteTime.GetHashCode();
                }
                if (this.PeriodId != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodId.GetHashCode();
                }
                if (this.SingleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SingleAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
