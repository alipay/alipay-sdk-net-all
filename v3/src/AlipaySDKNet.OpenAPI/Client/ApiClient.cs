/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Threading;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AlipaySDKNet.OpenAPI.Util;
using AlipaySDKNet.OpenAPI.Util.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using ErrorEventArgs = Newtonsoft.Json.Serialization.ErrorEventArgs;
using RestSharp;
using RestSharp.Deserializers;
using RestSharpMethod = RestSharp.Method;
using Polly;

namespace AlipaySDKNet.OpenAPI.Client
{
    /// <summary>
    /// Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
    /// </summary>
    internal class CustomJsonCodec : RestSharp.Serializers.ISerializer, RestSharp.Deserializers.IDeserializer
    {
        private readonly IReadableConfiguration _configuration;
        private static readonly string _contentType = "application/json";
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        public CustomJsonCodec(IReadableConfiguration configuration)
        {
            _configuration = configuration;
        }

        public CustomJsonCodec(JsonSerializerSettings serializerSettings, IReadableConfiguration configuration)
        {
            _serializerSettings = serializerSettings;
            _configuration = configuration;
        }

        /// <summary>
        /// Serialize the object into a JSON string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>A JSON string.</returns>
        public string Serialize(object obj)
        {
            if (obj != null && obj is AlipaySDKNet.OpenAPI.Model.AbstractOpenAPISchema)
            {
                // the object to be serialized is an oneOf/anyOf schema
                return ((AlipaySDKNet.OpenAPI.Model.AbstractOpenAPISchema)obj).ToJson();
            }
            else if (obj is string)
            {
                return (string)obj;
            }
            else
            {
                return JsonConvert.SerializeObject(obj, _serializerSettings);
            }
        }

        public T Deserialize<T>(IRestResponse response)
        {
            var result = (T)Deserialize(response, typeof(T));
            return result;
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        internal object Deserialize(IRestResponse response, Type type)
        {
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }

            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                var bytes = response.RawBytes;
                if (response.Headers != null)
                {
                    var filePath = string.IsNullOrEmpty(_configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : _configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in response.Headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + ClientUtils.SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, bytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(bytes);
                return stream;
            }

            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }

            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return Convert.ChangeType(response.Content, type);
            }

            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        public string RootElement { get; set; }
        public string Namespace { get; set; }
        public string DateFormat { get; set; }

        public string ContentType
        {
            get { return _contentType; }
            set { throw new InvalidOperationException("Not allowed to set content type."); }
        }
    }
    /// <summary>
    /// Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
    /// encapsulating general REST accessor use cases.
    /// </summary>
    public partial class ApiClient : ISynchronousClient
    {
        private string _baseUrl;

        private AlipayConfigUtil _alipayConfigUtil = new AlipayConfigUtil();

        /// <summary>
        /// Specifies the settings on a <see cref="JsonSerializer" /> object.
        /// These settings can be adjusted to accommodate custom serialization rules.
        /// </summary>
        public JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);

        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />, defaulting to the global configurations' base url.
        /// </summary>
        public ApiClient()
        {
            _baseUrl = AlipaySDKNet.OpenAPI.Client.GlobalConfiguration.Instance.BasePath;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        public ApiClient(string basePath)
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            _baseUrl = basePath;
        }

        /// <summary>
        /// Constructs the RestSharp version of an http method
        /// </summary>
        /// <param name="method">Swagger Client Custom HttpMethod</param>
        /// <returns>RestSharp's HttpMethod instance.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private RestSharpMethod Method(HttpMethod method)
        {
            RestSharpMethod other;
            switch (method)
            {
                case HttpMethod.Get:
                    other = RestSharpMethod.GET;
                    break;
                case HttpMethod.Post:
                    other = RestSharpMethod.POST;
                    break;
                case HttpMethod.Put:
                    other = RestSharpMethod.PUT;
                    break;
                case HttpMethod.Delete:
                    other = RestSharpMethod.DELETE;
                    break;
                case HttpMethod.Head:
                    other = RestSharpMethod.HEAD;
                    break;
                case HttpMethod.Options:
                    other = RestSharpMethod.OPTIONS;
                    break;
                case HttpMethod.Patch:
                    other = RestSharpMethod.PATCH;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("method", method, null);
            }

            return other;
        }
        
        /// <summary>
        /// 设置alipay参数
        /// </summary>
        /// <param name="alipayConfigUtil"></param>
        public void SetAlipayConfigUtil(AlipayConfigUtil alipayConfigUtil)
        {
            if (alipayConfigUtil == null) return;
            if (!string.IsNullOrEmpty(alipayConfigUtil.ServerUrl))
            {
                _baseUrl = alipayConfigUtil.ServerUrl;
            }
            _alipayConfigUtil = alipayConfigUtil;
        }

        /// <summary>
        /// Provides all logic for constructing a new RestSharp <see cref="RestRequest"/>.
        /// At this point, all information for querying the service is known. Here, it is simply
        /// mapped into the RestSharp request.
        /// </summary>
        /// <param name="method">The http verb.</param>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="client">The Rest Client.</param>
        /// <returns>[private] A new RestRequest instance.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        private RestRequest NewRequest(
            HttpMethod method,
            string path,
            RequestOptions options,
            IReadableConfiguration configuration,
            RestClient client)
        {
            if (path == null) throw new ArgumentNullException("path");
            if (options == null) throw new ArgumentNullException("options");
            if (configuration == null) throw new ArgumentNullException("configuration");

            var jsonSerializer = new CustomJsonCodec(SerializerSettings, configuration);
            RestRequest request = new RestRequest(Method(method))
            {
                Resource = path,
                JsonSerializer = jsonSerializer
            };
            //format默认json
            request.RequestFormat = DataFormat.Json;

            if (options.PathParameters != null)
            {
                foreach (var pathParam in options.PathParameters)
                {
                    request.AddParameter(pathParam.Key, pathParam.Value, ParameterType.UrlSegment);
                }
            }

            if (options.QueryParameters != null)
            {
                foreach (var queryParam in options.QueryParameters)
                {
                    foreach (var value in queryParam.Value)
                    {
                        request.AddQueryParameter(queryParam.Key, value);
                    }
                }
            }

            string signContent = "";
            var contentTypes = options.HeaderParameters != null && options.HeaderParameters.TryGetValue("Content-Type", out var list) ? list : null;
            bool isUploadFile = contentTypes != null && contentTypes.Contains("multipart/form-data");
            bool isEncrypt = _alipayConfigUtil.IsEncrypt();
            if (isEncrypt && options.HeaderParameters != null)
            {
                options.HeaderParameters.Add("alipay-encrypt-type", _alipayConfigUtil.EncryptType);
                if (!isUploadFile)
                {
                    //除文件上传接口，加密后Content-Type均为"text/plain"
                    options.HeaderParameters.Remove("Content-Type");
                    options.HeaderParameters.Add("Content-Type", "text/plain");
                }
            }

            if (options.FormParameters != null && options.FormParameters.Count > 0)
            {
                if (isEncrypt && !isUploadFile)
                {
                    //获取（加密）验签内容
                    signContent = _alipayConfigUtil.Encrypt(jsonSerializer.Serialize(options.FormParameters), options.HeaderParameters);
                    request.AddParameter("text/plain", signContent, ParameterType.RequestBody);
                }
                else
                {
                    foreach (var formParam in options.FormParameters)
                    {
                        //获取（加密）验签内容
                        signContent = _alipayConfigUtil.Encrypt(formParam.Value, options.HeaderParameters);
                        if (isUploadFile)
                        {
                            request.AlwaysMultipartFormData = true;
                            if (isEncrypt)
                            {
                                //加密后文件上传的data部分的header："text/plain"
                                request.AddParameter(formParam.Key, signContent, "text/plain", ParameterType.RequestBody);
                            }
                            else
                            {
                                request.AddParameter(formParam.Key, signContent, "application/json", ParameterType.RequestBody);
                            }
                        }
                        else
                        {
                            request.AddParameter(formParam.Key, signContent);
                        }
                    }
                }
            }

            if (options.Data != null)
            {
                contentTypes = options.HeaderParameters != null && options.HeaderParameters.TryGetValue("Content-Type", out var list2) ? list2 : null;
                if (options.Data is Stream stream)
                {
                    var contentType = "application/octet-stream";
                    if (contentTypes != null)
                    {
                        contentType = contentTypes[0];
                    }

                    var bytes = ClientUtils.ReadAsBytes(stream);
                    request.AddParameter(contentType, bytes, ParameterType.RequestBody);
                }
                else
                {
                    //获取（加密）验签内容
                    signContent = _alipayConfigUtil.Encrypt(jsonSerializer.Serialize(options.Data), options.HeaderParameters);
                    if (options.HeaderParameters != null)
                    {
                        if (contentTypes != null && contentTypes.Any(header => header.Contains("text/plain")))
                        {
                            options.Data = signContent;
                            request.AddParameter("text/plain", options.Data, ParameterType.RequestBody);
                        }
                        else
                        {
                            // TODO: Generated client user should add additional handlers. RestSharp only supports XML and JSON, with XML as default.
                            request.AddJsonBody(options.Data);
                        }
                    }
                    else
                    {
                        // Here, we'll assume JSON APIs are more common. XML can be forced by adding produces/consumes to openapi spec explicitly.
                        // request.RequestFormat = DataFormat.Json;
                        request.AddJsonBody(options.Data);
                    }
                }
            }

            if (options.FileParameters != null)
            {
                foreach (var fileParam in options.FileParameters)
                {
                    foreach (var file in fileParam.Value)
                    {
                        var bytes = ClientUtils.ReadAsBytes(file);
                        var customStream = file as CustomStream;
                        if (customStream != null)
                        {
                            request.Files.Add(FileParameter.Create(fileParam.Key, bytes, customStream.Name));
                            continue;
                        }
                        var fileStream = file as FileStream;
                        if (fileStream != null)
                            request.Files.Add(FileParameter.Create(fileParam.Key, bytes, System.IO.Path.GetFileName(fileStream.Name)));
                        else
                            request.Files.Add(FileParameter.Create(fileParam.Key, bytes, "no_file_name_provided"));
                    }
                }
            }

            //加签
            _alipayConfigUtil.Sign(request.Method.ToString(), client.BuildUri(request).PathAndQuery, signContent, options.HeaderParameters);
            
            if (configuration.DefaultHeaders != null)
            {
                foreach (var headerParam in configuration.DefaultHeaders)
                {
                    request.AddHeader(headerParam.Key, headerParam.Value);
                }
            }

            if (options.HeaderParameters != null)
            {
                if (!options.HeaderParameters.ContainsKey("alipay-request-id"))
                {
                    options.HeaderParameters.Add("alipay-request-id", Guid.NewGuid().ToString());
                }

                foreach (var headerParam in options.HeaderParameters)
                {
                    foreach (var value in headerParam.Value)
                    {
                        request.AddHeader(headerParam.Key, value);
                    }
                }
            }

            if (options.Cookies != null && options.Cookies.Count > 0)
            {
                foreach (var cookie in options.Cookies)
                {
                    request.AddCookie(cookie.Name, cookie.Value);
                }
            }

            contentTypes = options.HeaderParameters != null && options.HeaderParameters.TryGetValue("Content-Type", out var list3) ? list3 : null;
            var requestIds = options.HeaderParameters != null && options.HeaderParameters.TryGetValue("alipay-request-id", out var list4) ? list4 : null;
            AlipayLogger.logBizInfo(client.BuildUri(request).AbsoluteUri, signContent, request.Method.ToString(),
                contentTypes == null ? "" : contentTypes[0], requestIds == null ? "" : requestIds[0]);
            return request;
        }

        private ApiResponse<T> ToApiResponse<T>(IRestResponse<T> response)
        {
            T result = response.Data;
            string rawContent = response.Content;

            var transformed = new ApiResponse<T>(response.StatusCode, new Multimap<string, string>(), result, rawContent)
            {
                ErrorText = response.ErrorMessage,
                Cookies = new List<Cookie>()
            };

            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }

            if (response.Cookies != null)
            {
                foreach (var responseCookies in response.Cookies)
                {
                    transformed.Cookies.Add(
                        new Cookie(
                            responseCookies.Name,
                            responseCookies.Value,
                            responseCookies.Path,
                            responseCookies.Domain)
                        );
                }
            }

            return transformed;
        }
        
        /// <summary>
        /// 验签及解密
        /// </summary>
        /// <param name="response"></param>
        /// <param name="jsonDeserializer"></param>
        /// <typeparam name="T"></typeparam>
        private void SignAndEncrypt<T>(IRestResponse<T> response, IDeserializer jsonDeserializer)
        {
            string sign = null;
            string alipayCertSN = null;
            string timestamp = null;
            string nonce = null;
            string contentType = null;
            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    sign = "alipay-signature".Equals(responseHeader.Name) ? ClientUtils.ParameterToString(responseHeader.Value) : sign;
                    alipayCertSN = "alipay-sn".Equals(responseHeader.Name) ? ClientUtils.ParameterToString(responseHeader.Value) : alipayCertSN;
                    timestamp = "alipay-timestamp".Equals(responseHeader.Name) ? ClientUtils.ParameterToString(responseHeader.Value) : timestamp;
                    nonce = "alipay-nonce".Equals(responseHeader.Name) ? ClientUtils.ParameterToString(responseHeader.Value) : nonce;
                    contentType = "Content-Type".Equals(responseHeader.Name) ? ClientUtils.ParameterToString(responseHeader.Value) : contentType;
                }
            }

            bool isSuccessful = response.StatusCode >= HttpStatusCode.OK && (int)response.StatusCode <= 299;
            if (!isSuccessful && (sign == null || "null".Equals(sign))) return;
            //验签
            string rawContent = response.Content;
            var verify = _alipayConfigUtil.Verify(rawContent, sign, alipayCertSN, timestamp, nonce);
            if (!verify)
            {
                throw new ApiException(400, string.Format("sign check fail: check Sign and Data Fail! [sign={0}, respBody={1}]", sign, rawContent));
            }
            if (!isSuccessful) return;
            //解密
            response.Content = _alipayConfigUtil.Decrypt(rawContent);
            //"text/plain"需解密后自行反序列化
            if ("text/plain".Equals(contentType))
            {
                response.Data = jsonDeserializer.Deserialize<T>(response);
            }
        }

        private ApiResponse<T> Exec<T>(RestRequest req, RequestOptions options, IReadableConfiguration configuration, RestClient client)
        {
            client.ClearHandlers();
            var jsonDeserializer = req.JsonSerializer as IDeserializer;
            if (jsonDeserializer == null)
            {
                jsonDeserializer = new CustomJsonCodec(SerializerSettings, configuration);
            }
            client.AddHandler("application/json", () => jsonDeserializer);
            client.AddHandler("text/json", () => jsonDeserializer);
            client.AddHandler("text/x-json", () => jsonDeserializer);
            client.AddHandler("text/javascript", () => jsonDeserializer);
            client.AddHandler("*+json", () => jsonDeserializer);

            var xmlDeserializer = new XmlDeserializer();
            client.AddHandler("application/xml", () => xmlDeserializer);
            client.AddHandler("text/xml", () => xmlDeserializer);
            client.AddHandler("*+xml", () => xmlDeserializer);
            // client.AddHandler("*", () => xmlDeserializer);

            client.Timeout = configuration.Timeout;

            if (configuration.Proxy != null)
            {
                client.Proxy = configuration.Proxy;
            }

            if (configuration.UserAgent != null)
            {
                client.UserAgent = configuration.UserAgent;
            }

            if (configuration.ClientCertificates != null)
            {
                client.ClientCertificates = configuration.ClientCertificates;
            }

            InterceptRequest(req);

            IRestResponse<T> response;
            if (RetryConfiguration.RetryPolicy != null)
            {
                var policy = RetryConfiguration.RetryPolicy;
                var policyResult = policy.ExecuteAndCapture(() => client.Execute(req));
                response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>
                {
                    Request = req,
                    ErrorException = policyResult.FinalException
                };
            }
            else
            {
                response = client.Execute<T>(req);
            }

            if (response.ErrorMessage != null)
            {
                AlipayLogger.logBizError(response.ErrorMessage, response.ErrorException);
            }
            
            //验签及解密
            SignAndEncrypt(response, jsonDeserializer);
            // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
            if (typeof(AlipaySDKNet.OpenAPI.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
            {
                try
                {
                    response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                }
                catch (Exception ex)
                {
                    throw ex.InnerException != null ? ex.InnerException : ex;
                }
            }
            else if (typeof(T).Name == "Stream") // for binary response
            {
                response.Data = (T)(object)new MemoryStream(response.RawBytes);
            }
            else if (typeof(T).Name == "Byte[]") // for byte response
            {
                response.Data = (T)(object)response.RawBytes;
            }

            InterceptResponse(req, response);

            var result = ToApiResponse(response);
            if (response.ErrorMessage == null && !string.IsNullOrEmpty(response.Content))
            {
                string traceId = response.Headers != null && result.Headers.TryGetValue("alipay-trace-id", out var list) ? list[0] : null;
                AlipayLogger.logBizResponseInfo((int)response.StatusCode, response.Content, traceId);
            }
            
            if (response.ErrorMessage != null)
            {
                result.ErrorText = response.ErrorMessage;
            }

            if (response.Cookies != null && response.Cookies.Count > 0)
            {
                if (result.Cookies == null) result.Cookies = new List<Cookie>();
                foreach (var restResponseCookie in response.Cookies)
                {
                    var cookie = new Cookie(
                        restResponseCookie.Name,
                        restResponseCookie.Value,
                        restResponseCookie.Path,
                        restResponseCookie.Domain
                    )
                    {
                        Comment = restResponseCookie.Comment,
                        CommentUri = restResponseCookie.CommentUri,
                        Discard = restResponseCookie.Discard,
                        Expired = restResponseCookie.Expired,
                        Expires = restResponseCookie.Expires,
                        HttpOnly = restResponseCookie.HttpOnly,
                        Port = restResponseCookie.Port,
                        Secure = restResponseCookie.Secure,
                        Version = restResponseCookie.Version
                    };

                    result.Cookies.Add(cookie);
                }
            }
            return result;
        }

        
        /// <summary>
        /// 获取RestClient
        /// </summary>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>RestClient</returns>
        private RestClient GetRestClient(RequestOptions options, IReadableConfiguration configuration)
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
            return new RestClient(baseUrl);
        }

        private string GetSignContent(IDictionary<string, string> parameters)
        {
            // 第一步：把字典按Key的字母顺序排序
            IEnumerator<KeyValuePair<string, string>> dem = parameters.GetEnumerator();

            // 第二步：把所有参数名和参数值串在一起
            StringBuilder query = new StringBuilder("");
            while (dem.MoveNext())
            {
                string key = dem.Current.Key;
                string value = dem.Current.Value;
                if (!string.IsNullOrEmpty(key) && !string.IsNullOrEmpty(value))
                {
                    query.Append(key).Append("=").Append(value).Append("&");
                }
            }

            return query.ToString().Substring(0, query.Length - 1);
        }

        #region ISynchronousClient
        /// <summary>
        /// Make a HTTP GET request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Get, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP POST request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Post, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP PUT request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Put, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP DELETE request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Delete, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP HEAD request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Head, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP OPTION request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Options, path, options, config, client), options, config, client);
        }

        /// <summary>
        /// Make a HTTP PATCH request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            RestClient client = GetRestClient(options, config);
            return Exec<T>(NewRequest(HttpMethod.Patch, path, options, config, client), options, config, client);
        }
        #endregion ISynchronousClient

        /// <summary>
        /// 采集并排序所有参数
        /// </summary>
        /// <param name="method">方法名</param>
        /// <param name="appParams">业务参数</param>
        /// <param name="systemParams">系统参数</param>
        /// <param name="loadTest">loadTest</param>
        /// <param name="configuration">configuration</param>
        /// <returns></returns>
        public IDictionary<string, string> GetSortedMap(string method, Dictionary<string, string> appParams, Dictionary<string, string> systemParams, bool loadTest, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            //系统参数
            systemParams.Add("method", method);
            systemParams.Add("version", "1.0");
            if (configuration.DefaultHeaders.TryGetValue("alipay-sdk-version", out var sdkVersion))
            {
                systemParams.Add("alipay_sdk", sdkVersion);
            }
            systemParams.Add("app_id", _alipayConfigUtil.AppId);
            systemParams.Add("format", "json");
            systemParams.Add("timestamp", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            systemParams.Add("charset", "UTF-8");
            systemParams.Add("sign_type", "RSA2");
            systemParams.Add("app_cert_sn", _alipayConfigUtil.AppCertSn);
            systemParams.Add("alipay_root_cert_sn", _alipayConfigUtil.RootCertSn);
            if (_alipayConfigUtil.IsEncrypt())
            {
                systemParams.Add("encrypt_type", _alipayConfigUtil.EncryptType);
                //加密
                string bizContent = appParams.TryGetValue("biz_content", out var value) ? value : "";
                appParams["biz_content"] = _alipayConfigUtil.Encrypt(bizContent, new Multimap<string, string>());
            }

            //排序
            IDictionary<string, string> sortedParams = new SortedDictionary<string, string>(systemParams, StringComparer.Ordinal);
            foreach (var param in appParams)
            {
                sortedParams.Add(param.Key, param.Value);
            }

            if (!string.IsNullOrEmpty(_alipayConfigUtil.PrivateKeyPem))
            {
                sortedParams.Add("sign", _alipayConfigUtil.GenerateSign(GetSignContent(sortedParams)));
            }
            if (loadTest)
            {
                sortedParams["app_id"] = _alipayConfigUtil.AppId + "_TEST_1A";
            }
            return sortedParams;
        }

        /// <summary>
        /// 获取url
        /// </summary>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">The additional request options.</param>
        /// <returns></returns>
        public string GetBaseUrl(RequestOptions options, IReadableConfiguration configuration)
        {
            return configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
        }
    }
}
